// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// ----------------------- MIS MODELOS -----------------------
// -----------------------------------------------------------

// ============= ðŸ”’ðŸŸ¢ | Configuracion del restaurant =============

model RestaurantConfig {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(100) // Nombre Restaurant       (Libre + trim)
  activeLogoId Int?   @map("active_logo_id")

  currency String  @default("PEN") @db.Char(3) //            (Upper case + trim)
  address  String? @db.VarChar(255) //            (Title case + trim)
  phone    String? @db.VarChar(15) //            (trim)
  email    String? @db.VarChar(50) //            (lower case + trim)

  taxName     String?  @default("IGV") @map("tax_name") @db.VarChar(20)
  taxIncluded Boolean  @default(true) @map("tax_incluided") // Â¿El precio incluye impuesto?
  taxType     String?  @default("INCLUIDO") @db.VarChar(10) // "INCLUIDO", "EXCLUIDO"
  taxRate     Decimal? @default(0.18) @map("tax_rate") @db.Decimal(5, 4) // 18% = 0.18

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  @@map("restaurant_config")
}

// ============= ðŸ”“ðŸŸ¢ | Themas =============

model Theme {
  name           String @id @db.Char(20) // "MI Temita"    (Capitalized case + trim)
  primaryColor   String @db.Char(7) // #_______ color base 500       (Upper case + trim)
  secondaryColor String @db.Char(7) // #_______ color base 500       (Upper case + trim)
  accentColor    String @db.Char(7) // #_______ color base 500       (Upper case + trim)
  neutralColor   String @db.Char(7) // #_______ color base 500       (Upper case + trim)

  isSystem Boolean @default(false) @map("is_system")
  isPublic Boolean @default(true) @map("is_public")

  createdUserDocument String?  @map("user_document_number") @db.Char(12)
  user                User?    @relation("UserCreatedThemes", fields: [createdUserDocument], references: [documentNumber])
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  usersUsingThisTheme    User[]     @relation("UserTheme")
  customerUsingThisTheme Customer[] @relation("CustomerTheme")

  @@map("themes")
}

// ============= ðŸ”“ðŸŸ¢ | Model Tipos Documentos =============

model DocumentType {
  name        String  @id @db.Char(10) // DNI, RUC, CE, PASAPORTE     (Upper case + trim)
  description String? @db.VarChar(255) // (Title case + trim)
  digitLength Int     @map("digit_lenght")
  color       String? @db.Char(7)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  customers Customer[]
  users     User[]

  @@map("document_types")
}

// ============= ðŸ”’âš« | Model Estados Cuenta =============

model AccountStatus {
  code        String  @id @db.Char(10) // ACTIVE, INACTIVE, SUSPENDED    (Snake + Upper case + trim)
  name        String  @db.VarChar(20) // Activa, Inactiva, Suspendida   (Title Case + trim)
  description String? @db.VarChar(255) // (Capitalized case + trim)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  users     User[]
  customers Customer[]

  @@map("account_statuses")
}

// ============= ðŸ”’âš« | Model CategorÃ­as de Permisos =============

model PermissionCategory {
  code        String  @id @db.Char(40) // user_management, product_management, customer_management, etc.
  name        String  @db.VarChar(50) // GestiÃ³n de Usuarios, GestiÃ³n de Productos    (Capitalized case + trim)
  description String? @db.VarChar(255) // DescripciÃ³n de la categorÃ­a    (Capitalized case + trim)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  permissions Permission[]

  @@map("permission_categories")
}

// ============= ðŸ”’âš« | Model Permisos =============

model Permission {
  code         String             @id @db.Char(40) // view_user, create_user, update_user, delete_user, restore_user
  name         String             @unique @db.VarChar(50) // Ver Usuarios, Crear Usuarios, Editar Usuarios   (Capitalized case + trim)
  description  String?            @db.VarChar(255) // (Capitalized case + trim)
  categoryCode String             @map("category_code") @db.Char(25)
  category     PermissionCategory @relation(fields: [categoryCode], references: [code])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  rolePermissions RolePermission[]

  @@map("permissions")
}

// ============= ðŸ”“ðŸŸ¢ | Model Roles =============

model Role {
  name        String  @id @db.Char(20) // Admin, Super admin, Chef, Mozo, Cajero, Barra   (Capitalized Case + Trim)
  description String? @db.VarChar(255) // (Title case + trim)
  color       String? @db.Char(7)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  rolePermissions RolePermission[]
  users           User[]

  @@map("roles")
}

// ============= ðŸ”“ðŸŸ¢ | Model Role Permission =============

model RolePermission {
  id             Int        @id @default(autoincrement())
  roleName       String     @map("role_name") @db.Char(20)
  role           Role       @relation(fields: [roleName], references: [name])
  permissionCode String     @map("permission_code") @db.Char(40)
  permission     Permission @relation(fields: [permissionCode], references: [code])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  @@unique([roleName, permissionCode])
  @@map("role_permissions")
}

// ============= ðŸ”“ðŸŸ¢ | Model Usuarios (Empleados) =============

model User {
  documentNumber String  @id @map("document_number") @db.Char(12) // DNI como clave primaria
  username       String  @unique @db.VarChar(30) // (Libre + trim)
  email          String  @unique @db.VarChar(100) // (lower case + trim)
  password       String  @db.Text // (Libre + trim)
  pin            String? @db.VarChar(6) // (Trim)

  fullName              String    @map("full_name") @db.VarChar(150) // (Title case + trim)
  phoneNumber           String?   @unique @map("phone_number") @db.VarChar(15) // (trim)
  birthDate             DateTime? @map("birth_date") @db.Date
  hireDate              DateTime? @map("hire_date") @db.Date
  salary                Decimal?  @db.Decimal(10, 2)
  emergencyContactName  String?   @map("emergency_contact_name") @db.VarChar(100) // (Title case + trim)
  emergencyContactPhone String?   @map("emergency_contact_phone") @db.VarChar(15) // (trim)

  documentTypeName String       @map("document_type_name") @db.Char(10)
  documentType     DocumentType @relation(fields: [documentTypeName], references: [name])

  roleName          String        @map("role_name") @db.Char(20)
  role              Role          @relation(fields: [roleName], references: [name])
  accountStatusCode String        @default("ACTIVE") @map("account_status_code") @db.Char(10)
  accountStatus     AccountStatus @relation(fields: [accountStatusCode], references: [code])
  themeName         String?       @map("theme_name") @db.Char(20)
  theme             Theme?        @relation("UserTheme", fields: [themeName], references: [name])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  // Relaciones
  openedCashBoxes    CashBox[]           @relation("CashBoxOpener")
  closedCashBoxes    CashBox[]           @relation("CashBoxCloser")
  inventoryMovements InventoryMovement[]
  logs               Log[]
  sessions           Session[]

  combinedTables CombineTable[] @relation("UserTableCombiner")
  releasedTables CombineTable[] @relation("UserTableReleaser")

  tablesSessionOpened TableSession[] @relation("TableSessionOpener")
  tablesSessionClosed TableSession[] @relation("TableSessionCloser")
  ordersCreated       Order[]        @relation("OrderCreator")
  ordersClosed        Order[]        @relation("OrderCloser")
  createdThemes       Theme[]        @relation("UserCreatedThemes")
  paymentsReceived    Payment[]      @relation("PaymentsReceived")

  @@index([username])
  @@index([documentNumber])
  @@index([email])
  @@index([accountStatusCode])
  @@index([email, accountStatusCode])
  @@map("users")
}

// ============= ðŸ”“ðŸŸ¢ | Model Sesiones =============

model Session {
  id                     String    @id @default(uuid())
  userDocumentNumber     String?   @map("user_document_number") @db.Char(12)
  user                   User?     @relation(fields: [userDocumentNumber], references: [documentNumber])
  customerDocumentNumber String?   @map("customer_number") @db.Char(12)
  customer               Customer? @relation(fields: [customerDocumentNumber], references: [documentNumber])

  token      String    @unique @db.VarChar(255)
  deviceInfo String?   @map("device_info") @db.VarChar(255)
  ipAddress  String?   @map("ip_address") @db.VarChar(50)
  isActive   Boolean   @default(true) @map("is_active")
  expiresAt  DateTime  @map("expires_at")
  closedAt   DateTime? @map("closed_at") @db.Timestamp(0)
  closedBy   String?   @map("closed_by") @db.Char(12)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  @@index([userDocumentNumber])
  @@index([customerDocumentNumber])
  @@index([token])
  @@index([isActive])
  @@index([userDocumentNumber, isActive])
  @@index([customerDocumentNumber, isActive])
  @@map("sessions")
}

// ============= ðŸ”“ðŸŸ¢ | Model Clientes =============

model Customer {
  documentNumber String  @id @map("document_number") @db.Char(12) // DNI como clave primaria
  username       String? @unique @db.VarChar(30) // (Libre + trim)
  email          String? @unique @db.VarChar(100) // (lower case + trim)
  password       String? @db.Text // (Libre + trim)

  fullName         String       @map("full_name") @db.VarChar(150) // (Title case + trim)
  phoneNumber      String?      @unique @map("phone_number") @db.VarChar(15) // (trim)
  documentTypeName String       @map("document_type_name") @db.Char(10)
  documentType     DocumentType @relation(fields: [documentTypeName], references: [name])

  accountStatusCode String        @default("ACTIVE") @map("account_status_code") @db.Char(10)
  accountStatus     AccountStatus @relation(fields: [accountStatusCode], references: [code])
  themeName         String?       @map("theme_name") @db.Char(20)
  theme             Theme?        @relation("CustomerTheme", fields: [themeName], references: [name])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  sessions     Session[]
  orders       Order[]
  logs         Log[]
  paymentsMade Payment[] @relation("PaymentsMade")

  @@index([documentNumber])
  @@index([email])
  @@index([accountStatusCode])
  @@index([fullName])
  @@map("customers")
}

// ============= ðŸ”“ðŸŸ¢ | Model Caja =============

model CashBox {
  id                 Int      @id @default(autoincrement())
  openerUserDocument String   @map("opener_user_document") @db.Char(12)
  opener             User     @relation("CashBoxOpener", fields: [openerUserDocument], references: [documentNumber])
  openedAt           DateTime @default(now()) @map("opened_at") @db.Timestamp(0)
  initialAmount      Decimal  @map("initial_amount") @db.Decimal(10, 2)

  closerUserDocument String?   @map("closer_user_document") @db.Char(12)
  closer             User?     @relation("CashBoxCloser", fields: [closerUserDocument], references: [documentNumber])
  closedAt           DateTime? @map("closed_at")
  finalAmount        Decimal?  @map("final_amount") @db.Decimal(10, 2)

  totalSales Decimal? @map("total_sales") @db.Decimal(10, 2)
  notes      String?  @db.VarChar(255)

  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  payments Payment[]

  @@index([openerUserDocument])
  @@index([closerUserDocument])
  @@map("cash_boxes")
}

// ============= ðŸ”“ðŸŸ¢ | Model Estados Mesa =============

model TableStatus {
  code        String  @id @db.Char(20) // AVAILABLE, BUSY, CLEANING, MAINTENANCE
  name        String  @db.Char(20) // Disponible, Ocupada, En Limpieza, Mantenimiento (Capitalized case + trim)
  description String? @db.VarChar(255)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  tables Table[]

  @@map("table_statuses")
}

// ============= ðŸ”“ðŸŸ¢ | Model Zonas =============
model RestaurantZone {
  name        String  @id @db.Char(20) // Primer Piso, Terraza, Vip (Capitalized Case +  trim)
  description String? @db.VarChar(255) // (Title case + trim)
  color       String? @db.Char(7)
  isActive    Boolean @default(true)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  tables Table[]

  @@map("restaurant_zones")
}

// ============= ðŸ”“ðŸŸ¢ | Model Mesas =============

model Table {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(50) // "Manco Capac", "Atahualpa"   (Capitalized case + trim)
  capacity Int    @default(4)

  zoneName   String?         @map("zone_name") @db.Char(20)
  zone       RestaurantZone? @relation(fields: [zoneName], references: [name])
  statusCode String          @default("AVAILABLE") @map("status_code") @db.Char(20)
  status     TableStatus     @relation(fields: [statusCode], references: [code])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  tableSessions     TableSession[]
  combineTableItems CombineTableItem[]

  @@map("tables")
}

// ============= ðŸ”“ðŸŸ¢ | Mesas Combinadas (Grupo) =============

model CombineTable {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  combinerUserDocument String   @map("combiner_user_document") @db.Char(12)
  combiner             User     @relation("UserTableCombiner", fields: [combinerUserDocument], references: [documentNumber])
  combineAt            DateTime @default(now()) @map("combined_at") @db.Timestamp(0)
  isActive             Boolean  @default(true) @map("is_active")

  releaserUserDocument String?   @map("releaser_user_document") @db.Char(12)
  releaser             User?     @relation("UserTableReleaser", fields: [releaserUserDocument], references: [documentNumber])
  releasedAt           DateTime? @map("released_at") @db.Timestamp(0)

  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  tables        CombineTableItem[]
  tableSessions TableSession[]

  @@map("combine_tables")
}

// ============= ðŸ”“ðŸŸ¢ | Mesas Combinadas Item  =============
model CombineTableItem {
  id             Int          @id @default(autoincrement())
  combineTableId Int          @map("combine_table_id")
  combineTable   CombineTable @relation(fields: [combineTableId], references: [id])

  tableId Int   @map("table_id")
  table   Table @relation(fields: [tableId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  @@unique([combineTableId, tableId])
  @@map("combine_table_items")
}

// ============= ðŸ”“ðŸŸ¢ | Model Session Mesas =============

model TableSession {
  id             Int           @id @default(autoincrement())
  tableId        Int?          @map("table_id")
  table          Table?        @relation(fields: [tableId], references: [id])
  combineTableId Int?          @map("combine_table_id")
  combineTable   CombineTable? @relation(fields: [combineTableId], references: [id])

  openerUserDocument String   @map("opener_user_document") @db.Char(12)
  opener             User     @relation("TableSessionOpener", fields: [openerUserDocument], references: [documentNumber])
  openedAt           DateTime @default(now()) @map("opened_at") @db.Timestamp(0)
  numberPeople       Int      @default(1) @map("number_people")
  isActive           Boolean  @default(true) @map("is_active")

  closerUserDocument String?   @map("closer_user_document") @db.Char(12)
  closer             User?     @relation("TableSessionCloser", fields: [closerUserDocument], references: [documentNumber])
  closedAt           DateTime? @map("closed_at") @db.Timestamp(0)

  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  orders Order[]

  @@unique([tableId, combineTableId, isActive])
  @@index([tableId])
  @@index([combineTableId])
  @@index([isActive])
  @@index([openerUserDocument])
  @@map("table_sessions")
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++ Imagenes - Polimorf +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ============= ðŸ”“ðŸŸ¢ | Model Images =============

model Image {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(50) // (Title case + trim)
  altText       String  @map("alt_text") @db.VarChar(50) // (Title case + trim)
  url           String  @db.Text // (Libre + trim)
  imageableId   Int     @map("imageable_id")
  imageableType String  @map("imageable_type") @db.VarChar(50) // (lower case - trim)
  isActive      Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  @@index([imageableId, imageableType])
  @@map("images")
}

// ============= ðŸ”“ðŸŸ¢ | Model Marcas =============

model Brand {
  name        String  @id @db.Char(20) // "Inka Kola, Coca Cola"          (Capitalized Case + trim)
  description String? @db.VarChar(255) // (Title case + trim)
  color       String? @db.Char(7) // (Upper case + trim)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  products Product[]

  @@map("brands")
}

// ============= ðŸ”’âš« | Model Estados Producto =============

model ProductStatus {
  code        String  @id @db.Char(20) // ACTIVE, INACTIVE, DISCONTINUED, OUT_OF_STOCK      (Upper case + trim)
  name        String  @unique @db.VarChar(50) // Activo, Inactivo , Descontinuado, Agotado    (Title case + trim)
  description String? @db.VarChar(255) //                              (Capitalized case + trim)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  products Product[]

  @@map("product_statuses")
}

// ============= ðŸ”“ðŸŸ¢ | Model Tipos Producto =============

model ProductType {
  name        String  @id @db.Char(20) // Plato, Bebida    (Capitalized case + trim)
  description String? @db.VarChar(255)
  color       String? @db.Char(7)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  products Product[]

  @@map("product_types")
}

// ============= ðŸ”“ðŸŸ¢ | Model Categorias Producto =============

model ProductCategory {
  name        String  @id @db.Char(20) // "Entradas", "Principales", "Postres", "Gaseosas", "Cervezas" (Capitalized case + trim)
  description String? @db.VarChar(255) // (Capitalized case + trim)
  color       String? @db.Char(7)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  products Product[]

  @@map("product_categories")
}

// ============= ðŸ”“ðŸŸ¢ | Model Productos =============

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100) // (Title case + trim)
  description String?  @db.Text // (Capitalized case + trim)
  price       Decimal  @db.Decimal(10, 2)
  offerPrice  Decimal? @map("offer_price") @db.Decimal(10, 2)

  productTypeName String      @map("product_type_name") @db.Char(20)
  productType     ProductType @relation(fields: [productTypeName], references: [name])

  productCategoryName String          @map("product_category_name") @db.Char(20)
  productCategory     ProductCategory @relation(fields: [productCategoryName], references: [name])

  brandName String? @map("brand_name") @db.Char(20)
  brand     Brand?  @relation(fields: [brandName], references: [name])

  productStatusCode String        @default("ACTIVE") @map("product_status_code") @db.Char(20)
  productStatus     ProductStatus @relation(fields: [productStatusCode], references: [code])
  mainImageId       Int?          @map("main_image_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  inventories Inventory[]
  orderItems  OrderItem[]

  @@map("products")
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++ Pedidos +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ============= ðŸ”’âš« | Estado de Orden =============

model OrderStatus {
  code        String  @id @db.Char(20) // OPEN, IN_PROGRESS, SERVED, ACCOUNT_REQUESTED, PAID, ANNULLED   (Upper case + trim)
  name        String  @unique @db.VarChar(50) // Abierta, En Proceso, Servida, Cuenta Solicitada, Pagada, Anulada  ...   (Capitalized case + trim)
  description String? @db.VarChar(255) // (Title case + trim)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  orders Order[]

  @@map("order_statuses")
}

// ============= ðŸ”’âš« | Estado de Items de Pedido =============

model OrderItemStatus {
  code        String  @id @db.Char(20) // PENDING, IN_PREPARATION, READY, DELIVERED, ANULLED
  name        String  @unique @db.VarChar(50) // Pendiente, En Preparacion, Listo, Entregado, Anulado ...     (Capitalized case + trim)
  description String? @db.VarChar(255)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  orderItems OrderItem[]

  @@map("order_item_statuses")
}

// ============= ðŸ”“ðŸŸ¢ | Model Orden =============

model Order {
  code           String        @id @db.Char(20) // ORD-20250813-0001
  tableSessionId Int?          @map("table_session_id")
  tableSession   TableSession? @relation(fields: [tableSessionId], references: [id])

  creatorUserDocument String    @map("creator_user_document") @db.Char(12)
  creator             User      @relation("OrderCreator", fields: [creatorUserDocument], references: [documentNumber])
  createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamp(0)

  customerDocumentNumber String   @map("customer_document_number") @db.Char(12)
  customer               Customer @relation(fields: [customerDocumentNumber], references: [documentNumber])

  subtotalAmount Decimal @default(0) @map("subtotal_amount") @db.Decimal(10, 2) // sin impuesto
  taxAmount      Decimal @default(0) @map("tax_amount") @db.Decimal(10, 2) // Monto impuesto
  totalAmount    Decimal @default(0) @map("total_amount") @db.Decimal(10, 2) // ya incluye impuesto

  statusCode String      @map("status_code") @db.Char(20)
  status     OrderStatus @relation(fields: [statusCode], references: [code])

  closerUserDocument String?   @map("closed_user_document") @db.Char(12)
  closer             User?     @relation("OrderCloser", fields: [closerUserDocument], references: [documentNumber])
  closedAt           DateTime? @map("closed_at") @db.Timestamp(0)

  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  orderItems OrderItem[]
  payment    Payment?

  @@index([code])
  @@index([statusCode])
  @@index([tableSessionId])
  @@index([creatorUserDocument])
  @@index([closerUserDocument])
  @@map("orders")
}

// ============= ðŸ”“ðŸŸ¢ | Model Items de Orden =============

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderCode String  @map("order_code") @db.Char(20)
  order     Order   @relation(fields: [orderCode], references: [code])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  quantity  Int
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)
  subTotal  Decimal @map("sub_total") @db.Decimal(10, 2)
  discount  Decimal @default(0.00) @db.Decimal(10, 2)

  statusCode          String          @default("PENDIENTE") @map("status_code") @db.Char(20)
  status              OrderItemStatus @relation(fields: [statusCode], references: [code])
  specialInstructions String?         @map("special_instructions") @db.VarChar(255)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  @@index([orderCode])
  @@index([productId])
  @@index([statusCode])
  @@index([orderCode, statusCode])
  @@map("order_items")
}

// ============= ðŸ”“ðŸŸ¢ | Model MÃ©todos de Pago =============

model PaymentMethod {
  name        String  @id @db.Char(25) // "Efectivo", "Yape", "Plin", "Transferencia Bancaria", "Visa"   (Capitalized case + trim)
  description String? @db.VarChar(255) // (Title case + trim)
  color       String? @db.Char(7)
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  payments Payment[]

  @@map("payment_methods")
}

// ============= ðŸ”“ðŸŸ¢ | Model Datos de pago =============

model Payment {
  id        Int     @id @default(autoincrement())
  orderCode String  @unique @map("order_code") @db.Char(20)
  order     Order   @relation(fields: [orderCode], references: [code])
  cashBoxId Int     @map("cash_box_id")
  cashBox   CashBox @relation(fields: [cashBoxId], references: [id])

  totalAmount       Decimal       @map("total_amount") @db.Decimal(10, 2)
  paymentMethodName String        @map("payment_method_name") @db.Char(25)
  paymentMethod     PaymentMethod @relation(fields: [paymentMethodName], references: [name])
  receivedAmount    Decimal?      @map("received_amount") @db.Decimal(10, 2)
  changeAmount      Decimal?      @map("change_amount") @db.Decimal(10, 2)

  transactionNumber String? @map("transaction_number") @db.VarChar(100)
  notes             String? @db.VarChar(255)

  receiveUserDocument String @map("receive_user_document") @db.Char(12)
  receiveUser         User   @relation("PaymentsReceived", fields: [receiveUserDocument], references: [documentNumber])

  paidCustomerDocument String?   @map("paid_customer_document") @db.Char(12)
  paidCustomer         Customer? @relation("PaymentsMade", fields: [paidCustomerDocument], references: [documentNumber])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  @@index([orderCode])
  @@index([cashBoxId])
  @@index([createdAt])
  @@map("payments")
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++ Inventario +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ============= ðŸ”’ðŸŸ¢ | Model Movimientos Inventario =============

model InventoryMovementType {
  code        String  @id @db.Char(20) // "INCOME", "OUTCOME", "ADJUSTMENT", "RETURN"
  name        String  @unique @db.VarChar(50) // "Ingreso", "Salida", "Ajuste", "Devolucion"    (Capitalized case + trim)
  description String? @db.VarChar(255) // (Title case + trim)
  color       String? @db.Char(7)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)

  movements InventoryMovement[]

  @@map("inventory_movement_types")
}

// ============= ðŸ”“ðŸŸ¢ | Model Inventario =============

model Inventory {
  id              Int     @id @default(autoincrement())
  productId       Int     @map("product_id")
  product         Product @relation(fields: [productId], references: [id])
  currentQuantity Int     @default(0) @map("current_quantity")
  minimumStock    Int     @default(5) @map("minimum_stock")
  storageLocation String? @map("storage_location") @db.VarChar(50) // "Barra", "Almacen", "Casa"   (Title case + trim)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  inventoryMovements InventoryMovement[]

  @@unique([productId, storageLocation])
  @@index([productId])
  @@index([storageLocation])
  @@index([productId, storageLocation])
  @@map("inventories")
}

// ============= ðŸ”“ðŸŸ¢ | Model Inventario Movimientos =============

model InventoryMovement {
  id                Int                   @id @default(autoincrement())
  inventoryId       Int                   @map("inventory_id")
  inventory         Inventory             @relation(fields: [inventoryId], references: [id])
  movementTypeCode  String                @map("movement_type_code") @db.Char(20)
  movementType      InventoryMovementType @relation(fields: [movementTypeCode], references: [code])
  quantityMovement  Int                   @map("quantity_movement")
  reasonDescription String                @map("reason_description") @db.Text // (Title case + trim)

  userDocumentNumber String @map("user_document_number") @db.Char(12)
  user               User   @relation(fields: [userDocumentNumber], references: [documentNumber])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  createdBy String    @map("created_by") @db.Char(12)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)
  updatedBy String?   @map("updated_by") @db.Char(12)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  deletedBy String?   @map("deleted_by") @db.Char(12)

  @@index([inventoryId])
  @@index([movementTypeCode])
  @@index([userDocumentNumber])
  @@map("inventory_movements")
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++ Secuencia de Orden +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ============= ðŸ”’ðŸŸ¢ | Model Secuencia Orden =============

model OrderSequence {
  id              Int @id @default(autoincrement())
  sequenceYear    Int @map("sequence_year")
  sequenceMonth   Int @map("sequence_month")
  sequenceDay     Int @map("sequence_day")
  lastOrderNumber Int @default(0) @map("last_order_number")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)

  @@unique([sequenceYear, sequenceMonth, sequenceDay])
  @@map("order_sequences")
}

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++++++++ Logs +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ============= ðŸ”’âš« | Model Log =============

model Log {
  id         Int     @id @default(autoincrement())
  entityName String  @map("entity_name") @db.VarChar(50) // "users, products" (lower case + trim)
  entityId   String? @map("entity_id") // Id registro afectado
  action     String  @db.VarChar(50) // "created, updated, login" (lower case + trim)
  message    String? @db.VarChar(255)

  userDocumentNumber     String?   @map("user_document_number") @db.Char(12) // "El usuario elimino... " (Capitaliz case + trim)
  user                   User?     @relation(fields: [userDocumentNumber], references: [documentNumber])
  customerDocumentNumber String?   @map("customer_document_number") @db.Char(12)
  customer               Customer? @relation(fields: [customerDocumentNumber], references: [documentNumber])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@index([entityName])
  @@index([userDocumentNumber])
  @@index([customerDocumentNumber])
  @@index([action])
  @@map("logs")
}
