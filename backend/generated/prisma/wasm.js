
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RestaurantConfigScalarFieldEnum = {
  id: 'id',
  name: 'name',
  activeLogoId: 'activeLogoId',
  currency: 'currency',
  address: 'address',
  phone: 'phone',
  email: 'email',
  taxName: 'taxName',
  taxIncluded: 'taxIncluded',
  taxType: 'taxType',
  taxRate: 'taxRate',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ThemeScalarFieldEnum = {
  name: 'name',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  accentColor: 'accentColor',
  neutralColor: 'neutralColor',
  isSystem: 'isSystem',
  isPublic: 'isPublic',
  userDocumentCreator: 'userDocumentCreator',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.RestaurantZoneScalarFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.TableStatusScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.TableScalarFieldEnum = {
  id: 'id',
  name: 'name',
  capacity: 'capacity',
  restaurantZoneName: 'restaurantZoneName',
  tableStatusCode: 'tableStatusCode',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.CombineTableScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userDocumentCombiner: 'userDocumentCombiner',
  combinerAt: 'combinerAt',
  isActive: 'isActive',
  userDocumentReleaser: 'userDocumentReleaser',
  releasedAt: 'releasedAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.CombineTableItemScalarFieldEnum = {
  id: 'id',
  combineTableId: 'combineTableId',
  tableId: 'tableId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.BrandScalarFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ProductTypeScalarFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ProductStatusScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  offerPrice: 'offerPrice',
  productTypeName: 'productTypeName',
  productCategoryName: 'productCategoryName',
  brandName: 'brandName',
  productStatusCode: 'productStatusCode',
  mainImageId: 'mainImageId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.DocumentTypeScalarFieldEnum = {
  name: 'name',
  description: 'description',
  digitLength: 'digitLength',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.AccountStatusScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.PermissionCategoryScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.PermissionScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  permissionCategoryCode: 'permissionCategoryCode',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.RoleScalarFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleName: 'roleName',
  permissionCode: 'permissionCode',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserScalarFieldEnum = {
  document: 'document',
  username: 'username',
  email: 'email',
  password: 'password',
  pin: 'pin',
  documentTypeName: 'documentTypeName',
  roleName: 'roleName',
  accountStatusCode: 'accountStatusCode',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userDocument: 'userDocument',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  birthDate: 'birthDate',
  hireDate: 'hireDate',
  salary: 'salary',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  themeName: 'themeName',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.CustomerScalarFieldEnum = {
  document: 'document',
  username: 'username',
  email: 'email',
  password: 'password',
  documentTypeName: 'documentTypeName',
  accountStatusCode: 'accountStatusCode',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.CustomerProfileScalarFieldEnum = {
  id: 'id',
  customerDocument: 'customerDocument',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  birthDate: 'birthDate',
  themeName: 'themeName',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.CommandStatusScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CommandScalarFieldEnum = {
  id: 'id',
  tableId: 'tableId',
  combineTableId: 'combineTableId',
  userDocumentOpener: 'userDocumentOpener',
  openedAt: 'openedAt',
  commandStatusCode: 'commandStatusCode',
  notes: 'notes',
  userDocumentCloser: 'userDocumentCloser',
  closedAt: 'closedAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.OrderStatusScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrderItemStatusScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrderScalarFieldEnum = {
  code: 'code',
  commandId: 'commandId',
  userDocumentCreator: 'userDocumentCreator',
  createdAt: 'createdAt',
  customerDocument: 'customerDocument',
  subtotal: 'subtotal',
  discount: 'discount',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  orderStatusCode: 'orderStatusCode',
  userDocumentCloser: 'userDocumentCloser',
  closedAt: 'closedAt',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  commandId: 'commandId',
  orderCode: 'orderCode',
  productId: 'productId',
  orderItemStatusCode: 'orderItemStatusCode',
  quantity: 'quantity',
  specialInstructions: 'specialInstructions',
  unitPrice: 'unitPrice',
  discount: 'discount',
  totalPrice: 'totalPrice',
  notes: 'notes',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.CashBoxScalarFieldEnum = {
  id: 'id',
  userDocumentOpened: 'userDocumentOpened',
  openedAt: 'openedAt',
  initialAmount: 'initialAmount',
  userDocumentClosed: 'userDocumentClosed',
  closedAt: 'closedAt',
  finalAmount: 'finalAmount',
  totalSales: 'totalSales',
  notes: 'notes',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CashBoxMovementTypeScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.CashBoxMovementScalarFieldEnum = {
  id: 'id',
  cashboxId: 'cashboxId',
  userDocument: 'userDocument',
  cashboxMovementTypeCode: 'cashboxMovementTypeCode',
  amount: 'amount',
  concept: 'concept',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderCode: 'orderCode',
  cashBoxId: 'cashBoxId',
  paymentMethodName: 'paymentMethodName',
  totalAmount: 'totalAmount',
  receivedAmount: 'receivedAmount',
  changeAmount: 'changeAmount',
  transactionNumber: 'transactionNumber',
  notes: 'notes',
  userDocumentReceive: 'userDocumentReceive',
  customerDocumentPaid: 'customerDocumentPaid',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.InventoryMovementTypeScalarFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  currentQuantity: 'currentQuantity',
  minimumStock: 'minimumStock',
  storageLocation: 'storageLocation',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.InventoryMovementScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  inventoryMovementTypeCode: 'inventoryMovementTypeCode',
  quantityMovement: 'quantityMovement',
  reasonDescription: 'reasonDescription',
  userDocument: 'userDocument',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.OrderSequenceScalarFieldEnum = {
  id: 'id',
  sequenceYear: 'sequenceYear',
  sequenceMonth: 'sequenceMonth',
  sequenceDay: 'sequenceDay',
  lastOrderNumber: 'lastOrderNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userDocument: 'userDocument',
  customerDocument: 'customerDocument',
  token: 'token',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  closedAt: 'closedAt',
  closedBy: 'closedBy',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  entityName: 'entityName',
  entityId: 'entityId',
  action: 'action',
  message: 'message',
  userDocument: 'userDocument',
  customerDocument: 'customerDocument',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  altText: 'altText',
  url: 'url',
  imageableId: 'imageableId',
  imageableType: 'imageableType',
  isActive: 'isActive',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.RestaurantConfigOrderByRelevanceFieldEnum = {
  name: 'name',
  currency: 'currency',
  address: 'address',
  phone: 'phone',
  email: 'email',
  taxName: 'taxName',
  taxType: 'taxType',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.ThemeOrderByRelevanceFieldEnum = {
  name: 'name',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  accentColor: 'accentColor',
  neutralColor: 'neutralColor',
  userDocumentCreator: 'userDocumentCreator',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.RestaurantZoneOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.TableStatusOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.TableOrderByRelevanceFieldEnum = {
  name: 'name',
  restaurantZoneName: 'restaurantZoneName',
  tableStatusCode: 'tableStatusCode',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.CombineTableOrderByRelevanceFieldEnum = {
  name: 'name',
  userDocumentCombiner: 'userDocumentCombiner',
  userDocumentReleaser: 'userDocumentReleaser',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.CombineTableItemOrderByRelevanceFieldEnum = {
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.BrandOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.ProductTypeOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.ProductCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.ProductStatusOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  productTypeName: 'productTypeName',
  productCategoryName: 'productCategoryName',
  brandName: 'brandName',
  productStatusCode: 'productStatusCode',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.DocumentTypeOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.AccountStatusOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.PermissionCategoryOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.PermissionOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  permissionCategoryCode: 'permissionCategoryCode',
  createdBy: 'createdBy'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.RolePermissionOrderByRelevanceFieldEnum = {
  roleName: 'roleName',
  permissionCode: 'permissionCode',
  createdBy: 'createdBy'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  document: 'document',
  username: 'username',
  email: 'email',
  password: 'password',
  pin: 'pin',
  documentTypeName: 'documentTypeName',
  roleName: 'roleName',
  accountStatusCode: 'accountStatusCode',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.userProfileOrderByRelevanceFieldEnum = {
  userDocument: 'userDocument',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  themeName: 'themeName',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  document: 'document',
  username: 'username',
  email: 'email',
  password: 'password',
  documentTypeName: 'documentTypeName',
  accountStatusCode: 'accountStatusCode',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.CustomerProfileOrderByRelevanceFieldEnum = {
  customerDocument: 'customerDocument',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  themeName: 'themeName',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.CommandStatusOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.CommandOrderByRelevanceFieldEnum = {
  userDocumentOpener: 'userDocumentOpener',
  commandStatusCode: 'commandStatusCode',
  notes: 'notes',
  userDocumentCloser: 'userDocumentCloser',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.OrderStatusOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrderItemStatusOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  code: 'code',
  userDocumentCreator: 'userDocumentCreator',
  customerDocument: 'customerDocument',
  orderStatusCode: 'orderStatusCode',
  userDocumentCloser: 'userDocumentCloser',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  orderCode: 'orderCode',
  orderItemStatusCode: 'orderItemStatusCode',
  specialInstructions: 'specialInstructions',
  notes: 'notes',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.CashBoxOrderByRelevanceFieldEnum = {
  userDocumentOpened: 'userDocumentOpened',
  userDocumentClosed: 'userDocumentClosed',
  notes: 'notes',
  updatedBy: 'updatedBy'
};

exports.Prisma.CashBoxMovementTypeOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.CashBoxMovementOrderByRelevanceFieldEnum = {
  userDocument: 'userDocument',
  cashboxMovementTypeCode: 'cashboxMovementTypeCode',
  concept: 'concept',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.PaymentMethodOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  orderCode: 'orderCode',
  paymentMethodName: 'paymentMethodName',
  transactionNumber: 'transactionNumber',
  notes: 'notes',
  userDocumentReceive: 'userDocumentReceive',
  customerDocumentPaid: 'customerDocumentPaid',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.InventoryMovementTypeOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name',
  description: 'description',
  color: 'color',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.InventoryOrderByRelevanceFieldEnum = {
  storageLocation: 'storageLocation',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.InventoryMovementOrderByRelevanceFieldEnum = {
  inventoryMovementTypeCode: 'inventoryMovementTypeCode',
  reasonDescription: 'reasonDescription',
  userDocument: 'userDocument',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  userDocument: 'userDocument',
  customerDocument: 'customerDocument',
  token: 'token',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  closedBy: 'closedBy',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};

exports.Prisma.LogOrderByRelevanceFieldEnum = {
  entityName: 'entityName',
  entityId: 'entityId',
  action: 'action',
  message: 'message',
  userDocument: 'userDocument',
  customerDocument: 'customerDocument',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress'
};

exports.Prisma.ImageOrderByRelevanceFieldEnum = {
  name: 'name',
  altText: 'altText',
  url: 'url',
  imageableType: 'imageableType',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  deletedBy: 'deletedBy'
};


exports.Prisma.ModelName = {
  RestaurantConfig: 'RestaurantConfig',
  Theme: 'Theme',
  RestaurantZone: 'RestaurantZone',
  TableStatus: 'TableStatus',
  Table: 'Table',
  CombineTable: 'CombineTable',
  CombineTableItem: 'CombineTableItem',
  Brand: 'Brand',
  ProductType: 'ProductType',
  ProductCategory: 'ProductCategory',
  ProductStatus: 'ProductStatus',
  Product: 'Product',
  DocumentType: 'DocumentType',
  AccountStatus: 'AccountStatus',
  PermissionCategory: 'PermissionCategory',
  Permission: 'Permission',
  Role: 'Role',
  RolePermission: 'RolePermission',
  User: 'User',
  userProfile: 'userProfile',
  Customer: 'Customer',
  CustomerProfile: 'CustomerProfile',
  CommandStatus: 'CommandStatus',
  Command: 'Command',
  OrderStatus: 'OrderStatus',
  OrderItemStatus: 'OrderItemStatus',
  Order: 'Order',
  OrderItem: 'OrderItem',
  CashBox: 'CashBox',
  CashBoxMovementType: 'CashBoxMovementType',
  CashBoxMovement: 'CashBoxMovement',
  PaymentMethod: 'PaymentMethod',
  Payment: 'Payment',
  InventoryMovementType: 'InventoryMovementType',
  Inventory: 'Inventory',
  InventoryMovement: 'InventoryMovement',
  OrderSequence: 'OrderSequence',
  Session: 'Session',
  Log: 'Log',
  Image: 'Image'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
