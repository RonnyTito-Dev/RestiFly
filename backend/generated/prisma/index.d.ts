
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model RestaurantConfig
 * 
 */
export type RestaurantConfig = $Result.DefaultSelection<Prisma.$RestaurantConfigPayload>
/**
 * Model Theme
 * 
 */
export type Theme = $Result.DefaultSelection<Prisma.$ThemePayload>
/**
 * Model RestaurantZone
 * 
 */
export type RestaurantZone = $Result.DefaultSelection<Prisma.$RestaurantZonePayload>
/**
 * Model TableStatus
 * 
 */
export type TableStatus = $Result.DefaultSelection<Prisma.$TableStatusPayload>
/**
 * Model Table
 * 
 */
export type Table = $Result.DefaultSelection<Prisma.$TablePayload>
/**
 * Model CombineTable
 * 
 */
export type CombineTable = $Result.DefaultSelection<Prisma.$CombineTablePayload>
/**
 * Model CombineTableItem
 * 
 */
export type CombineTableItem = $Result.DefaultSelection<Prisma.$CombineTableItemPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model ProductType
 * 
 */
export type ProductType = $Result.DefaultSelection<Prisma.$ProductTypePayload>
/**
 * Model ProductCategory
 * 
 */
export type ProductCategory = $Result.DefaultSelection<Prisma.$ProductCategoryPayload>
/**
 * Model ProductStatus
 * 
 */
export type ProductStatus = $Result.DefaultSelection<Prisma.$ProductStatusPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model DocumentType
 * 
 */
export type DocumentType = $Result.DefaultSelection<Prisma.$DocumentTypePayload>
/**
 * Model AccountStatus
 * 
 */
export type AccountStatus = $Result.DefaultSelection<Prisma.$AccountStatusPayload>
/**
 * Model PermissionCategory
 * 
 */
export type PermissionCategory = $Result.DefaultSelection<Prisma.$PermissionCategoryPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model userProfile
 * 
 */
export type userProfile = $Result.DefaultSelection<Prisma.$userProfilePayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model CustomerProfile
 * 
 */
export type CustomerProfile = $Result.DefaultSelection<Prisma.$CustomerProfilePayload>
/**
 * Model CommandStatus
 * 
 */
export type CommandStatus = $Result.DefaultSelection<Prisma.$CommandStatusPayload>
/**
 * Model Command
 * 
 */
export type Command = $Result.DefaultSelection<Prisma.$CommandPayload>
/**
 * Model OrderStatus
 * 
 */
export type OrderStatus = $Result.DefaultSelection<Prisma.$OrderStatusPayload>
/**
 * Model OrderItemStatus
 * 
 */
export type OrderItemStatus = $Result.DefaultSelection<Prisma.$OrderItemStatusPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model CashBox
 * 
 */
export type CashBox = $Result.DefaultSelection<Prisma.$CashBoxPayload>
/**
 * Model CashBoxMovementType
 * 
 */
export type CashBoxMovementType = $Result.DefaultSelection<Prisma.$CashBoxMovementTypePayload>
/**
 * Model CashBoxMovement
 * 
 */
export type CashBoxMovement = $Result.DefaultSelection<Prisma.$CashBoxMovementPayload>
/**
 * Model PaymentMethod
 * 
 */
export type PaymentMethod = $Result.DefaultSelection<Prisma.$PaymentMethodPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model InventoryMovementType
 * 
 */
export type InventoryMovementType = $Result.DefaultSelection<Prisma.$InventoryMovementTypePayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model InventoryMovement
 * 
 */
export type InventoryMovement = $Result.DefaultSelection<Prisma.$InventoryMovementPayload>
/**
 * Model OrderSequence
 * 
 */
export type OrderSequence = $Result.DefaultSelection<Prisma.$OrderSequencePayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Log
 * 
 */
export type Log = $Result.DefaultSelection<Prisma.$LogPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more RestaurantConfigs
 * const restaurantConfigs = await prisma.restaurantConfig.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more RestaurantConfigs
   * const restaurantConfigs = await prisma.restaurantConfig.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.restaurantConfig`: Exposes CRUD operations for the **RestaurantConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RestaurantConfigs
    * const restaurantConfigs = await prisma.restaurantConfig.findMany()
    * ```
    */
  get restaurantConfig(): Prisma.RestaurantConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.restaurantZone`: Exposes CRUD operations for the **RestaurantZone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RestaurantZones
    * const restaurantZones = await prisma.restaurantZone.findMany()
    * ```
    */
  get restaurantZone(): Prisma.RestaurantZoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tableStatus`: Exposes CRUD operations for the **TableStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TableStatuses
    * const tableStatuses = await prisma.tableStatus.findMany()
    * ```
    */
  get tableStatus(): Prisma.TableStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.table`: Exposes CRUD operations for the **Table** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tables
    * const tables = await prisma.table.findMany()
    * ```
    */
  get table(): Prisma.TableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.combineTable`: Exposes CRUD operations for the **CombineTable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CombineTables
    * const combineTables = await prisma.combineTable.findMany()
    * ```
    */
  get combineTable(): Prisma.CombineTableDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.combineTableItem`: Exposes CRUD operations for the **CombineTableItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CombineTableItems
    * const combineTableItems = await prisma.combineTableItem.findMany()
    * ```
    */
  get combineTableItem(): Prisma.CombineTableItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productType`: Exposes CRUD operations for the **ProductType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTypes
    * const productTypes = await prisma.productType.findMany()
    * ```
    */
  get productType(): Prisma.ProductTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productCategory`: Exposes CRUD operations for the **ProductCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCategories
    * const productCategories = await prisma.productCategory.findMany()
    * ```
    */
  get productCategory(): Prisma.ProductCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productStatus`: Exposes CRUD operations for the **ProductStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductStatuses
    * const productStatuses = await prisma.productStatus.findMany()
    * ```
    */
  get productStatus(): Prisma.ProductStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documentType`: Exposes CRUD operations for the **DocumentType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DocumentTypes
    * const documentTypes = await prisma.documentType.findMany()
    * ```
    */
  get documentType(): Prisma.DocumentTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.accountStatus`: Exposes CRUD operations for the **AccountStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountStatuses
    * const accountStatuses = await prisma.accountStatus.findMany()
    * ```
    */
  get accountStatus(): Prisma.AccountStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permissionCategory`: Exposes CRUD operations for the **PermissionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PermissionCategories
    * const permissionCategories = await prisma.permissionCategory.findMany()
    * ```
    */
  get permissionCategory(): Prisma.PermissionCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **userProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.userProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerProfile`: Exposes CRUD operations for the **CustomerProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerProfiles
    * const customerProfiles = await prisma.customerProfile.findMany()
    * ```
    */
  get customerProfile(): Prisma.CustomerProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.commandStatus`: Exposes CRUD operations for the **CommandStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommandStatuses
    * const commandStatuses = await prisma.commandStatus.findMany()
    * ```
    */
  get commandStatus(): Prisma.CommandStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.command`: Exposes CRUD operations for the **Command** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commands
    * const commands = await prisma.command.findMany()
    * ```
    */
  get command(): Prisma.CommandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderStatus`: Exposes CRUD operations for the **OrderStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderStatuses
    * const orderStatuses = await prisma.orderStatus.findMany()
    * ```
    */
  get orderStatus(): Prisma.OrderStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItemStatus`: Exposes CRUD operations for the **OrderItemStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItemStatuses
    * const orderItemStatuses = await prisma.orderItemStatus.findMany()
    * ```
    */
  get orderItemStatus(): Prisma.OrderItemStatusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cashBox`: Exposes CRUD operations for the **CashBox** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashBoxes
    * const cashBoxes = await prisma.cashBox.findMany()
    * ```
    */
  get cashBox(): Prisma.CashBoxDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cashBoxMovementType`: Exposes CRUD operations for the **CashBoxMovementType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashBoxMovementTypes
    * const cashBoxMovementTypes = await prisma.cashBoxMovementType.findMany()
    * ```
    */
  get cashBoxMovementType(): Prisma.CashBoxMovementTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cashBoxMovement`: Exposes CRUD operations for the **CashBoxMovement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CashBoxMovements
    * const cashBoxMovements = await prisma.cashBoxMovement.findMany()
    * ```
    */
  get cashBoxMovement(): Prisma.CashBoxMovementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentMethod`: Exposes CRUD operations for the **PaymentMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentMethods
    * const paymentMethods = await prisma.paymentMethod.findMany()
    * ```
    */
  get paymentMethod(): Prisma.PaymentMethodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryMovementType`: Exposes CRUD operations for the **InventoryMovementType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryMovementTypes
    * const inventoryMovementTypes = await prisma.inventoryMovementType.findMany()
    * ```
    */
  get inventoryMovementType(): Prisma.InventoryMovementTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventoryMovement`: Exposes CRUD operations for the **InventoryMovement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryMovements
    * const inventoryMovements = await prisma.inventoryMovement.findMany()
    * ```
    */
  get inventoryMovement(): Prisma.InventoryMovementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderSequence`: Exposes CRUD operations for the **OrderSequence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderSequences
    * const orderSequences = await prisma.orderSequence.findMany()
    * ```
    */
  get orderSequence(): Prisma.OrderSequenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    RestaurantConfig: 'RestaurantConfig',
    Theme: 'Theme',
    RestaurantZone: 'RestaurantZone',
    TableStatus: 'TableStatus',
    Table: 'Table',
    CombineTable: 'CombineTable',
    CombineTableItem: 'CombineTableItem',
    Brand: 'Brand',
    ProductType: 'ProductType',
    ProductCategory: 'ProductCategory',
    ProductStatus: 'ProductStatus',
    Product: 'Product',
    DocumentType: 'DocumentType',
    AccountStatus: 'AccountStatus',
    PermissionCategory: 'PermissionCategory',
    Permission: 'Permission',
    Role: 'Role',
    RolePermission: 'RolePermission',
    User: 'User',
    userProfile: 'userProfile',
    Customer: 'Customer',
    CustomerProfile: 'CustomerProfile',
    CommandStatus: 'CommandStatus',
    Command: 'Command',
    OrderStatus: 'OrderStatus',
    OrderItemStatus: 'OrderItemStatus',
    Order: 'Order',
    OrderItem: 'OrderItem',
    CashBox: 'CashBox',
    CashBoxMovementType: 'CashBoxMovementType',
    CashBoxMovement: 'CashBoxMovement',
    PaymentMethod: 'PaymentMethod',
    Payment: 'Payment',
    InventoryMovementType: 'InventoryMovementType',
    Inventory: 'Inventory',
    InventoryMovement: 'InventoryMovement',
    OrderSequence: 'OrderSequence',
    Session: 'Session',
    Log: 'Log',
    Image: 'Image'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "restaurantConfig" | "theme" | "restaurantZone" | "tableStatus" | "table" | "combineTable" | "combineTableItem" | "brand" | "productType" | "productCategory" | "productStatus" | "product" | "documentType" | "accountStatus" | "permissionCategory" | "permission" | "role" | "rolePermission" | "user" | "userProfile" | "customer" | "customerProfile" | "commandStatus" | "command" | "orderStatus" | "orderItemStatus" | "order" | "orderItem" | "cashBox" | "cashBoxMovementType" | "cashBoxMovement" | "paymentMethod" | "payment" | "inventoryMovementType" | "inventory" | "inventoryMovement" | "orderSequence" | "session" | "log" | "image"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      RestaurantConfig: {
        payload: Prisma.$RestaurantConfigPayload<ExtArgs>
        fields: Prisma.RestaurantConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>
          }
          findFirst: {
            args: Prisma.RestaurantConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>
          }
          findMany: {
            args: Prisma.RestaurantConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>[]
          }
          create: {
            args: Prisma.RestaurantConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>
          }
          createMany: {
            args: Prisma.RestaurantConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RestaurantConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>
          }
          update: {
            args: Prisma.RestaurantConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>
          }
          deleteMany: {
            args: Prisma.RestaurantConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantConfigPayload>
          }
          aggregate: {
            args: Prisma.RestaurantConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRestaurantConfig>
          }
          groupBy: {
            args: Prisma.RestaurantConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<RestaurantConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantConfigCountArgs<ExtArgs>
            result: $Utils.Optional<RestaurantConfigCountAggregateOutputType> | number
          }
        }
      }
      Theme: {
        payload: Prisma.$ThemePayload<ExtArgs>
        fields: Prisma.ThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findFirst: {
            args: Prisma.ThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findMany: {
            args: Prisma.ThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          create: {
            args: Prisma.ThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          createMany: {
            args: Prisma.ThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          update: {
            args: Prisma.ThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          deleteMany: {
            args: Prisma.ThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          aggregate: {
            args: Prisma.ThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheme>
          }
          groupBy: {
            args: Prisma.ThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeCountAggregateOutputType> | number
          }
        }
      }
      RestaurantZone: {
        payload: Prisma.$RestaurantZonePayload<ExtArgs>
        fields: Prisma.RestaurantZoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RestaurantZoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RestaurantZoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>
          }
          findFirst: {
            args: Prisma.RestaurantZoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RestaurantZoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>
          }
          findMany: {
            args: Prisma.RestaurantZoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>[]
          }
          create: {
            args: Prisma.RestaurantZoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>
          }
          createMany: {
            args: Prisma.RestaurantZoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RestaurantZoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>
          }
          update: {
            args: Prisma.RestaurantZoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>
          }
          deleteMany: {
            args: Prisma.RestaurantZoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RestaurantZoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RestaurantZoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RestaurantZonePayload>
          }
          aggregate: {
            args: Prisma.RestaurantZoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRestaurantZone>
          }
          groupBy: {
            args: Prisma.RestaurantZoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<RestaurantZoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.RestaurantZoneCountArgs<ExtArgs>
            result: $Utils.Optional<RestaurantZoneCountAggregateOutputType> | number
          }
        }
      }
      TableStatus: {
        payload: Prisma.$TableStatusPayload<ExtArgs>
        fields: Prisma.TableStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TableStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TableStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>
          }
          findFirst: {
            args: Prisma.TableStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TableStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>
          }
          findMany: {
            args: Prisma.TableStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>[]
          }
          create: {
            args: Prisma.TableStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>
          }
          createMany: {
            args: Prisma.TableStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TableStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>
          }
          update: {
            args: Prisma.TableStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>
          }
          deleteMany: {
            args: Prisma.TableStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TableStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TableStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TableStatusPayload>
          }
          aggregate: {
            args: Prisma.TableStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTableStatus>
          }
          groupBy: {
            args: Prisma.TableStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<TableStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.TableStatusCountArgs<ExtArgs>
            result: $Utils.Optional<TableStatusCountAggregateOutputType> | number
          }
        }
      }
      Table: {
        payload: Prisma.$TablePayload<ExtArgs>
        fields: Prisma.TableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          findFirst: {
            args: Prisma.TableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          findMany: {
            args: Prisma.TableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>[]
          }
          create: {
            args: Prisma.TableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          createMany: {
            args: Prisma.TableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          update: {
            args: Prisma.TableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          deleteMany: {
            args: Prisma.TableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TablePayload>
          }
          aggregate: {
            args: Prisma.TableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTable>
          }
          groupBy: {
            args: Prisma.TableGroupByArgs<ExtArgs>
            result: $Utils.Optional<TableGroupByOutputType>[]
          }
          count: {
            args: Prisma.TableCountArgs<ExtArgs>
            result: $Utils.Optional<TableCountAggregateOutputType> | number
          }
        }
      }
      CombineTable: {
        payload: Prisma.$CombineTablePayload<ExtArgs>
        fields: Prisma.CombineTableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CombineTableFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CombineTableFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>
          }
          findFirst: {
            args: Prisma.CombineTableFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CombineTableFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>
          }
          findMany: {
            args: Prisma.CombineTableFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>[]
          }
          create: {
            args: Prisma.CombineTableCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>
          }
          createMany: {
            args: Prisma.CombineTableCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CombineTableDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>
          }
          update: {
            args: Prisma.CombineTableUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>
          }
          deleteMany: {
            args: Prisma.CombineTableDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CombineTableUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CombineTableUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTablePayload>
          }
          aggregate: {
            args: Prisma.CombineTableAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCombineTable>
          }
          groupBy: {
            args: Prisma.CombineTableGroupByArgs<ExtArgs>
            result: $Utils.Optional<CombineTableGroupByOutputType>[]
          }
          count: {
            args: Prisma.CombineTableCountArgs<ExtArgs>
            result: $Utils.Optional<CombineTableCountAggregateOutputType> | number
          }
        }
      }
      CombineTableItem: {
        payload: Prisma.$CombineTableItemPayload<ExtArgs>
        fields: Prisma.CombineTableItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CombineTableItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CombineTableItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>
          }
          findFirst: {
            args: Prisma.CombineTableItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CombineTableItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>
          }
          findMany: {
            args: Prisma.CombineTableItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>[]
          }
          create: {
            args: Prisma.CombineTableItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>
          }
          createMany: {
            args: Prisma.CombineTableItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CombineTableItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>
          }
          update: {
            args: Prisma.CombineTableItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>
          }
          deleteMany: {
            args: Prisma.CombineTableItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CombineTableItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CombineTableItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CombineTableItemPayload>
          }
          aggregate: {
            args: Prisma.CombineTableItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCombineTableItem>
          }
          groupBy: {
            args: Prisma.CombineTableItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CombineTableItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CombineTableItemCountArgs<ExtArgs>
            result: $Utils.Optional<CombineTableItemCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      ProductType: {
        payload: Prisma.$ProductTypePayload<ExtArgs>
        fields: Prisma.ProductTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>
          }
          findFirst: {
            args: Prisma.ProductTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>
          }
          findMany: {
            args: Prisma.ProductTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>[]
          }
          create: {
            args: Prisma.ProductTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>
          }
          createMany: {
            args: Prisma.ProductTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>
          }
          update: {
            args: Prisma.ProductTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>
          }
          deleteMany: {
            args: Prisma.ProductTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTypePayload>
          }
          aggregate: {
            args: Prisma.ProductTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductType>
          }
          groupBy: {
            args: Prisma.ProductTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ProductTypeCountAggregateOutputType> | number
          }
        }
      }
      ProductCategory: {
        payload: Prisma.$ProductCategoryPayload<ExtArgs>
        fields: Prisma.ProductCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          findFirst: {
            args: Prisma.ProductCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          findMany: {
            args: Prisma.ProductCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>[]
          }
          create: {
            args: Prisma.ProductCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          createMany: {
            args: Prisma.ProductCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          update: {
            args: Prisma.ProductCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ProductCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCategoryPayload>
          }
          aggregate: {
            args: Prisma.ProductCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductCategory>
          }
          groupBy: {
            args: Prisma.ProductCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCategoryCountAggregateOutputType> | number
          }
        }
      }
      ProductStatus: {
        payload: Prisma.$ProductStatusPayload<ExtArgs>
        fields: Prisma.ProductStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>
          }
          findFirst: {
            args: Prisma.ProductStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>
          }
          findMany: {
            args: Prisma.ProductStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>[]
          }
          create: {
            args: Prisma.ProductStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>
          }
          createMany: {
            args: Prisma.ProductStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>
          }
          update: {
            args: Prisma.ProductStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>
          }
          deleteMany: {
            args: Prisma.ProductStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductStatusPayload>
          }
          aggregate: {
            args: Prisma.ProductStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductStatus>
          }
          groupBy: {
            args: Prisma.ProductStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductStatusCountArgs<ExtArgs>
            result: $Utils.Optional<ProductStatusCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      DocumentType: {
        payload: Prisma.$DocumentTypePayload<ExtArgs>
        fields: Prisma.DocumentTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findFirst: {
            args: Prisma.DocumentTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          findMany: {
            args: Prisma.DocumentTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>[]
          }
          create: {
            args: Prisma.DocumentTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          createMany: {
            args: Prisma.DocumentTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DocumentTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          update: {
            args: Prisma.DocumentTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          deleteMany: {
            args: Prisma.DocumentTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentTypePayload>
          }
          aggregate: {
            args: Prisma.DocumentTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumentType>
          }
          groupBy: {
            args: Prisma.DocumentTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentTypeCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentTypeCountAggregateOutputType> | number
          }
        }
      }
      AccountStatus: {
        payload: Prisma.$AccountStatusPayload<ExtArgs>
        fields: Prisma.AccountStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>
          }
          findFirst: {
            args: Prisma.AccountStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>
          }
          findMany: {
            args: Prisma.AccountStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>[]
          }
          create: {
            args: Prisma.AccountStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>
          }
          createMany: {
            args: Prisma.AccountStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>
          }
          update: {
            args: Prisma.AccountStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>
          }
          deleteMany: {
            args: Prisma.AccountStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountStatusPayload>
          }
          aggregate: {
            args: Prisma.AccountStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountStatus>
          }
          groupBy: {
            args: Prisma.AccountStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountStatusCountArgs<ExtArgs>
            result: $Utils.Optional<AccountStatusCountAggregateOutputType> | number
          }
        }
      }
      PermissionCategory: {
        payload: Prisma.$PermissionCategoryPayload<ExtArgs>
        fields: Prisma.PermissionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>
          }
          findFirst: {
            args: Prisma.PermissionCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>
          }
          findMany: {
            args: Prisma.PermissionCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>[]
          }
          create: {
            args: Prisma.PermissionCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>
          }
          createMany: {
            args: Prisma.PermissionCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PermissionCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>
          }
          update: {
            args: Prisma.PermissionCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.PermissionCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionCategoryPayload>
          }
          aggregate: {
            args: Prisma.PermissionCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissionCategory>
          }
          groupBy: {
            args: Prisma.PermissionCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCategoryCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      userProfile: {
        payload: Prisma.$userProfilePayload<ExtArgs>
        fields: Prisma.userProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>
          }
          findFirst: {
            args: Prisma.userProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>
          }
          findMany: {
            args: Prisma.userProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>[]
          }
          create: {
            args: Prisma.userProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>
          }
          createMany: {
            args: Prisma.userProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>
          }
          update: {
            args: Prisma.userProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>
          }
          deleteMany: {
            args: Prisma.userProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.userProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.userProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      CustomerProfile: {
        payload: Prisma.$CustomerProfilePayload<ExtArgs>
        fields: Prisma.CustomerProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>
          }
          findFirst: {
            args: Prisma.CustomerProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>
          }
          findMany: {
            args: Prisma.CustomerProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>[]
          }
          create: {
            args: Prisma.CustomerProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>
          }
          createMany: {
            args: Prisma.CustomerProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CustomerProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>
          }
          update: {
            args: Prisma.CustomerProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>
          }
          deleteMany: {
            args: Prisma.CustomerProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerProfilePayload>
          }
          aggregate: {
            args: Prisma.CustomerProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerProfile>
          }
          groupBy: {
            args: Prisma.CustomerProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerProfileCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerProfileCountAggregateOutputType> | number
          }
        }
      }
      CommandStatus: {
        payload: Prisma.$CommandStatusPayload<ExtArgs>
        fields: Prisma.CommandStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>
          }
          findFirst: {
            args: Prisma.CommandStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>
          }
          findMany: {
            args: Prisma.CommandStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>[]
          }
          create: {
            args: Prisma.CommandStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>
          }
          createMany: {
            args: Prisma.CommandStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommandStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>
          }
          update: {
            args: Prisma.CommandStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>
          }
          deleteMany: {
            args: Prisma.CommandStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommandStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommandStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandStatusPayload>
          }
          aggregate: {
            args: Prisma.CommandStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommandStatus>
          }
          groupBy: {
            args: Prisma.CommandStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommandStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandStatusCountArgs<ExtArgs>
            result: $Utils.Optional<CommandStatusCountAggregateOutputType> | number
          }
        }
      }
      Command: {
        payload: Prisma.$CommandPayload<ExtArgs>
        fields: Prisma.CommandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>
          }
          findFirst: {
            args: Prisma.CommandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>
          }
          findMany: {
            args: Prisma.CommandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>[]
          }
          create: {
            args: Prisma.CommandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>
          }
          createMany: {
            args: Prisma.CommandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>
          }
          update: {
            args: Prisma.CommandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>
          }
          deleteMany: {
            args: Prisma.CommandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommandPayload>
          }
          aggregate: {
            args: Prisma.CommandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommand>
          }
          groupBy: {
            args: Prisma.CommandGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommandGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommandCountArgs<ExtArgs>
            result: $Utils.Optional<CommandCountAggregateOutputType> | number
          }
        }
      }
      OrderStatus: {
        payload: Prisma.$OrderStatusPayload<ExtArgs>
        fields: Prisma.OrderStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>
          }
          findFirst: {
            args: Prisma.OrderStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>
          }
          findMany: {
            args: Prisma.OrderStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>[]
          }
          create: {
            args: Prisma.OrderStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>
          }
          createMany: {
            args: Prisma.OrderStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>
          }
          update: {
            args: Prisma.OrderStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>
          }
          deleteMany: {
            args: Prisma.OrderStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderStatusPayload>
          }
          aggregate: {
            args: Prisma.OrderStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderStatus>
          }
          groupBy: {
            args: Prisma.OrderStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderStatusCountArgs<ExtArgs>
            result: $Utils.Optional<OrderStatusCountAggregateOutputType> | number
          }
        }
      }
      OrderItemStatus: {
        payload: Prisma.$OrderItemStatusPayload<ExtArgs>
        fields: Prisma.OrderItemStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>
          }
          findFirst: {
            args: Prisma.OrderItemStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>
          }
          findMany: {
            args: Prisma.OrderItemStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>[]
          }
          create: {
            args: Prisma.OrderItemStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>
          }
          createMany: {
            args: Prisma.OrderItemStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderItemStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>
          }
          update: {
            args: Prisma.OrderItemStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderItemStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemStatusPayload>
          }
          aggregate: {
            args: Prisma.OrderItemStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItemStatus>
          }
          groupBy: {
            args: Prisma.OrderItemStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemStatusCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemStatusCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      CashBox: {
        payload: Prisma.$CashBoxPayload<ExtArgs>
        fields: Prisma.CashBoxFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashBoxFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashBoxFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>
          }
          findFirst: {
            args: Prisma.CashBoxFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashBoxFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>
          }
          findMany: {
            args: Prisma.CashBoxFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>[]
          }
          create: {
            args: Prisma.CashBoxCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>
          }
          createMany: {
            args: Prisma.CashBoxCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CashBoxDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>
          }
          update: {
            args: Prisma.CashBoxUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>
          }
          deleteMany: {
            args: Prisma.CashBoxDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashBoxUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CashBoxUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxPayload>
          }
          aggregate: {
            args: Prisma.CashBoxAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashBox>
          }
          groupBy: {
            args: Prisma.CashBoxGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashBoxGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashBoxCountArgs<ExtArgs>
            result: $Utils.Optional<CashBoxCountAggregateOutputType> | number
          }
        }
      }
      CashBoxMovementType: {
        payload: Prisma.$CashBoxMovementTypePayload<ExtArgs>
        fields: Prisma.CashBoxMovementTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashBoxMovementTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashBoxMovementTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>
          }
          findFirst: {
            args: Prisma.CashBoxMovementTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashBoxMovementTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>
          }
          findMany: {
            args: Prisma.CashBoxMovementTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>[]
          }
          create: {
            args: Prisma.CashBoxMovementTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>
          }
          createMany: {
            args: Prisma.CashBoxMovementTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CashBoxMovementTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>
          }
          update: {
            args: Prisma.CashBoxMovementTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>
          }
          deleteMany: {
            args: Prisma.CashBoxMovementTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashBoxMovementTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CashBoxMovementTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementTypePayload>
          }
          aggregate: {
            args: Prisma.CashBoxMovementTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashBoxMovementType>
          }
          groupBy: {
            args: Prisma.CashBoxMovementTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashBoxMovementTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashBoxMovementTypeCountArgs<ExtArgs>
            result: $Utils.Optional<CashBoxMovementTypeCountAggregateOutputType> | number
          }
        }
      }
      CashBoxMovement: {
        payload: Prisma.$CashBoxMovementPayload<ExtArgs>
        fields: Prisma.CashBoxMovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CashBoxMovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CashBoxMovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>
          }
          findFirst: {
            args: Prisma.CashBoxMovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CashBoxMovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>
          }
          findMany: {
            args: Prisma.CashBoxMovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>[]
          }
          create: {
            args: Prisma.CashBoxMovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>
          }
          createMany: {
            args: Prisma.CashBoxMovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CashBoxMovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>
          }
          update: {
            args: Prisma.CashBoxMovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>
          }
          deleteMany: {
            args: Prisma.CashBoxMovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CashBoxMovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CashBoxMovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CashBoxMovementPayload>
          }
          aggregate: {
            args: Prisma.CashBoxMovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCashBoxMovement>
          }
          groupBy: {
            args: Prisma.CashBoxMovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<CashBoxMovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.CashBoxMovementCountArgs<ExtArgs>
            result: $Utils.Optional<CashBoxMovementCountAggregateOutputType> | number
          }
        }
      }
      PaymentMethod: {
        payload: Prisma.$PaymentMethodPayload<ExtArgs>
        fields: Prisma.PaymentMethodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentMethodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentMethodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findFirst: {
            args: Prisma.PaymentMethodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentMethodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          findMany: {
            args: Prisma.PaymentMethodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>[]
          }
          create: {
            args: Prisma.PaymentMethodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          createMany: {
            args: Prisma.PaymentMethodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentMethodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          update: {
            args: Prisma.PaymentMethodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          deleteMany: {
            args: Prisma.PaymentMethodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentMethodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentMethodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentMethodPayload>
          }
          aggregate: {
            args: Prisma.PaymentMethodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentMethod>
          }
          groupBy: {
            args: Prisma.PaymentMethodGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentMethodGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentMethodCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentMethodCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      InventoryMovementType: {
        payload: Prisma.$InventoryMovementTypePayload<ExtArgs>
        fields: Prisma.InventoryMovementTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryMovementTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryMovementTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>
          }
          findFirst: {
            args: Prisma.InventoryMovementTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryMovementTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>
          }
          findMany: {
            args: Prisma.InventoryMovementTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>[]
          }
          create: {
            args: Prisma.InventoryMovementTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>
          }
          createMany: {
            args: Prisma.InventoryMovementTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryMovementTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>
          }
          update: {
            args: Prisma.InventoryMovementTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>
          }
          deleteMany: {
            args: Prisma.InventoryMovementTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryMovementTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryMovementTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementTypePayload>
          }
          aggregate: {
            args: Prisma.InventoryMovementTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryMovementType>
          }
          groupBy: {
            args: Prisma.InventoryMovementTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryMovementTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryMovementTypeCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryMovementTypeCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      InventoryMovement: {
        payload: Prisma.$InventoryMovementPayload<ExtArgs>
        fields: Prisma.InventoryMovementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryMovementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryMovementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>
          }
          findFirst: {
            args: Prisma.InventoryMovementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryMovementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>
          }
          findMany: {
            args: Prisma.InventoryMovementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>[]
          }
          create: {
            args: Prisma.InventoryMovementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>
          }
          createMany: {
            args: Prisma.InventoryMovementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryMovementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>
          }
          update: {
            args: Prisma.InventoryMovementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>
          }
          deleteMany: {
            args: Prisma.InventoryMovementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryMovementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryMovementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryMovementPayload>
          }
          aggregate: {
            args: Prisma.InventoryMovementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryMovement>
          }
          groupBy: {
            args: Prisma.InventoryMovementGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryMovementGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryMovementCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryMovementCountAggregateOutputType> | number
          }
        }
      }
      OrderSequence: {
        payload: Prisma.$OrderSequencePayload<ExtArgs>
        fields: Prisma.OrderSequenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderSequenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderSequenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>
          }
          findFirst: {
            args: Prisma.OrderSequenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderSequenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>
          }
          findMany: {
            args: Prisma.OrderSequenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>[]
          }
          create: {
            args: Prisma.OrderSequenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>
          }
          createMany: {
            args: Prisma.OrderSequenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderSequenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>
          }
          update: {
            args: Prisma.OrderSequenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>
          }
          deleteMany: {
            args: Prisma.OrderSequenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderSequenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderSequenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderSequencePayload>
          }
          aggregate: {
            args: Prisma.OrderSequenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderSequence>
          }
          groupBy: {
            args: Prisma.OrderSequenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderSequenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderSequenceCountArgs<ExtArgs>
            result: $Utils.Optional<OrderSequenceCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Log: {
        payload: Prisma.$LogPayload<ExtArgs>
        fields: Prisma.LogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findFirst: {
            args: Prisma.LogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          findMany: {
            args: Prisma.LogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>[]
          }
          create: {
            args: Prisma.LogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          createMany: {
            args: Prisma.LogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          update: {
            args: Prisma.LogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          deleteMany: {
            args: Prisma.LogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LogPayload>
          }
          aggregate: {
            args: Prisma.LogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLog>
          }
          groupBy: {
            args: Prisma.LogGroupByArgs<ExtArgs>
            result: $Utils.Optional<LogGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogCountArgs<ExtArgs>
            result: $Utils.Optional<LogCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    restaurantConfig?: RestaurantConfigOmit
    theme?: ThemeOmit
    restaurantZone?: RestaurantZoneOmit
    tableStatus?: TableStatusOmit
    table?: TableOmit
    combineTable?: CombineTableOmit
    combineTableItem?: CombineTableItemOmit
    brand?: BrandOmit
    productType?: ProductTypeOmit
    productCategory?: ProductCategoryOmit
    productStatus?: ProductStatusOmit
    product?: ProductOmit
    documentType?: DocumentTypeOmit
    accountStatus?: AccountStatusOmit
    permissionCategory?: PermissionCategoryOmit
    permission?: PermissionOmit
    role?: RoleOmit
    rolePermission?: RolePermissionOmit
    user?: UserOmit
    userProfile?: userProfileOmit
    customer?: CustomerOmit
    customerProfile?: CustomerProfileOmit
    commandStatus?: CommandStatusOmit
    command?: CommandOmit
    orderStatus?: OrderStatusOmit
    orderItemStatus?: OrderItemStatusOmit
    order?: OrderOmit
    orderItem?: OrderItemOmit
    cashBox?: CashBoxOmit
    cashBoxMovementType?: CashBoxMovementTypeOmit
    cashBoxMovement?: CashBoxMovementOmit
    paymentMethod?: PaymentMethodOmit
    payment?: PaymentOmit
    inventoryMovementType?: InventoryMovementTypeOmit
    inventory?: InventoryOmit
    inventoryMovement?: InventoryMovementOmit
    orderSequence?: OrderSequenceOmit
    session?: SessionOmit
    log?: LogOmit
    image?: ImageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ThemeCountOutputType
   */

  export type ThemeCountOutputType = {
    usersUsingThisTheme: number
    customersUsingThisTheme: number
  }

  export type ThemeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usersUsingThisTheme?: boolean | ThemeCountOutputTypeCountUsersUsingThisThemeArgs
    customersUsingThisTheme?: boolean | ThemeCountOutputTypeCountCustomersUsingThisThemeArgs
  }

  // Custom InputTypes
  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeCountOutputType
     */
    select?: ThemeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeCountUsersUsingThisThemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userProfileWhereInput
  }

  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeCountCustomersUsingThisThemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerProfileWhereInput
  }


  /**
   * Count Type RestaurantZoneCountOutputType
   */

  export type RestaurantZoneCountOutputType = {
    tables: number
  }

  export type RestaurantZoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | RestaurantZoneCountOutputTypeCountTablesArgs
  }

  // Custom InputTypes
  /**
   * RestaurantZoneCountOutputType without action
   */
  export type RestaurantZoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZoneCountOutputType
     */
    select?: RestaurantZoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RestaurantZoneCountOutputType without action
   */
  export type RestaurantZoneCountOutputTypeCountTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
  }


  /**
   * Count Type TableStatusCountOutputType
   */

  export type TableStatusCountOutputType = {
    tables: number
  }

  export type TableStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | TableStatusCountOutputTypeCountTablesArgs
  }

  // Custom InputTypes
  /**
   * TableStatusCountOutputType without action
   */
  export type TableStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatusCountOutputType
     */
    select?: TableStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TableStatusCountOutputType without action
   */
  export type TableStatusCountOutputTypeCountTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
  }


  /**
   * Count Type TableCountOutputType
   */

  export type TableCountOutputType = {
    combineTableItems: number
    commands: number
  }

  export type TableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    combineTableItems?: boolean | TableCountOutputTypeCountCombineTableItemsArgs
    commands?: boolean | TableCountOutputTypeCountCommandsArgs
  }

  // Custom InputTypes
  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableCountOutputType
     */
    select?: TableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeCountCombineTableItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineTableItemWhereInput
  }

  /**
   * TableCountOutputType without action
   */
  export type TableCountOutputTypeCountCommandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandWhereInput
  }


  /**
   * Count Type CombineTableCountOutputType
   */

  export type CombineTableCountOutputType = {
    tables: number
    commands: number
  }

  export type CombineTableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | CombineTableCountOutputTypeCountTablesArgs
    commands?: boolean | CombineTableCountOutputTypeCountCommandsArgs
  }

  // Custom InputTypes
  /**
   * CombineTableCountOutputType without action
   */
  export type CombineTableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableCountOutputType
     */
    select?: CombineTableCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CombineTableCountOutputType without action
   */
  export type CombineTableCountOutputTypeCountTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineTableItemWhereInput
  }

  /**
   * CombineTableCountOutputType without action
   */
  export type CombineTableCountOutputTypeCountCommandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    products: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | BrandCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductTypeCountOutputType
   */

  export type ProductTypeCountOutputType = {
    products: number
  }

  export type ProductTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductTypeCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductTypeCountOutputType without action
   */
  export type ProductTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTypeCountOutputType
     */
    select?: ProductTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductTypeCountOutputType without action
   */
  export type ProductTypeCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCategoryCountOutputType
   */

  export type ProductCategoryCountOutputType = {
    products: number
  }

  export type ProductCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductCategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductCategoryCountOutputType without action
   */
  export type ProductCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategoryCountOutputType
     */
    select?: ProductCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCategoryCountOutputType without action
   */
  export type ProductCategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductStatusCountOutputType
   */

  export type ProductStatusCountOutputType = {
    products: number
  }

  export type ProductStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductStatusCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * ProductStatusCountOutputType without action
   */
  export type ProductStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatusCountOutputType
     */
    select?: ProductStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductStatusCountOutputType without action
   */
  export type ProductStatusCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | ProductCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type DocumentTypeCountOutputType
   */

  export type DocumentTypeCountOutputType = {
    users: number
    customers: number
  }

  export type DocumentTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DocumentTypeCountOutputTypeCountUsersArgs
    customers?: boolean | DocumentTypeCountOutputTypeCountCustomersArgs
  }

  // Custom InputTypes
  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentTypeCountOutputType
     */
    select?: DocumentTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DocumentTypeCountOutputType without action
   */
  export type DocumentTypeCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }


  /**
   * Count Type AccountStatusCountOutputType
   */

  export type AccountStatusCountOutputType = {
    users: number
    customers: number
  }

  export type AccountStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AccountStatusCountOutputTypeCountUsersArgs
    customers?: boolean | AccountStatusCountOutputTypeCountCustomersArgs
  }

  // Custom InputTypes
  /**
   * AccountStatusCountOutputType without action
   */
  export type AccountStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatusCountOutputType
     */
    select?: AccountStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountStatusCountOutputType without action
   */
  export type AccountStatusCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * AccountStatusCountOutputType without action
   */
  export type AccountStatusCountOutputTypeCountCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }


  /**
   * Count Type PermissionCategoryCountOutputType
   */

  export type PermissionCategoryCountOutputType = {
    permissions: number
  }

  export type PermissionCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | PermissionCategoryCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCategoryCountOutputType without action
   */
  export type PermissionCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategoryCountOutputType
     */
    select?: PermissionCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCategoryCountOutputType without action
   */
  export type PermissionCategoryCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    rolePermissions: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | PermissionCountOutputTypeCountRolePermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    permissions: number
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdThemes: number
    combinedTables: number
    releasedTables: number
    commandOpener: number
    commandCloser: number
    orderCreator: number
    orderCloser: number
    openedCashBoxes: number
    closedCashBoxes: number
    cashBoxMovements: number
    paymentsReceived: number
    inventoryMovements: number
    sessions: number
    logs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdThemes?: boolean | UserCountOutputTypeCountCreatedThemesArgs
    combinedTables?: boolean | UserCountOutputTypeCountCombinedTablesArgs
    releasedTables?: boolean | UserCountOutputTypeCountReleasedTablesArgs
    commandOpener?: boolean | UserCountOutputTypeCountCommandOpenerArgs
    commandCloser?: boolean | UserCountOutputTypeCountCommandCloserArgs
    orderCreator?: boolean | UserCountOutputTypeCountOrderCreatorArgs
    orderCloser?: boolean | UserCountOutputTypeCountOrderCloserArgs
    openedCashBoxes?: boolean | UserCountOutputTypeCountOpenedCashBoxesArgs
    closedCashBoxes?: boolean | UserCountOutputTypeCountClosedCashBoxesArgs
    cashBoxMovements?: boolean | UserCountOutputTypeCountCashBoxMovementsArgs
    paymentsReceived?: boolean | UserCountOutputTypeCountPaymentsReceivedArgs
    inventoryMovements?: boolean | UserCountOutputTypeCountInventoryMovementsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    logs?: boolean | UserCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCombinedTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineTableWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReleasedTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineTableWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommandOpenerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommandCloserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrderCreatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrderCloserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOpenedCashBoxesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClosedCashBoxesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCashBoxMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxMovementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInventoryMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryMovementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    orders: number
    payments: number
    sessions: number
    logs: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | CustomerCountOutputTypeCountOrdersArgs
    payments?: boolean | CustomerCountOutputTypeCountPaymentsArgs
    sessions?: boolean | CustomerCountOutputTypeCountSessionsArgs
    logs?: boolean | CustomerCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
  }


  /**
   * Count Type CommandStatusCountOutputType
   */

  export type CommandStatusCountOutputType = {
    commands: number
  }

  export type CommandStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commands?: boolean | CommandStatusCountOutputTypeCountCommandsArgs
  }

  // Custom InputTypes
  /**
   * CommandStatusCountOutputType without action
   */
  export type CommandStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatusCountOutputType
     */
    select?: CommandStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommandStatusCountOutputType without action
   */
  export type CommandStatusCountOutputTypeCountCommandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandWhereInput
  }


  /**
   * Count Type CommandCountOutputType
   */

  export type CommandCountOutputType = {
    orders: number
    orderItems: number
  }

  export type CommandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | CommandCountOutputTypeCountOrdersArgs
    orderItems?: boolean | CommandCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * CommandCountOutputType without action
   */
  export type CommandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandCountOutputType
     */
    select?: CommandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommandCountOutputType without action
   */
  export type CommandCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * CommandCountOutputType without action
   */
  export type CommandCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type OrderStatusCountOutputType
   */

  export type OrderStatusCountOutputType = {
    orders: number
  }

  export type OrderStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | OrderStatusCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * OrderStatusCountOutputType without action
   */
  export type OrderStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatusCountOutputType
     */
    select?: OrderStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderStatusCountOutputType without action
   */
  export type OrderStatusCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }


  /**
   * Count Type OrderItemStatusCountOutputType
   */

  export type OrderItemStatusCountOutputType = {
    orderItems: number
  }

  export type OrderItemStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | OrderItemStatusCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderItemStatusCountOutputType without action
   */
  export type OrderItemStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatusCountOutputType
     */
    select?: OrderItemStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderItemStatusCountOutputType without action
   */
  export type OrderItemStatusCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderItems: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | OrderCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type CashBoxCountOutputType
   */

  export type CashBoxCountOutputType = {
    cashboxMovements: number
    payments: number
  }

  export type CashBoxCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashboxMovements?: boolean | CashBoxCountOutputTypeCountCashboxMovementsArgs
    payments?: boolean | CashBoxCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * CashBoxCountOutputType without action
   */
  export type CashBoxCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxCountOutputType
     */
    select?: CashBoxCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CashBoxCountOutputType without action
   */
  export type CashBoxCountOutputTypeCountCashboxMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxMovementWhereInput
  }

  /**
   * CashBoxCountOutputType without action
   */
  export type CashBoxCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type CashBoxMovementTypeCountOutputType
   */

  export type CashBoxMovementTypeCountOutputType = {
    cashBoxMovement: number
  }

  export type CashBoxMovementTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashBoxMovement?: boolean | CashBoxMovementTypeCountOutputTypeCountCashBoxMovementArgs
  }

  // Custom InputTypes
  /**
   * CashBoxMovementTypeCountOutputType without action
   */
  export type CashBoxMovementTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementTypeCountOutputType
     */
    select?: CashBoxMovementTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CashBoxMovementTypeCountOutputType without action
   */
  export type CashBoxMovementTypeCountOutputTypeCountCashBoxMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxMovementWhereInput
  }


  /**
   * Count Type PaymentMethodCountOutputType
   */

  export type PaymentMethodCountOutputType = {
    payments: number
  }

  export type PaymentMethodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | PaymentMethodCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * PaymentMethodCountOutputType without action
   */
  export type PaymentMethodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethodCountOutputType
     */
    select?: PaymentMethodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentMethodCountOutputType without action
   */
  export type PaymentMethodCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type InventoryMovementTypeCountOutputType
   */

  export type InventoryMovementTypeCountOutputType = {
    movements: number
  }

  export type InventoryMovementTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movements?: boolean | InventoryMovementTypeCountOutputTypeCountMovementsArgs
  }

  // Custom InputTypes
  /**
   * InventoryMovementTypeCountOutputType without action
   */
  export type InventoryMovementTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementTypeCountOutputType
     */
    select?: InventoryMovementTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryMovementTypeCountOutputType without action
   */
  export type InventoryMovementTypeCountOutputTypeCountMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryMovementWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    inventoryMovements: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventoryMovements?: boolean | InventoryCountOutputTypeCountInventoryMovementsArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountInventoryMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryMovementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model RestaurantConfig
   */

  export type AggregateRestaurantConfig = {
    _count: RestaurantConfigCountAggregateOutputType | null
    _avg: RestaurantConfigAvgAggregateOutputType | null
    _sum: RestaurantConfigSumAggregateOutputType | null
    _min: RestaurantConfigMinAggregateOutputType | null
    _max: RestaurantConfigMaxAggregateOutputType | null
  }

  export type RestaurantConfigAvgAggregateOutputType = {
    id: number | null
    activeLogoId: number | null
    taxRate: Decimal | null
  }

  export type RestaurantConfigSumAggregateOutputType = {
    id: number | null
    activeLogoId: number | null
    taxRate: Decimal | null
  }

  export type RestaurantConfigMinAggregateOutputType = {
    id: number | null
    name: string | null
    activeLogoId: number | null
    currency: string | null
    address: string | null
    phone: string | null
    email: string | null
    taxName: string | null
    taxIncluded: boolean | null
    taxType: string | null
    taxRate: Decimal | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type RestaurantConfigMaxAggregateOutputType = {
    id: number | null
    name: string | null
    activeLogoId: number | null
    currency: string | null
    address: string | null
    phone: string | null
    email: string | null
    taxName: string | null
    taxIncluded: boolean | null
    taxType: string | null
    taxRate: Decimal | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type RestaurantConfigCountAggregateOutputType = {
    id: number
    name: number
    activeLogoId: number
    currency: number
    address: number
    phone: number
    email: number
    taxName: number
    taxIncluded: number
    taxType: number
    taxRate: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type RestaurantConfigAvgAggregateInputType = {
    id?: true
    activeLogoId?: true
    taxRate?: true
  }

  export type RestaurantConfigSumAggregateInputType = {
    id?: true
    activeLogoId?: true
    taxRate?: true
  }

  export type RestaurantConfigMinAggregateInputType = {
    id?: true
    name?: true
    activeLogoId?: true
    currency?: true
    address?: true
    phone?: true
    email?: true
    taxName?: true
    taxIncluded?: true
    taxType?: true
    taxRate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type RestaurantConfigMaxAggregateInputType = {
    id?: true
    name?: true
    activeLogoId?: true
    currency?: true
    address?: true
    phone?: true
    email?: true
    taxName?: true
    taxIncluded?: true
    taxType?: true
    taxRate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type RestaurantConfigCountAggregateInputType = {
    id?: true
    name?: true
    activeLogoId?: true
    currency?: true
    address?: true
    phone?: true
    email?: true
    taxName?: true
    taxIncluded?: true
    taxType?: true
    taxRate?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type RestaurantConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RestaurantConfig to aggregate.
     */
    where?: RestaurantConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantConfigs to fetch.
     */
    orderBy?: RestaurantConfigOrderByWithRelationInput | RestaurantConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RestaurantConfigs
    **/
    _count?: true | RestaurantConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RestaurantConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RestaurantConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantConfigMaxAggregateInputType
  }

  export type GetRestaurantConfigAggregateType<T extends RestaurantConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurantConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurantConfig[P]>
      : GetScalarType<T[P], AggregateRestaurantConfig[P]>
  }




  export type RestaurantConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RestaurantConfigWhereInput
    orderBy?: RestaurantConfigOrderByWithAggregationInput | RestaurantConfigOrderByWithAggregationInput[]
    by: RestaurantConfigScalarFieldEnum[] | RestaurantConfigScalarFieldEnum
    having?: RestaurantConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantConfigCountAggregateInputType | true
    _avg?: RestaurantConfigAvgAggregateInputType
    _sum?: RestaurantConfigSumAggregateInputType
    _min?: RestaurantConfigMinAggregateInputType
    _max?: RestaurantConfigMaxAggregateInputType
  }

  export type RestaurantConfigGroupByOutputType = {
    id: number
    name: string
    activeLogoId: number | null
    currency: string
    address: string | null
    phone: string | null
    email: string | null
    taxName: string | null
    taxIncluded: boolean
    taxType: string | null
    taxRate: Decimal | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: RestaurantConfigCountAggregateOutputType | null
    _avg: RestaurantConfigAvgAggregateOutputType | null
    _sum: RestaurantConfigSumAggregateOutputType | null
    _min: RestaurantConfigMinAggregateOutputType | null
    _max: RestaurantConfigMaxAggregateOutputType | null
  }

  type GetRestaurantConfigGroupByPayload<T extends RestaurantConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantConfigGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantConfigGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    activeLogoId?: boolean
    currency?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    taxName?: boolean
    taxIncluded?: boolean
    taxType?: boolean
    taxRate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }, ExtArgs["result"]["restaurantConfig"]>



  export type RestaurantConfigSelectScalar = {
    id?: boolean
    name?: boolean
    activeLogoId?: boolean
    currency?: boolean
    address?: boolean
    phone?: boolean
    email?: boolean
    taxName?: boolean
    taxIncluded?: boolean
    taxType?: boolean
    taxRate?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type RestaurantConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "activeLogoId" | "currency" | "address" | "phone" | "email" | "taxName" | "taxIncluded" | "taxType" | "taxRate" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["restaurantConfig"]>

  export type $RestaurantConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RestaurantConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      activeLogoId: number | null
      currency: string
      address: string | null
      phone: string | null
      email: string | null
      taxName: string | null
      taxIncluded: boolean
      taxType: string | null
      taxRate: Prisma.Decimal | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["restaurantConfig"]>
    composites: {}
  }

  type RestaurantConfigGetPayload<S extends boolean | null | undefined | RestaurantConfigDefaultArgs> = $Result.GetResult<Prisma.$RestaurantConfigPayload, S>

  type RestaurantConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RestaurantConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RestaurantConfigCountAggregateInputType | true
    }

  export interface RestaurantConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RestaurantConfig'], meta: { name: 'RestaurantConfig' } }
    /**
     * Find zero or one RestaurantConfig that matches the filter.
     * @param {RestaurantConfigFindUniqueArgs} args - Arguments to find a RestaurantConfig
     * @example
     * // Get one RestaurantConfig
     * const restaurantConfig = await prisma.restaurantConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RestaurantConfigFindUniqueArgs>(args: SelectSubset<T, RestaurantConfigFindUniqueArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RestaurantConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RestaurantConfigFindUniqueOrThrowArgs} args - Arguments to find a RestaurantConfig
     * @example
     * // Get one RestaurantConfig
     * const restaurantConfig = await prisma.restaurantConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RestaurantConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, RestaurantConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RestaurantConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigFindFirstArgs} args - Arguments to find a RestaurantConfig
     * @example
     * // Get one RestaurantConfig
     * const restaurantConfig = await prisma.restaurantConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RestaurantConfigFindFirstArgs>(args?: SelectSubset<T, RestaurantConfigFindFirstArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RestaurantConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigFindFirstOrThrowArgs} args - Arguments to find a RestaurantConfig
     * @example
     * // Get one RestaurantConfig
     * const restaurantConfig = await prisma.restaurantConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RestaurantConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, RestaurantConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RestaurantConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RestaurantConfigs
     * const restaurantConfigs = await prisma.restaurantConfig.findMany()
     * 
     * // Get first 10 RestaurantConfigs
     * const restaurantConfigs = await prisma.restaurantConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const restaurantConfigWithIdOnly = await prisma.restaurantConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RestaurantConfigFindManyArgs>(args?: SelectSubset<T, RestaurantConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RestaurantConfig.
     * @param {RestaurantConfigCreateArgs} args - Arguments to create a RestaurantConfig.
     * @example
     * // Create one RestaurantConfig
     * const RestaurantConfig = await prisma.restaurantConfig.create({
     *   data: {
     *     // ... data to create a RestaurantConfig
     *   }
     * })
     * 
     */
    create<T extends RestaurantConfigCreateArgs>(args: SelectSubset<T, RestaurantConfigCreateArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RestaurantConfigs.
     * @param {RestaurantConfigCreateManyArgs} args - Arguments to create many RestaurantConfigs.
     * @example
     * // Create many RestaurantConfigs
     * const restaurantConfig = await prisma.restaurantConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RestaurantConfigCreateManyArgs>(args?: SelectSubset<T, RestaurantConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RestaurantConfig.
     * @param {RestaurantConfigDeleteArgs} args - Arguments to delete one RestaurantConfig.
     * @example
     * // Delete one RestaurantConfig
     * const RestaurantConfig = await prisma.restaurantConfig.delete({
     *   where: {
     *     // ... filter to delete one RestaurantConfig
     *   }
     * })
     * 
     */
    delete<T extends RestaurantConfigDeleteArgs>(args: SelectSubset<T, RestaurantConfigDeleteArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RestaurantConfig.
     * @param {RestaurantConfigUpdateArgs} args - Arguments to update one RestaurantConfig.
     * @example
     * // Update one RestaurantConfig
     * const restaurantConfig = await prisma.restaurantConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RestaurantConfigUpdateArgs>(args: SelectSubset<T, RestaurantConfigUpdateArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RestaurantConfigs.
     * @param {RestaurantConfigDeleteManyArgs} args - Arguments to filter RestaurantConfigs to delete.
     * @example
     * // Delete a few RestaurantConfigs
     * const { count } = await prisma.restaurantConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RestaurantConfigDeleteManyArgs>(args?: SelectSubset<T, RestaurantConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RestaurantConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RestaurantConfigs
     * const restaurantConfig = await prisma.restaurantConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RestaurantConfigUpdateManyArgs>(args: SelectSubset<T, RestaurantConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RestaurantConfig.
     * @param {RestaurantConfigUpsertArgs} args - Arguments to update or create a RestaurantConfig.
     * @example
     * // Update or create a RestaurantConfig
     * const restaurantConfig = await prisma.restaurantConfig.upsert({
     *   create: {
     *     // ... data to create a RestaurantConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RestaurantConfig we want to update
     *   }
     * })
     */
    upsert<T extends RestaurantConfigUpsertArgs>(args: SelectSubset<T, RestaurantConfigUpsertArgs<ExtArgs>>): Prisma__RestaurantConfigClient<$Result.GetResult<Prisma.$RestaurantConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RestaurantConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigCountArgs} args - Arguments to filter RestaurantConfigs to count.
     * @example
     * // Count the number of RestaurantConfigs
     * const count = await prisma.restaurantConfig.count({
     *   where: {
     *     // ... the filter for the RestaurantConfigs we want to count
     *   }
     * })
    **/
    count<T extends RestaurantConfigCountArgs>(
      args?: Subset<T, RestaurantConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RestaurantConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantConfigAggregateArgs>(args: Subset<T, RestaurantConfigAggregateArgs>): Prisma.PrismaPromise<GetRestaurantConfigAggregateType<T>>

    /**
     * Group by RestaurantConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantConfigGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RestaurantConfig model
   */
  readonly fields: RestaurantConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RestaurantConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RestaurantConfig model
   */
  interface RestaurantConfigFieldRefs {
    readonly id: FieldRef<"RestaurantConfig", 'Int'>
    readonly name: FieldRef<"RestaurantConfig", 'String'>
    readonly activeLogoId: FieldRef<"RestaurantConfig", 'Int'>
    readonly currency: FieldRef<"RestaurantConfig", 'String'>
    readonly address: FieldRef<"RestaurantConfig", 'String'>
    readonly phone: FieldRef<"RestaurantConfig", 'String'>
    readonly email: FieldRef<"RestaurantConfig", 'String'>
    readonly taxName: FieldRef<"RestaurantConfig", 'String'>
    readonly taxIncluded: FieldRef<"RestaurantConfig", 'Boolean'>
    readonly taxType: FieldRef<"RestaurantConfig", 'String'>
    readonly taxRate: FieldRef<"RestaurantConfig", 'Decimal'>
    readonly createdAt: FieldRef<"RestaurantConfig", 'DateTime'>
    readonly createdBy: FieldRef<"RestaurantConfig", 'String'>
    readonly updatedAt: FieldRef<"RestaurantConfig", 'DateTime'>
    readonly updatedBy: FieldRef<"RestaurantConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RestaurantConfig findUnique
   */
  export type RestaurantConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * Filter, which RestaurantConfig to fetch.
     */
    where: RestaurantConfigWhereUniqueInput
  }

  /**
   * RestaurantConfig findUniqueOrThrow
   */
  export type RestaurantConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * Filter, which RestaurantConfig to fetch.
     */
    where: RestaurantConfigWhereUniqueInput
  }

  /**
   * RestaurantConfig findFirst
   */
  export type RestaurantConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * Filter, which RestaurantConfig to fetch.
     */
    where?: RestaurantConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantConfigs to fetch.
     */
    orderBy?: RestaurantConfigOrderByWithRelationInput | RestaurantConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RestaurantConfigs.
     */
    cursor?: RestaurantConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RestaurantConfigs.
     */
    distinct?: RestaurantConfigScalarFieldEnum | RestaurantConfigScalarFieldEnum[]
  }

  /**
   * RestaurantConfig findFirstOrThrow
   */
  export type RestaurantConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * Filter, which RestaurantConfig to fetch.
     */
    where?: RestaurantConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantConfigs to fetch.
     */
    orderBy?: RestaurantConfigOrderByWithRelationInput | RestaurantConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RestaurantConfigs.
     */
    cursor?: RestaurantConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RestaurantConfigs.
     */
    distinct?: RestaurantConfigScalarFieldEnum | RestaurantConfigScalarFieldEnum[]
  }

  /**
   * RestaurantConfig findMany
   */
  export type RestaurantConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * Filter, which RestaurantConfigs to fetch.
     */
    where?: RestaurantConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantConfigs to fetch.
     */
    orderBy?: RestaurantConfigOrderByWithRelationInput | RestaurantConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RestaurantConfigs.
     */
    cursor?: RestaurantConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantConfigs.
     */
    skip?: number
    distinct?: RestaurantConfigScalarFieldEnum | RestaurantConfigScalarFieldEnum[]
  }

  /**
   * RestaurantConfig create
   */
  export type RestaurantConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a RestaurantConfig.
     */
    data: XOR<RestaurantConfigCreateInput, RestaurantConfigUncheckedCreateInput>
  }

  /**
   * RestaurantConfig createMany
   */
  export type RestaurantConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RestaurantConfigs.
     */
    data: RestaurantConfigCreateManyInput | RestaurantConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RestaurantConfig update
   */
  export type RestaurantConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a RestaurantConfig.
     */
    data: XOR<RestaurantConfigUpdateInput, RestaurantConfigUncheckedUpdateInput>
    /**
     * Choose, which RestaurantConfig to update.
     */
    where: RestaurantConfigWhereUniqueInput
  }

  /**
   * RestaurantConfig updateMany
   */
  export type RestaurantConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RestaurantConfigs.
     */
    data: XOR<RestaurantConfigUpdateManyMutationInput, RestaurantConfigUncheckedUpdateManyInput>
    /**
     * Filter which RestaurantConfigs to update
     */
    where?: RestaurantConfigWhereInput
    /**
     * Limit how many RestaurantConfigs to update.
     */
    limit?: number
  }

  /**
   * RestaurantConfig upsert
   */
  export type RestaurantConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the RestaurantConfig to update in case it exists.
     */
    where: RestaurantConfigWhereUniqueInput
    /**
     * In case the RestaurantConfig found by the `where` argument doesn't exist, create a new RestaurantConfig with this data.
     */
    create: XOR<RestaurantConfigCreateInput, RestaurantConfigUncheckedCreateInput>
    /**
     * In case the RestaurantConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantConfigUpdateInput, RestaurantConfigUncheckedUpdateInput>
  }

  /**
   * RestaurantConfig delete
   */
  export type RestaurantConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
    /**
     * Filter which RestaurantConfig to delete.
     */
    where: RestaurantConfigWhereUniqueInput
  }

  /**
   * RestaurantConfig deleteMany
   */
  export type RestaurantConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RestaurantConfigs to delete
     */
    where?: RestaurantConfigWhereInput
    /**
     * Limit how many RestaurantConfigs to delete.
     */
    limit?: number
  }

  /**
   * RestaurantConfig without action
   */
  export type RestaurantConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantConfig
     */
    select?: RestaurantConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantConfig
     */
    omit?: RestaurantConfigOmit<ExtArgs> | null
  }


  /**
   * Model Theme
   */

  export type AggregateTheme = {
    _count: ThemeCountAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeMinAggregateOutputType = {
    name: string | null
    primaryColor: string | null
    secondaryColor: string | null
    accentColor: string | null
    neutralColor: string | null
    isSystem: boolean | null
    isPublic: boolean | null
    userDocumentCreator: string | null
    createdAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ThemeMaxAggregateOutputType = {
    name: string | null
    primaryColor: string | null
    secondaryColor: string | null
    accentColor: string | null
    neutralColor: string | null
    isSystem: boolean | null
    isPublic: boolean | null
    userDocumentCreator: string | null
    createdAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ThemeCountAggregateOutputType = {
    name: number
    primaryColor: number
    secondaryColor: number
    accentColor: number
    neutralColor: number
    isSystem: number
    isPublic: number
    userDocumentCreator: number
    createdAt: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type ThemeMinAggregateInputType = {
    name?: true
    primaryColor?: true
    secondaryColor?: true
    accentColor?: true
    neutralColor?: true
    isSystem?: true
    isPublic?: true
    userDocumentCreator?: true
    createdAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ThemeMaxAggregateInputType = {
    name?: true
    primaryColor?: true
    secondaryColor?: true
    accentColor?: true
    neutralColor?: true
    isSystem?: true
    isPublic?: true
    userDocumentCreator?: true
    createdAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ThemeCountAggregateInputType = {
    name?: true
    primaryColor?: true
    secondaryColor?: true
    accentColor?: true
    neutralColor?: true
    isSystem?: true
    isPublic?: true
    userDocumentCreator?: true
    createdAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type ThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theme to aggregate.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    _count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }




  export type ThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWhereInput
    orderBy?: ThemeOrderByWithAggregationInput | ThemeOrderByWithAggregationInput[]
    by: ThemeScalarFieldEnum[] | ThemeScalarFieldEnum
    having?: ThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeCountAggregateInputType | true
    _min?: ThemeMinAggregateInputType
    _max?: ThemeMaxAggregateInputType
  }

  export type ThemeGroupByOutputType = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem: boolean
    isPublic: boolean
    userDocumentCreator: string | null
    createdAt: Date
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: ThemeCountAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  type GetThemeGroupByPayload<T extends ThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeGroupByOutputType[P]>
        }
      >
    >


  export type ThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    accentColor?: boolean
    neutralColor?: boolean
    isSystem?: boolean
    isPublic?: boolean
    userDocumentCreator?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    user?: boolean | Theme$userArgs<ExtArgs>
    usersUsingThisTheme?: boolean | Theme$usersUsingThisThemeArgs<ExtArgs>
    customersUsingThisTheme?: boolean | Theme$customersUsingThisThemeArgs<ExtArgs>
    _count?: boolean | ThemeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theme"]>



  export type ThemeSelectScalar = {
    name?: boolean
    primaryColor?: boolean
    secondaryColor?: boolean
    accentColor?: boolean
    neutralColor?: boolean
    isSystem?: boolean
    isPublic?: boolean
    userDocumentCreator?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type ThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "primaryColor" | "secondaryColor" | "accentColor" | "neutralColor" | "isSystem" | "isPublic" | "userDocumentCreator" | "createdAt" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["theme"]>
  export type ThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Theme$userArgs<ExtArgs>
    usersUsingThisTheme?: boolean | Theme$usersUsingThisThemeArgs<ExtArgs>
    customersUsingThisTheme?: boolean | Theme$customersUsingThisThemeArgs<ExtArgs>
    _count?: boolean | ThemeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Theme"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      usersUsingThisTheme: Prisma.$userProfilePayload<ExtArgs>[]
      customersUsingThisTheme: Prisma.$CustomerProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      primaryColor: string
      secondaryColor: string
      accentColor: string
      neutralColor: string
      isSystem: boolean
      isPublic: boolean
      userDocumentCreator: string | null
      createdAt: Date
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["theme"]>
    composites: {}
  }

  type ThemeGetPayload<S extends boolean | null | undefined | ThemeDefaultArgs> = $Result.GetResult<Prisma.$ThemePayload, S>

  type ThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemeCountAggregateInputType | true
    }

  export interface ThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Theme'], meta: { name: 'Theme' } }
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeFindUniqueArgs>(args: SelectSubset<T, ThemeFindUniqueArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Theme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemeFindUniqueOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeFindFirstArgs>(args?: SelectSubset<T, ThemeFindFirstArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const themeWithNameOnly = await prisma.theme.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends ThemeFindManyArgs>(args?: SelectSubset<T, ThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
     */
    create<T extends ThemeCreateArgs>(args: SelectSubset<T, ThemeCreateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Themes.
     * @param {ThemeCreateManyArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeCreateManyArgs>(args?: SelectSubset<T, ThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
     */
    delete<T extends ThemeDeleteArgs>(args: SelectSubset<T, ThemeDeleteArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeUpdateArgs>(args: SelectSubset<T, ThemeUpdateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeDeleteManyArgs>(args?: SelectSubset<T, ThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeUpdateManyArgs>(args: SelectSubset<T, ThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
     */
    upsert<T extends ThemeUpsertArgs>(args: SelectSubset<T, ThemeUpsertArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): Prisma.PrismaPromise<GetThemeAggregateType<T>>

    /**
     * Group by Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeGroupByArgs['orderBy'] }
        : { orderBy?: ThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Theme model
   */
  readonly fields: ThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Theme$userArgs<ExtArgs> = {}>(args?: Subset<T, Theme$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    usersUsingThisTheme<T extends Theme$usersUsingThisThemeArgs<ExtArgs> = {}>(args?: Subset<T, Theme$usersUsingThisThemeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customersUsingThisTheme<T extends Theme$customersUsingThisThemeArgs<ExtArgs> = {}>(args?: Subset<T, Theme$customersUsingThisThemeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Theme model
   */
  interface ThemeFieldRefs {
    readonly name: FieldRef<"Theme", 'String'>
    readonly primaryColor: FieldRef<"Theme", 'String'>
    readonly secondaryColor: FieldRef<"Theme", 'String'>
    readonly accentColor: FieldRef<"Theme", 'String'>
    readonly neutralColor: FieldRef<"Theme", 'String'>
    readonly isSystem: FieldRef<"Theme", 'Boolean'>
    readonly isPublic: FieldRef<"Theme", 'Boolean'>
    readonly userDocumentCreator: FieldRef<"Theme", 'String'>
    readonly createdAt: FieldRef<"Theme", 'DateTime'>
    readonly updatedAt: FieldRef<"Theme", 'DateTime'>
    readonly updatedBy: FieldRef<"Theme", 'String'>
    readonly deletedAt: FieldRef<"Theme", 'DateTime'>
    readonly deletedBy: FieldRef<"Theme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Theme findUnique
   */
  export type ThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findUniqueOrThrow
   */
  export type ThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findFirst
   */
  export type ThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findFirstOrThrow
   */
  export type ThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Themes to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme create
   */
  export type ThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a Theme.
     */
    data: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
  }

  /**
   * Theme createMany
   */
  export type ThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme update
   */
  export type ThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a Theme.
     */
    data: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
    /**
     * Choose, which Theme to update.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the Theme to update in case it exists.
     */
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
     */
    create: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
  }

  /**
   * Theme delete
   */
  export type ThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter which Theme to delete.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Themes to delete
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to delete.
     */
    limit?: number
  }

  /**
   * Theme.user
   */
  export type Theme$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Theme.usersUsingThisTheme
   */
  export type Theme$usersUsingThisThemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    where?: userProfileWhereInput
    orderBy?: userProfileOrderByWithRelationInput | userProfileOrderByWithRelationInput[]
    cursor?: userProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * Theme.customersUsingThisTheme
   */
  export type Theme$customersUsingThisThemeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    where?: CustomerProfileWhereInput
    orderBy?: CustomerProfileOrderByWithRelationInput | CustomerProfileOrderByWithRelationInput[]
    cursor?: CustomerProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerProfileScalarFieldEnum | CustomerProfileScalarFieldEnum[]
  }

  /**
   * Theme without action
   */
  export type ThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
  }


  /**
   * Model RestaurantZone
   */

  export type AggregateRestaurantZone = {
    _count: RestaurantZoneCountAggregateOutputType | null
    _min: RestaurantZoneMinAggregateOutputType | null
    _max: RestaurantZoneMaxAggregateOutputType | null
  }

  export type RestaurantZoneMinAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type RestaurantZoneMaxAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type RestaurantZoneCountAggregateOutputType = {
    name: number
    description: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type RestaurantZoneMinAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type RestaurantZoneMaxAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type RestaurantZoneCountAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type RestaurantZoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RestaurantZone to aggregate.
     */
    where?: RestaurantZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantZones to fetch.
     */
    orderBy?: RestaurantZoneOrderByWithRelationInput | RestaurantZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RestaurantZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantZones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantZones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RestaurantZones
    **/
    _count?: true | RestaurantZoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RestaurantZoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RestaurantZoneMaxAggregateInputType
  }

  export type GetRestaurantZoneAggregateType<T extends RestaurantZoneAggregateArgs> = {
        [P in keyof T & keyof AggregateRestaurantZone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRestaurantZone[P]>
      : GetScalarType<T[P], AggregateRestaurantZone[P]>
  }




  export type RestaurantZoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RestaurantZoneWhereInput
    orderBy?: RestaurantZoneOrderByWithAggregationInput | RestaurantZoneOrderByWithAggregationInput[]
    by: RestaurantZoneScalarFieldEnum[] | RestaurantZoneScalarFieldEnum
    having?: RestaurantZoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RestaurantZoneCountAggregateInputType | true
    _min?: RestaurantZoneMinAggregateInputType
    _max?: RestaurantZoneMaxAggregateInputType
  }

  export type RestaurantZoneGroupByOutputType = {
    name: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: RestaurantZoneCountAggregateOutputType | null
    _min: RestaurantZoneMinAggregateOutputType | null
    _max: RestaurantZoneMaxAggregateOutputType | null
  }

  type GetRestaurantZoneGroupByPayload<T extends RestaurantZoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RestaurantZoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RestaurantZoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RestaurantZoneGroupByOutputType[P]>
            : GetScalarType<T[P], RestaurantZoneGroupByOutputType[P]>
        }
      >
    >


  export type RestaurantZoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    tables?: boolean | RestaurantZone$tablesArgs<ExtArgs>
    _count?: boolean | RestaurantZoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["restaurantZone"]>



  export type RestaurantZoneSelectScalar = {
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type RestaurantZoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["restaurantZone"]>
  export type RestaurantZoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | RestaurantZone$tablesArgs<ExtArgs>
    _count?: boolean | RestaurantZoneCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RestaurantZonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RestaurantZone"
    objects: {
      tables: Prisma.$TablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["restaurantZone"]>
    composites: {}
  }

  type RestaurantZoneGetPayload<S extends boolean | null | undefined | RestaurantZoneDefaultArgs> = $Result.GetResult<Prisma.$RestaurantZonePayload, S>

  type RestaurantZoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RestaurantZoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RestaurantZoneCountAggregateInputType | true
    }

  export interface RestaurantZoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RestaurantZone'], meta: { name: 'RestaurantZone' } }
    /**
     * Find zero or one RestaurantZone that matches the filter.
     * @param {RestaurantZoneFindUniqueArgs} args - Arguments to find a RestaurantZone
     * @example
     * // Get one RestaurantZone
     * const restaurantZone = await prisma.restaurantZone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RestaurantZoneFindUniqueArgs>(args: SelectSubset<T, RestaurantZoneFindUniqueArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RestaurantZone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RestaurantZoneFindUniqueOrThrowArgs} args - Arguments to find a RestaurantZone
     * @example
     * // Get one RestaurantZone
     * const restaurantZone = await prisma.restaurantZone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RestaurantZoneFindUniqueOrThrowArgs>(args: SelectSubset<T, RestaurantZoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RestaurantZone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneFindFirstArgs} args - Arguments to find a RestaurantZone
     * @example
     * // Get one RestaurantZone
     * const restaurantZone = await prisma.restaurantZone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RestaurantZoneFindFirstArgs>(args?: SelectSubset<T, RestaurantZoneFindFirstArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RestaurantZone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneFindFirstOrThrowArgs} args - Arguments to find a RestaurantZone
     * @example
     * // Get one RestaurantZone
     * const restaurantZone = await prisma.restaurantZone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RestaurantZoneFindFirstOrThrowArgs>(args?: SelectSubset<T, RestaurantZoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RestaurantZones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RestaurantZones
     * const restaurantZones = await prisma.restaurantZone.findMany()
     * 
     * // Get first 10 RestaurantZones
     * const restaurantZones = await prisma.restaurantZone.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const restaurantZoneWithNameOnly = await prisma.restaurantZone.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends RestaurantZoneFindManyArgs>(args?: SelectSubset<T, RestaurantZoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RestaurantZone.
     * @param {RestaurantZoneCreateArgs} args - Arguments to create a RestaurantZone.
     * @example
     * // Create one RestaurantZone
     * const RestaurantZone = await prisma.restaurantZone.create({
     *   data: {
     *     // ... data to create a RestaurantZone
     *   }
     * })
     * 
     */
    create<T extends RestaurantZoneCreateArgs>(args: SelectSubset<T, RestaurantZoneCreateArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RestaurantZones.
     * @param {RestaurantZoneCreateManyArgs} args - Arguments to create many RestaurantZones.
     * @example
     * // Create many RestaurantZones
     * const restaurantZone = await prisma.restaurantZone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RestaurantZoneCreateManyArgs>(args?: SelectSubset<T, RestaurantZoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RestaurantZone.
     * @param {RestaurantZoneDeleteArgs} args - Arguments to delete one RestaurantZone.
     * @example
     * // Delete one RestaurantZone
     * const RestaurantZone = await prisma.restaurantZone.delete({
     *   where: {
     *     // ... filter to delete one RestaurantZone
     *   }
     * })
     * 
     */
    delete<T extends RestaurantZoneDeleteArgs>(args: SelectSubset<T, RestaurantZoneDeleteArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RestaurantZone.
     * @param {RestaurantZoneUpdateArgs} args - Arguments to update one RestaurantZone.
     * @example
     * // Update one RestaurantZone
     * const restaurantZone = await prisma.restaurantZone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RestaurantZoneUpdateArgs>(args: SelectSubset<T, RestaurantZoneUpdateArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RestaurantZones.
     * @param {RestaurantZoneDeleteManyArgs} args - Arguments to filter RestaurantZones to delete.
     * @example
     * // Delete a few RestaurantZones
     * const { count } = await prisma.restaurantZone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RestaurantZoneDeleteManyArgs>(args?: SelectSubset<T, RestaurantZoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RestaurantZones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RestaurantZones
     * const restaurantZone = await prisma.restaurantZone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RestaurantZoneUpdateManyArgs>(args: SelectSubset<T, RestaurantZoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RestaurantZone.
     * @param {RestaurantZoneUpsertArgs} args - Arguments to update or create a RestaurantZone.
     * @example
     * // Update or create a RestaurantZone
     * const restaurantZone = await prisma.restaurantZone.upsert({
     *   create: {
     *     // ... data to create a RestaurantZone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RestaurantZone we want to update
     *   }
     * })
     */
    upsert<T extends RestaurantZoneUpsertArgs>(args: SelectSubset<T, RestaurantZoneUpsertArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RestaurantZones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneCountArgs} args - Arguments to filter RestaurantZones to count.
     * @example
     * // Count the number of RestaurantZones
     * const count = await prisma.restaurantZone.count({
     *   where: {
     *     // ... the filter for the RestaurantZones we want to count
     *   }
     * })
    **/
    count<T extends RestaurantZoneCountArgs>(
      args?: Subset<T, RestaurantZoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RestaurantZoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RestaurantZone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RestaurantZoneAggregateArgs>(args: Subset<T, RestaurantZoneAggregateArgs>): Prisma.PrismaPromise<GetRestaurantZoneAggregateType<T>>

    /**
     * Group by RestaurantZone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RestaurantZoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RestaurantZoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RestaurantZoneGroupByArgs['orderBy'] }
        : { orderBy?: RestaurantZoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RestaurantZoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRestaurantZoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RestaurantZone model
   */
  readonly fields: RestaurantZoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RestaurantZone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RestaurantZoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tables<T extends RestaurantZone$tablesArgs<ExtArgs> = {}>(args?: Subset<T, RestaurantZone$tablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RestaurantZone model
   */
  interface RestaurantZoneFieldRefs {
    readonly name: FieldRef<"RestaurantZone", 'String'>
    readonly description: FieldRef<"RestaurantZone", 'String'>
    readonly color: FieldRef<"RestaurantZone", 'String'>
    readonly isActive: FieldRef<"RestaurantZone", 'Boolean'>
    readonly createdAt: FieldRef<"RestaurantZone", 'DateTime'>
    readonly createdBy: FieldRef<"RestaurantZone", 'String'>
    readonly updatedAt: FieldRef<"RestaurantZone", 'DateTime'>
    readonly updatedBy: FieldRef<"RestaurantZone", 'String'>
    readonly deletedAt: FieldRef<"RestaurantZone", 'DateTime'>
    readonly deletedBy: FieldRef<"RestaurantZone", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RestaurantZone findUnique
   */
  export type RestaurantZoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantZone to fetch.
     */
    where: RestaurantZoneWhereUniqueInput
  }

  /**
   * RestaurantZone findUniqueOrThrow
   */
  export type RestaurantZoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantZone to fetch.
     */
    where: RestaurantZoneWhereUniqueInput
  }

  /**
   * RestaurantZone findFirst
   */
  export type RestaurantZoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantZone to fetch.
     */
    where?: RestaurantZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantZones to fetch.
     */
    orderBy?: RestaurantZoneOrderByWithRelationInput | RestaurantZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RestaurantZones.
     */
    cursor?: RestaurantZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantZones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantZones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RestaurantZones.
     */
    distinct?: RestaurantZoneScalarFieldEnum | RestaurantZoneScalarFieldEnum[]
  }

  /**
   * RestaurantZone findFirstOrThrow
   */
  export type RestaurantZoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantZone to fetch.
     */
    where?: RestaurantZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantZones to fetch.
     */
    orderBy?: RestaurantZoneOrderByWithRelationInput | RestaurantZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RestaurantZones.
     */
    cursor?: RestaurantZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantZones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantZones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RestaurantZones.
     */
    distinct?: RestaurantZoneScalarFieldEnum | RestaurantZoneScalarFieldEnum[]
  }

  /**
   * RestaurantZone findMany
   */
  export type RestaurantZoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * Filter, which RestaurantZones to fetch.
     */
    where?: RestaurantZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RestaurantZones to fetch.
     */
    orderBy?: RestaurantZoneOrderByWithRelationInput | RestaurantZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RestaurantZones.
     */
    cursor?: RestaurantZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RestaurantZones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RestaurantZones.
     */
    skip?: number
    distinct?: RestaurantZoneScalarFieldEnum | RestaurantZoneScalarFieldEnum[]
  }

  /**
   * RestaurantZone create
   */
  export type RestaurantZoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * The data needed to create a RestaurantZone.
     */
    data: XOR<RestaurantZoneCreateInput, RestaurantZoneUncheckedCreateInput>
  }

  /**
   * RestaurantZone createMany
   */
  export type RestaurantZoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RestaurantZones.
     */
    data: RestaurantZoneCreateManyInput | RestaurantZoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RestaurantZone update
   */
  export type RestaurantZoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * The data needed to update a RestaurantZone.
     */
    data: XOR<RestaurantZoneUpdateInput, RestaurantZoneUncheckedUpdateInput>
    /**
     * Choose, which RestaurantZone to update.
     */
    where: RestaurantZoneWhereUniqueInput
  }

  /**
   * RestaurantZone updateMany
   */
  export type RestaurantZoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RestaurantZones.
     */
    data: XOR<RestaurantZoneUpdateManyMutationInput, RestaurantZoneUncheckedUpdateManyInput>
    /**
     * Filter which RestaurantZones to update
     */
    where?: RestaurantZoneWhereInput
    /**
     * Limit how many RestaurantZones to update.
     */
    limit?: number
  }

  /**
   * RestaurantZone upsert
   */
  export type RestaurantZoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * The filter to search for the RestaurantZone to update in case it exists.
     */
    where: RestaurantZoneWhereUniqueInput
    /**
     * In case the RestaurantZone found by the `where` argument doesn't exist, create a new RestaurantZone with this data.
     */
    create: XOR<RestaurantZoneCreateInput, RestaurantZoneUncheckedCreateInput>
    /**
     * In case the RestaurantZone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RestaurantZoneUpdateInput, RestaurantZoneUncheckedUpdateInput>
  }

  /**
   * RestaurantZone delete
   */
  export type RestaurantZoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    /**
     * Filter which RestaurantZone to delete.
     */
    where: RestaurantZoneWhereUniqueInput
  }

  /**
   * RestaurantZone deleteMany
   */
  export type RestaurantZoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RestaurantZones to delete
     */
    where?: RestaurantZoneWhereInput
    /**
     * Limit how many RestaurantZones to delete.
     */
    limit?: number
  }

  /**
   * RestaurantZone.tables
   */
  export type RestaurantZone$tablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    where?: TableWhereInput
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    cursor?: TableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * RestaurantZone without action
   */
  export type RestaurantZoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
  }


  /**
   * Model TableStatus
   */

  export type AggregateTableStatus = {
    _count: TableStatusCountAggregateOutputType | null
    _min: TableStatusMinAggregateOutputType | null
    _max: TableStatusMaxAggregateOutputType | null
  }

  export type TableStatusMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type TableStatusMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type TableStatusCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type TableStatusMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TableStatusMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TableStatusCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type TableStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TableStatus to aggregate.
     */
    where?: TableStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableStatuses to fetch.
     */
    orderBy?: TableStatusOrderByWithRelationInput | TableStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TableStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TableStatuses
    **/
    _count?: true | TableStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TableStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TableStatusMaxAggregateInputType
  }

  export type GetTableStatusAggregateType<T extends TableStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateTableStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTableStatus[P]>
      : GetScalarType<T[P], AggregateTableStatus[P]>
  }




  export type TableStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableStatusWhereInput
    orderBy?: TableStatusOrderByWithAggregationInput | TableStatusOrderByWithAggregationInput[]
    by: TableStatusScalarFieldEnum[] | TableStatusScalarFieldEnum
    having?: TableStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TableStatusCountAggregateInputType | true
    _min?: TableStatusMinAggregateInputType
    _max?: TableStatusMaxAggregateInputType
  }

  export type TableStatusGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: TableStatusCountAggregateOutputType | null
    _min: TableStatusMinAggregateOutputType | null
    _max: TableStatusMaxAggregateOutputType | null
  }

  type GetTableStatusGroupByPayload<T extends TableStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TableStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TableStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TableStatusGroupByOutputType[P]>
            : GetScalarType<T[P], TableStatusGroupByOutputType[P]>
        }
      >
    >


  export type TableStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    tables?: boolean | TableStatus$tablesArgs<ExtArgs>
    _count?: boolean | TableStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tableStatus"]>



  export type TableStatusSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type TableStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["tableStatus"]>
  export type TableStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tables?: boolean | TableStatus$tablesArgs<ExtArgs>
    _count?: boolean | TableStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TableStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TableStatus"
    objects: {
      tables: Prisma.$TablePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["tableStatus"]>
    composites: {}
  }

  type TableStatusGetPayload<S extends boolean | null | undefined | TableStatusDefaultArgs> = $Result.GetResult<Prisma.$TableStatusPayload, S>

  type TableStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TableStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TableStatusCountAggregateInputType | true
    }

  export interface TableStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TableStatus'], meta: { name: 'TableStatus' } }
    /**
     * Find zero or one TableStatus that matches the filter.
     * @param {TableStatusFindUniqueArgs} args - Arguments to find a TableStatus
     * @example
     * // Get one TableStatus
     * const tableStatus = await prisma.tableStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TableStatusFindUniqueArgs>(args: SelectSubset<T, TableStatusFindUniqueArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TableStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TableStatusFindUniqueOrThrowArgs} args - Arguments to find a TableStatus
     * @example
     * // Get one TableStatus
     * const tableStatus = await prisma.tableStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TableStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, TableStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TableStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusFindFirstArgs} args - Arguments to find a TableStatus
     * @example
     * // Get one TableStatus
     * const tableStatus = await prisma.tableStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TableStatusFindFirstArgs>(args?: SelectSubset<T, TableStatusFindFirstArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TableStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusFindFirstOrThrowArgs} args - Arguments to find a TableStatus
     * @example
     * // Get one TableStatus
     * const tableStatus = await prisma.tableStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TableStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, TableStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TableStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TableStatuses
     * const tableStatuses = await prisma.tableStatus.findMany()
     * 
     * // Get first 10 TableStatuses
     * const tableStatuses = await prisma.tableStatus.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const tableStatusWithCodeOnly = await prisma.tableStatus.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends TableStatusFindManyArgs>(args?: SelectSubset<T, TableStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TableStatus.
     * @param {TableStatusCreateArgs} args - Arguments to create a TableStatus.
     * @example
     * // Create one TableStatus
     * const TableStatus = await prisma.tableStatus.create({
     *   data: {
     *     // ... data to create a TableStatus
     *   }
     * })
     * 
     */
    create<T extends TableStatusCreateArgs>(args: SelectSubset<T, TableStatusCreateArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TableStatuses.
     * @param {TableStatusCreateManyArgs} args - Arguments to create many TableStatuses.
     * @example
     * // Create many TableStatuses
     * const tableStatus = await prisma.tableStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TableStatusCreateManyArgs>(args?: SelectSubset<T, TableStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TableStatus.
     * @param {TableStatusDeleteArgs} args - Arguments to delete one TableStatus.
     * @example
     * // Delete one TableStatus
     * const TableStatus = await prisma.tableStatus.delete({
     *   where: {
     *     // ... filter to delete one TableStatus
     *   }
     * })
     * 
     */
    delete<T extends TableStatusDeleteArgs>(args: SelectSubset<T, TableStatusDeleteArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TableStatus.
     * @param {TableStatusUpdateArgs} args - Arguments to update one TableStatus.
     * @example
     * // Update one TableStatus
     * const tableStatus = await prisma.tableStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TableStatusUpdateArgs>(args: SelectSubset<T, TableStatusUpdateArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TableStatuses.
     * @param {TableStatusDeleteManyArgs} args - Arguments to filter TableStatuses to delete.
     * @example
     * // Delete a few TableStatuses
     * const { count } = await prisma.tableStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TableStatusDeleteManyArgs>(args?: SelectSubset<T, TableStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TableStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TableStatuses
     * const tableStatus = await prisma.tableStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TableStatusUpdateManyArgs>(args: SelectSubset<T, TableStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TableStatus.
     * @param {TableStatusUpsertArgs} args - Arguments to update or create a TableStatus.
     * @example
     * // Update or create a TableStatus
     * const tableStatus = await prisma.tableStatus.upsert({
     *   create: {
     *     // ... data to create a TableStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TableStatus we want to update
     *   }
     * })
     */
    upsert<T extends TableStatusUpsertArgs>(args: SelectSubset<T, TableStatusUpsertArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TableStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusCountArgs} args - Arguments to filter TableStatuses to count.
     * @example
     * // Count the number of TableStatuses
     * const count = await prisma.tableStatus.count({
     *   where: {
     *     // ... the filter for the TableStatuses we want to count
     *   }
     * })
    **/
    count<T extends TableStatusCountArgs>(
      args?: Subset<T, TableStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TableStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TableStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TableStatusAggregateArgs>(args: Subset<T, TableStatusAggregateArgs>): Prisma.PrismaPromise<GetTableStatusAggregateType<T>>

    /**
     * Group by TableStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TableStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TableStatusGroupByArgs['orderBy'] }
        : { orderBy?: TableStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TableStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TableStatus model
   */
  readonly fields: TableStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TableStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TableStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tables<T extends TableStatus$tablesArgs<ExtArgs> = {}>(args?: Subset<T, TableStatus$tablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TableStatus model
   */
  interface TableStatusFieldRefs {
    readonly code: FieldRef<"TableStatus", 'String'>
    readonly name: FieldRef<"TableStatus", 'String'>
    readonly description: FieldRef<"TableStatus", 'String'>
    readonly color: FieldRef<"TableStatus", 'String'>
    readonly createdAt: FieldRef<"TableStatus", 'DateTime'>
    readonly createdBy: FieldRef<"TableStatus", 'String'>
    readonly updatedAt: FieldRef<"TableStatus", 'DateTime'>
    readonly updatedBy: FieldRef<"TableStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TableStatus findUnique
   */
  export type TableStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * Filter, which TableStatus to fetch.
     */
    where: TableStatusWhereUniqueInput
  }

  /**
   * TableStatus findUniqueOrThrow
   */
  export type TableStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * Filter, which TableStatus to fetch.
     */
    where: TableStatusWhereUniqueInput
  }

  /**
   * TableStatus findFirst
   */
  export type TableStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * Filter, which TableStatus to fetch.
     */
    where?: TableStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableStatuses to fetch.
     */
    orderBy?: TableStatusOrderByWithRelationInput | TableStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TableStatuses.
     */
    cursor?: TableStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TableStatuses.
     */
    distinct?: TableStatusScalarFieldEnum | TableStatusScalarFieldEnum[]
  }

  /**
   * TableStatus findFirstOrThrow
   */
  export type TableStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * Filter, which TableStatus to fetch.
     */
    where?: TableStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableStatuses to fetch.
     */
    orderBy?: TableStatusOrderByWithRelationInput | TableStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TableStatuses.
     */
    cursor?: TableStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TableStatuses.
     */
    distinct?: TableStatusScalarFieldEnum | TableStatusScalarFieldEnum[]
  }

  /**
   * TableStatus findMany
   */
  export type TableStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * Filter, which TableStatuses to fetch.
     */
    where?: TableStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TableStatuses to fetch.
     */
    orderBy?: TableStatusOrderByWithRelationInput | TableStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TableStatuses.
     */
    cursor?: TableStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TableStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TableStatuses.
     */
    skip?: number
    distinct?: TableStatusScalarFieldEnum | TableStatusScalarFieldEnum[]
  }

  /**
   * TableStatus create
   */
  export type TableStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a TableStatus.
     */
    data: XOR<TableStatusCreateInput, TableStatusUncheckedCreateInput>
  }

  /**
   * TableStatus createMany
   */
  export type TableStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TableStatuses.
     */
    data: TableStatusCreateManyInput | TableStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TableStatus update
   */
  export type TableStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a TableStatus.
     */
    data: XOR<TableStatusUpdateInput, TableStatusUncheckedUpdateInput>
    /**
     * Choose, which TableStatus to update.
     */
    where: TableStatusWhereUniqueInput
  }

  /**
   * TableStatus updateMany
   */
  export type TableStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TableStatuses.
     */
    data: XOR<TableStatusUpdateManyMutationInput, TableStatusUncheckedUpdateManyInput>
    /**
     * Filter which TableStatuses to update
     */
    where?: TableStatusWhereInput
    /**
     * Limit how many TableStatuses to update.
     */
    limit?: number
  }

  /**
   * TableStatus upsert
   */
  export type TableStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the TableStatus to update in case it exists.
     */
    where: TableStatusWhereUniqueInput
    /**
     * In case the TableStatus found by the `where` argument doesn't exist, create a new TableStatus with this data.
     */
    create: XOR<TableStatusCreateInput, TableStatusUncheckedCreateInput>
    /**
     * In case the TableStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TableStatusUpdateInput, TableStatusUncheckedUpdateInput>
  }

  /**
   * TableStatus delete
   */
  export type TableStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
    /**
     * Filter which TableStatus to delete.
     */
    where: TableStatusWhereUniqueInput
  }

  /**
   * TableStatus deleteMany
   */
  export type TableStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TableStatuses to delete
     */
    where?: TableStatusWhereInput
    /**
     * Limit how many TableStatuses to delete.
     */
    limit?: number
  }

  /**
   * TableStatus.tables
   */
  export type TableStatus$tablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    where?: TableWhereInput
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    cursor?: TableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * TableStatus without action
   */
  export type TableStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TableStatus
     */
    select?: TableStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TableStatus
     */
    omit?: TableStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableStatusInclude<ExtArgs> | null
  }


  /**
   * Model Table
   */

  export type AggregateTable = {
    _count: TableCountAggregateOutputType | null
    _avg: TableAvgAggregateOutputType | null
    _sum: TableSumAggregateOutputType | null
    _min: TableMinAggregateOutputType | null
    _max: TableMaxAggregateOutputType | null
  }

  export type TableAvgAggregateOutputType = {
    id: number | null
    capacity: number | null
  }

  export type TableSumAggregateOutputType = {
    id: number | null
    capacity: number | null
  }

  export type TableMinAggregateOutputType = {
    id: number | null
    name: string | null
    capacity: number | null
    restaurantZoneName: string | null
    tableStatusCode: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type TableMaxAggregateOutputType = {
    id: number | null
    name: string | null
    capacity: number | null
    restaurantZoneName: string | null
    tableStatusCode: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type TableCountAggregateOutputType = {
    id: number
    name: number
    capacity: number
    restaurantZoneName: number
    tableStatusCode: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type TableAvgAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type TableSumAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type TableMinAggregateInputType = {
    id?: true
    name?: true
    capacity?: true
    restaurantZoneName?: true
    tableStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type TableMaxAggregateInputType = {
    id?: true
    name?: true
    capacity?: true
    restaurantZoneName?: true
    tableStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type TableCountAggregateInputType = {
    id?: true
    name?: true
    capacity?: true
    restaurantZoneName?: true
    tableStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type TableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Table to aggregate.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tables
    **/
    _count?: true | TableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TableMaxAggregateInputType
  }

  export type GetTableAggregateType<T extends TableAggregateArgs> = {
        [P in keyof T & keyof AggregateTable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTable[P]>
      : GetScalarType<T[P], AggregateTable[P]>
  }




  export type TableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TableWhereInput
    orderBy?: TableOrderByWithAggregationInput | TableOrderByWithAggregationInput[]
    by: TableScalarFieldEnum[] | TableScalarFieldEnum
    having?: TableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TableCountAggregateInputType | true
    _avg?: TableAvgAggregateInputType
    _sum?: TableSumAggregateInputType
    _min?: TableMinAggregateInputType
    _max?: TableMaxAggregateInputType
  }

  export type TableGroupByOutputType = {
    id: number
    name: string
    capacity: number
    restaurantZoneName: string | null
    tableStatusCode: string
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: TableCountAggregateOutputType | null
    _avg: TableAvgAggregateOutputType | null
    _sum: TableSumAggregateOutputType | null
    _min: TableMinAggregateOutputType | null
    _max: TableMaxAggregateOutputType | null
  }

  type GetTableGroupByPayload<T extends TableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TableGroupByOutputType[P]>
            : GetScalarType<T[P], TableGroupByOutputType[P]>
        }
      >
    >


  export type TableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    capacity?: boolean
    restaurantZoneName?: boolean
    tableStatusCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    restaurantZone?: boolean | Table$restaurantZoneArgs<ExtArgs>
    tableStatus?: boolean | TableStatusDefaultArgs<ExtArgs>
    combineTableItems?: boolean | Table$combineTableItemsArgs<ExtArgs>
    commands?: boolean | Table$commandsArgs<ExtArgs>
    _count?: boolean | TableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["table"]>



  export type TableSelectScalar = {
    id?: boolean
    name?: boolean
    capacity?: boolean
    restaurantZoneName?: boolean
    tableStatusCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type TableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "capacity" | "restaurantZoneName" | "tableStatusCode" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["table"]>
  export type TableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    restaurantZone?: boolean | Table$restaurantZoneArgs<ExtArgs>
    tableStatus?: boolean | TableStatusDefaultArgs<ExtArgs>
    combineTableItems?: boolean | Table$combineTableItemsArgs<ExtArgs>
    commands?: boolean | Table$commandsArgs<ExtArgs>
    _count?: boolean | TableCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Table"
    objects: {
      restaurantZone: Prisma.$RestaurantZonePayload<ExtArgs> | null
      tableStatus: Prisma.$TableStatusPayload<ExtArgs>
      combineTableItems: Prisma.$CombineTableItemPayload<ExtArgs>[]
      commands: Prisma.$CommandPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      capacity: number
      restaurantZoneName: string | null
      tableStatusCode: string
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["table"]>
    composites: {}
  }

  type TableGetPayload<S extends boolean | null | undefined | TableDefaultArgs> = $Result.GetResult<Prisma.$TablePayload, S>

  type TableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TableCountAggregateInputType | true
    }

  export interface TableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Table'], meta: { name: 'Table' } }
    /**
     * Find zero or one Table that matches the filter.
     * @param {TableFindUniqueArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TableFindUniqueArgs>(args: SelectSubset<T, TableFindUniqueArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Table that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TableFindUniqueOrThrowArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TableFindUniqueOrThrowArgs>(args: SelectSubset<T, TableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Table that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindFirstArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TableFindFirstArgs>(args?: SelectSubset<T, TableFindFirstArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Table that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindFirstOrThrowArgs} args - Arguments to find a Table
     * @example
     * // Get one Table
     * const table = await prisma.table.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TableFindFirstOrThrowArgs>(args?: SelectSubset<T, TableFindFirstOrThrowArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tables
     * const tables = await prisma.table.findMany()
     * 
     * // Get first 10 Tables
     * const tables = await prisma.table.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tableWithIdOnly = await prisma.table.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TableFindManyArgs>(args?: SelectSubset<T, TableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Table.
     * @param {TableCreateArgs} args - Arguments to create a Table.
     * @example
     * // Create one Table
     * const Table = await prisma.table.create({
     *   data: {
     *     // ... data to create a Table
     *   }
     * })
     * 
     */
    create<T extends TableCreateArgs>(args: SelectSubset<T, TableCreateArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tables.
     * @param {TableCreateManyArgs} args - Arguments to create many Tables.
     * @example
     * // Create many Tables
     * const table = await prisma.table.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TableCreateManyArgs>(args?: SelectSubset<T, TableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Table.
     * @param {TableDeleteArgs} args - Arguments to delete one Table.
     * @example
     * // Delete one Table
     * const Table = await prisma.table.delete({
     *   where: {
     *     // ... filter to delete one Table
     *   }
     * })
     * 
     */
    delete<T extends TableDeleteArgs>(args: SelectSubset<T, TableDeleteArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Table.
     * @param {TableUpdateArgs} args - Arguments to update one Table.
     * @example
     * // Update one Table
     * const table = await prisma.table.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TableUpdateArgs>(args: SelectSubset<T, TableUpdateArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tables.
     * @param {TableDeleteManyArgs} args - Arguments to filter Tables to delete.
     * @example
     * // Delete a few Tables
     * const { count } = await prisma.table.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TableDeleteManyArgs>(args?: SelectSubset<T, TableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tables
     * const table = await prisma.table.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TableUpdateManyArgs>(args: SelectSubset<T, TableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Table.
     * @param {TableUpsertArgs} args - Arguments to update or create a Table.
     * @example
     * // Update or create a Table
     * const table = await prisma.table.upsert({
     *   create: {
     *     // ... data to create a Table
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Table we want to update
     *   }
     * })
     */
    upsert<T extends TableUpsertArgs>(args: SelectSubset<T, TableUpsertArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableCountArgs} args - Arguments to filter Tables to count.
     * @example
     * // Count the number of Tables
     * const count = await prisma.table.count({
     *   where: {
     *     // ... the filter for the Tables we want to count
     *   }
     * })
    **/
    count<T extends TableCountArgs>(
      args?: Subset<T, TableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TableAggregateArgs>(args: Subset<T, TableAggregateArgs>): Prisma.PrismaPromise<GetTableAggregateType<T>>

    /**
     * Group by Table.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TableGroupByArgs['orderBy'] }
        : { orderBy?: TableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Table model
   */
  readonly fields: TableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Table.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    restaurantZone<T extends Table$restaurantZoneArgs<ExtArgs> = {}>(args?: Subset<T, Table$restaurantZoneArgs<ExtArgs>>): Prisma__RestaurantZoneClient<$Result.GetResult<Prisma.$RestaurantZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tableStatus<T extends TableStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TableStatusDefaultArgs<ExtArgs>>): Prisma__TableStatusClient<$Result.GetResult<Prisma.$TableStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    combineTableItems<T extends Table$combineTableItemsArgs<ExtArgs> = {}>(args?: Subset<T, Table$combineTableItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commands<T extends Table$commandsArgs<ExtArgs> = {}>(args?: Subset<T, Table$commandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Table model
   */
  interface TableFieldRefs {
    readonly id: FieldRef<"Table", 'Int'>
    readonly name: FieldRef<"Table", 'String'>
    readonly capacity: FieldRef<"Table", 'Int'>
    readonly restaurantZoneName: FieldRef<"Table", 'String'>
    readonly tableStatusCode: FieldRef<"Table", 'String'>
    readonly createdAt: FieldRef<"Table", 'DateTime'>
    readonly createdBy: FieldRef<"Table", 'String'>
    readonly updatedAt: FieldRef<"Table", 'DateTime'>
    readonly updatedBy: FieldRef<"Table", 'String'>
    readonly deletedAt: FieldRef<"Table", 'DateTime'>
    readonly deletedBy: FieldRef<"Table", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Table findUnique
   */
  export type TableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table findUniqueOrThrow
   */
  export type TableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table findFirst
   */
  export type TableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tables.
     */
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Table findFirstOrThrow
   */
  export type TableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Table to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tables.
     */
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Table findMany
   */
  export type TableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter, which Tables to fetch.
     */
    where?: TableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tables to fetch.
     */
    orderBy?: TableOrderByWithRelationInput | TableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tables.
     */
    cursor?: TableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tables.
     */
    skip?: number
    distinct?: TableScalarFieldEnum | TableScalarFieldEnum[]
  }

  /**
   * Table create
   */
  export type TableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The data needed to create a Table.
     */
    data: XOR<TableCreateInput, TableUncheckedCreateInput>
  }

  /**
   * Table createMany
   */
  export type TableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tables.
     */
    data: TableCreateManyInput | TableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Table update
   */
  export type TableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The data needed to update a Table.
     */
    data: XOR<TableUpdateInput, TableUncheckedUpdateInput>
    /**
     * Choose, which Table to update.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table updateMany
   */
  export type TableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tables.
     */
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyInput>
    /**
     * Filter which Tables to update
     */
    where?: TableWhereInput
    /**
     * Limit how many Tables to update.
     */
    limit?: number
  }

  /**
   * Table upsert
   */
  export type TableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * The filter to search for the Table to update in case it exists.
     */
    where: TableWhereUniqueInput
    /**
     * In case the Table found by the `where` argument doesn't exist, create a new Table with this data.
     */
    create: XOR<TableCreateInput, TableUncheckedCreateInput>
    /**
     * In case the Table was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TableUpdateInput, TableUncheckedUpdateInput>
  }

  /**
   * Table delete
   */
  export type TableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    /**
     * Filter which Table to delete.
     */
    where: TableWhereUniqueInput
  }

  /**
   * Table deleteMany
   */
  export type TableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tables to delete
     */
    where?: TableWhereInput
    /**
     * Limit how many Tables to delete.
     */
    limit?: number
  }

  /**
   * Table.restaurantZone
   */
  export type Table$restaurantZoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RestaurantZone
     */
    select?: RestaurantZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RestaurantZone
     */
    omit?: RestaurantZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RestaurantZoneInclude<ExtArgs> | null
    where?: RestaurantZoneWhereInput
  }

  /**
   * Table.combineTableItems
   */
  export type Table$combineTableItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    where?: CombineTableItemWhereInput
    orderBy?: CombineTableItemOrderByWithRelationInput | CombineTableItemOrderByWithRelationInput[]
    cursor?: CombineTableItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CombineTableItemScalarFieldEnum | CombineTableItemScalarFieldEnum[]
  }

  /**
   * Table.commands
   */
  export type Table$commandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    where?: CommandWhereInput
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    cursor?: CommandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * Table without action
   */
  export type TableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
  }


  /**
   * Model CombineTable
   */

  export type AggregateCombineTable = {
    _count: CombineTableCountAggregateOutputType | null
    _avg: CombineTableAvgAggregateOutputType | null
    _sum: CombineTableSumAggregateOutputType | null
    _min: CombineTableMinAggregateOutputType | null
    _max: CombineTableMaxAggregateOutputType | null
  }

  export type CombineTableAvgAggregateOutputType = {
    id: number | null
  }

  export type CombineTableSumAggregateOutputType = {
    id: number | null
  }

  export type CombineTableMinAggregateOutputType = {
    id: number | null
    name: string | null
    userDocumentCombiner: string | null
    combinerAt: Date | null
    isActive: boolean | null
    userDocumentReleaser: string | null
    releasedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CombineTableMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userDocumentCombiner: string | null
    combinerAt: Date | null
    isActive: boolean | null
    userDocumentReleaser: string | null
    releasedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CombineTableCountAggregateOutputType = {
    id: number
    name: number
    userDocumentCombiner: number
    combinerAt: number
    isActive: number
    userDocumentReleaser: number
    releasedAt: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type CombineTableAvgAggregateInputType = {
    id?: true
  }

  export type CombineTableSumAggregateInputType = {
    id?: true
  }

  export type CombineTableMinAggregateInputType = {
    id?: true
    name?: true
    userDocumentCombiner?: true
    combinerAt?: true
    isActive?: true
    userDocumentReleaser?: true
    releasedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CombineTableMaxAggregateInputType = {
    id?: true
    name?: true
    userDocumentCombiner?: true
    combinerAt?: true
    isActive?: true
    userDocumentReleaser?: true
    releasedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CombineTableCountAggregateInputType = {
    id?: true
    name?: true
    userDocumentCombiner?: true
    combinerAt?: true
    isActive?: true
    userDocumentReleaser?: true
    releasedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type CombineTableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CombineTable to aggregate.
     */
    where?: CombineTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTables to fetch.
     */
    orderBy?: CombineTableOrderByWithRelationInput | CombineTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CombineTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CombineTables
    **/
    _count?: true | CombineTableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CombineTableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CombineTableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CombineTableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CombineTableMaxAggregateInputType
  }

  export type GetCombineTableAggregateType<T extends CombineTableAggregateArgs> = {
        [P in keyof T & keyof AggregateCombineTable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCombineTable[P]>
      : GetScalarType<T[P], AggregateCombineTable[P]>
  }




  export type CombineTableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineTableWhereInput
    orderBy?: CombineTableOrderByWithAggregationInput | CombineTableOrderByWithAggregationInput[]
    by: CombineTableScalarFieldEnum[] | CombineTableScalarFieldEnum
    having?: CombineTableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CombineTableCountAggregateInputType | true
    _avg?: CombineTableAvgAggregateInputType
    _sum?: CombineTableSumAggregateInputType
    _min?: CombineTableMinAggregateInputType
    _max?: CombineTableMaxAggregateInputType
  }

  export type CombineTableGroupByOutputType = {
    id: number
    name: string
    userDocumentCombiner: string
    combinerAt: Date
    isActive: boolean
    userDocumentReleaser: string | null
    releasedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: CombineTableCountAggregateOutputType | null
    _avg: CombineTableAvgAggregateOutputType | null
    _sum: CombineTableSumAggregateOutputType | null
    _min: CombineTableMinAggregateOutputType | null
    _max: CombineTableMaxAggregateOutputType | null
  }

  type GetCombineTableGroupByPayload<T extends CombineTableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CombineTableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CombineTableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CombineTableGroupByOutputType[P]>
            : GetScalarType<T[P], CombineTableGroupByOutputType[P]>
        }
      >
    >


  export type CombineTableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userDocumentCombiner?: boolean
    combinerAt?: boolean
    isActive?: boolean
    userDocumentReleaser?: boolean
    releasedAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    combiner?: boolean | UserDefaultArgs<ExtArgs>
    releaser?: boolean | CombineTable$releaserArgs<ExtArgs>
    tables?: boolean | CombineTable$tablesArgs<ExtArgs>
    commands?: boolean | CombineTable$commandsArgs<ExtArgs>
    _count?: boolean | CombineTableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["combineTable"]>



  export type CombineTableSelectScalar = {
    id?: boolean
    name?: boolean
    userDocumentCombiner?: boolean
    combinerAt?: boolean
    isActive?: boolean
    userDocumentReleaser?: boolean
    releasedAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type CombineTableOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userDocumentCombiner" | "combinerAt" | "isActive" | "userDocumentReleaser" | "releasedAt" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["combineTable"]>
  export type CombineTableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    combiner?: boolean | UserDefaultArgs<ExtArgs>
    releaser?: boolean | CombineTable$releaserArgs<ExtArgs>
    tables?: boolean | CombineTable$tablesArgs<ExtArgs>
    commands?: boolean | CombineTable$commandsArgs<ExtArgs>
    _count?: boolean | CombineTableCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CombineTablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CombineTable"
    objects: {
      combiner: Prisma.$UserPayload<ExtArgs>
      releaser: Prisma.$UserPayload<ExtArgs> | null
      tables: Prisma.$CombineTableItemPayload<ExtArgs>[]
      commands: Prisma.$CommandPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userDocumentCombiner: string
      combinerAt: Date
      isActive: boolean
      userDocumentReleaser: string | null
      releasedAt: Date | null
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["combineTable"]>
    composites: {}
  }

  type CombineTableGetPayload<S extends boolean | null | undefined | CombineTableDefaultArgs> = $Result.GetResult<Prisma.$CombineTablePayload, S>

  type CombineTableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CombineTableFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CombineTableCountAggregateInputType | true
    }

  export interface CombineTableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CombineTable'], meta: { name: 'CombineTable' } }
    /**
     * Find zero or one CombineTable that matches the filter.
     * @param {CombineTableFindUniqueArgs} args - Arguments to find a CombineTable
     * @example
     * // Get one CombineTable
     * const combineTable = await prisma.combineTable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CombineTableFindUniqueArgs>(args: SelectSubset<T, CombineTableFindUniqueArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CombineTable that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CombineTableFindUniqueOrThrowArgs} args - Arguments to find a CombineTable
     * @example
     * // Get one CombineTable
     * const combineTable = await prisma.combineTable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CombineTableFindUniqueOrThrowArgs>(args: SelectSubset<T, CombineTableFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CombineTable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableFindFirstArgs} args - Arguments to find a CombineTable
     * @example
     * // Get one CombineTable
     * const combineTable = await prisma.combineTable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CombineTableFindFirstArgs>(args?: SelectSubset<T, CombineTableFindFirstArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CombineTable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableFindFirstOrThrowArgs} args - Arguments to find a CombineTable
     * @example
     * // Get one CombineTable
     * const combineTable = await prisma.combineTable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CombineTableFindFirstOrThrowArgs>(args?: SelectSubset<T, CombineTableFindFirstOrThrowArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CombineTables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CombineTables
     * const combineTables = await prisma.combineTable.findMany()
     * 
     * // Get first 10 CombineTables
     * const combineTables = await prisma.combineTable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const combineTableWithIdOnly = await prisma.combineTable.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CombineTableFindManyArgs>(args?: SelectSubset<T, CombineTableFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CombineTable.
     * @param {CombineTableCreateArgs} args - Arguments to create a CombineTable.
     * @example
     * // Create one CombineTable
     * const CombineTable = await prisma.combineTable.create({
     *   data: {
     *     // ... data to create a CombineTable
     *   }
     * })
     * 
     */
    create<T extends CombineTableCreateArgs>(args: SelectSubset<T, CombineTableCreateArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CombineTables.
     * @param {CombineTableCreateManyArgs} args - Arguments to create many CombineTables.
     * @example
     * // Create many CombineTables
     * const combineTable = await prisma.combineTable.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CombineTableCreateManyArgs>(args?: SelectSubset<T, CombineTableCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CombineTable.
     * @param {CombineTableDeleteArgs} args - Arguments to delete one CombineTable.
     * @example
     * // Delete one CombineTable
     * const CombineTable = await prisma.combineTable.delete({
     *   where: {
     *     // ... filter to delete one CombineTable
     *   }
     * })
     * 
     */
    delete<T extends CombineTableDeleteArgs>(args: SelectSubset<T, CombineTableDeleteArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CombineTable.
     * @param {CombineTableUpdateArgs} args - Arguments to update one CombineTable.
     * @example
     * // Update one CombineTable
     * const combineTable = await prisma.combineTable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CombineTableUpdateArgs>(args: SelectSubset<T, CombineTableUpdateArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CombineTables.
     * @param {CombineTableDeleteManyArgs} args - Arguments to filter CombineTables to delete.
     * @example
     * // Delete a few CombineTables
     * const { count } = await prisma.combineTable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CombineTableDeleteManyArgs>(args?: SelectSubset<T, CombineTableDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CombineTables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CombineTables
     * const combineTable = await prisma.combineTable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CombineTableUpdateManyArgs>(args: SelectSubset<T, CombineTableUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CombineTable.
     * @param {CombineTableUpsertArgs} args - Arguments to update or create a CombineTable.
     * @example
     * // Update or create a CombineTable
     * const combineTable = await prisma.combineTable.upsert({
     *   create: {
     *     // ... data to create a CombineTable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CombineTable we want to update
     *   }
     * })
     */
    upsert<T extends CombineTableUpsertArgs>(args: SelectSubset<T, CombineTableUpsertArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CombineTables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableCountArgs} args - Arguments to filter CombineTables to count.
     * @example
     * // Count the number of CombineTables
     * const count = await prisma.combineTable.count({
     *   where: {
     *     // ... the filter for the CombineTables we want to count
     *   }
     * })
    **/
    count<T extends CombineTableCountArgs>(
      args?: Subset<T, CombineTableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CombineTableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CombineTable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CombineTableAggregateArgs>(args: Subset<T, CombineTableAggregateArgs>): Prisma.PrismaPromise<GetCombineTableAggregateType<T>>

    /**
     * Group by CombineTable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CombineTableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CombineTableGroupByArgs['orderBy'] }
        : { orderBy?: CombineTableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CombineTableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCombineTableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CombineTable model
   */
  readonly fields: CombineTableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CombineTable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CombineTableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    combiner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    releaser<T extends CombineTable$releaserArgs<ExtArgs> = {}>(args?: Subset<T, CombineTable$releaserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tables<T extends CombineTable$tablesArgs<ExtArgs> = {}>(args?: Subset<T, CombineTable$tablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commands<T extends CombineTable$commandsArgs<ExtArgs> = {}>(args?: Subset<T, CombineTable$commandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CombineTable model
   */
  interface CombineTableFieldRefs {
    readonly id: FieldRef<"CombineTable", 'Int'>
    readonly name: FieldRef<"CombineTable", 'String'>
    readonly userDocumentCombiner: FieldRef<"CombineTable", 'String'>
    readonly combinerAt: FieldRef<"CombineTable", 'DateTime'>
    readonly isActive: FieldRef<"CombineTable", 'Boolean'>
    readonly userDocumentReleaser: FieldRef<"CombineTable", 'String'>
    readonly releasedAt: FieldRef<"CombineTable", 'DateTime'>
    readonly updatedAt: FieldRef<"CombineTable", 'DateTime'>
    readonly updatedBy: FieldRef<"CombineTable", 'String'>
    readonly deletedAt: FieldRef<"CombineTable", 'DateTime'>
    readonly deletedBy: FieldRef<"CombineTable", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CombineTable findUnique
   */
  export type CombineTableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * Filter, which CombineTable to fetch.
     */
    where: CombineTableWhereUniqueInput
  }

  /**
   * CombineTable findUniqueOrThrow
   */
  export type CombineTableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * Filter, which CombineTable to fetch.
     */
    where: CombineTableWhereUniqueInput
  }

  /**
   * CombineTable findFirst
   */
  export type CombineTableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * Filter, which CombineTable to fetch.
     */
    where?: CombineTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTables to fetch.
     */
    orderBy?: CombineTableOrderByWithRelationInput | CombineTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CombineTables.
     */
    cursor?: CombineTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CombineTables.
     */
    distinct?: CombineTableScalarFieldEnum | CombineTableScalarFieldEnum[]
  }

  /**
   * CombineTable findFirstOrThrow
   */
  export type CombineTableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * Filter, which CombineTable to fetch.
     */
    where?: CombineTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTables to fetch.
     */
    orderBy?: CombineTableOrderByWithRelationInput | CombineTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CombineTables.
     */
    cursor?: CombineTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CombineTables.
     */
    distinct?: CombineTableScalarFieldEnum | CombineTableScalarFieldEnum[]
  }

  /**
   * CombineTable findMany
   */
  export type CombineTableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * Filter, which CombineTables to fetch.
     */
    where?: CombineTableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTables to fetch.
     */
    orderBy?: CombineTableOrderByWithRelationInput | CombineTableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CombineTables.
     */
    cursor?: CombineTableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTables.
     */
    skip?: number
    distinct?: CombineTableScalarFieldEnum | CombineTableScalarFieldEnum[]
  }

  /**
   * CombineTable create
   */
  export type CombineTableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * The data needed to create a CombineTable.
     */
    data: XOR<CombineTableCreateInput, CombineTableUncheckedCreateInput>
  }

  /**
   * CombineTable createMany
   */
  export type CombineTableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CombineTables.
     */
    data: CombineTableCreateManyInput | CombineTableCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CombineTable update
   */
  export type CombineTableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * The data needed to update a CombineTable.
     */
    data: XOR<CombineTableUpdateInput, CombineTableUncheckedUpdateInput>
    /**
     * Choose, which CombineTable to update.
     */
    where: CombineTableWhereUniqueInput
  }

  /**
   * CombineTable updateMany
   */
  export type CombineTableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CombineTables.
     */
    data: XOR<CombineTableUpdateManyMutationInput, CombineTableUncheckedUpdateManyInput>
    /**
     * Filter which CombineTables to update
     */
    where?: CombineTableWhereInput
    /**
     * Limit how many CombineTables to update.
     */
    limit?: number
  }

  /**
   * CombineTable upsert
   */
  export type CombineTableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * The filter to search for the CombineTable to update in case it exists.
     */
    where: CombineTableWhereUniqueInput
    /**
     * In case the CombineTable found by the `where` argument doesn't exist, create a new CombineTable with this data.
     */
    create: XOR<CombineTableCreateInput, CombineTableUncheckedCreateInput>
    /**
     * In case the CombineTable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CombineTableUpdateInput, CombineTableUncheckedUpdateInput>
  }

  /**
   * CombineTable delete
   */
  export type CombineTableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    /**
     * Filter which CombineTable to delete.
     */
    where: CombineTableWhereUniqueInput
  }

  /**
   * CombineTable deleteMany
   */
  export type CombineTableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CombineTables to delete
     */
    where?: CombineTableWhereInput
    /**
     * Limit how many CombineTables to delete.
     */
    limit?: number
  }

  /**
   * CombineTable.releaser
   */
  export type CombineTable$releaserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CombineTable.tables
   */
  export type CombineTable$tablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    where?: CombineTableItemWhereInput
    orderBy?: CombineTableItemOrderByWithRelationInput | CombineTableItemOrderByWithRelationInput[]
    cursor?: CombineTableItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CombineTableItemScalarFieldEnum | CombineTableItemScalarFieldEnum[]
  }

  /**
   * CombineTable.commands
   */
  export type CombineTable$commandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    where?: CommandWhereInput
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    cursor?: CommandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * CombineTable without action
   */
  export type CombineTableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
  }


  /**
   * Model CombineTableItem
   */

  export type AggregateCombineTableItem = {
    _count: CombineTableItemCountAggregateOutputType | null
    _avg: CombineTableItemAvgAggregateOutputType | null
    _sum: CombineTableItemSumAggregateOutputType | null
    _min: CombineTableItemMinAggregateOutputType | null
    _max: CombineTableItemMaxAggregateOutputType | null
  }

  export type CombineTableItemAvgAggregateOutputType = {
    id: number | null
    combineTableId: number | null
    tableId: number | null
  }

  export type CombineTableItemSumAggregateOutputType = {
    id: number | null
    combineTableId: number | null
    tableId: number | null
  }

  export type CombineTableItemMinAggregateOutputType = {
    id: number | null
    combineTableId: number | null
    tableId: number | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CombineTableItemMaxAggregateOutputType = {
    id: number | null
    combineTableId: number | null
    tableId: number | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CombineTableItemCountAggregateOutputType = {
    id: number
    combineTableId: number
    tableId: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type CombineTableItemAvgAggregateInputType = {
    id?: true
    combineTableId?: true
    tableId?: true
  }

  export type CombineTableItemSumAggregateInputType = {
    id?: true
    combineTableId?: true
    tableId?: true
  }

  export type CombineTableItemMinAggregateInputType = {
    id?: true
    combineTableId?: true
    tableId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CombineTableItemMaxAggregateInputType = {
    id?: true
    combineTableId?: true
    tableId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CombineTableItemCountAggregateInputType = {
    id?: true
    combineTableId?: true
    tableId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type CombineTableItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CombineTableItem to aggregate.
     */
    where?: CombineTableItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTableItems to fetch.
     */
    orderBy?: CombineTableItemOrderByWithRelationInput | CombineTableItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CombineTableItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTableItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTableItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CombineTableItems
    **/
    _count?: true | CombineTableItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CombineTableItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CombineTableItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CombineTableItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CombineTableItemMaxAggregateInputType
  }

  export type GetCombineTableItemAggregateType<T extends CombineTableItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCombineTableItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCombineTableItem[P]>
      : GetScalarType<T[P], AggregateCombineTableItem[P]>
  }




  export type CombineTableItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CombineTableItemWhereInput
    orderBy?: CombineTableItemOrderByWithAggregationInput | CombineTableItemOrderByWithAggregationInput[]
    by: CombineTableItemScalarFieldEnum[] | CombineTableItemScalarFieldEnum
    having?: CombineTableItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CombineTableItemCountAggregateInputType | true
    _avg?: CombineTableItemAvgAggregateInputType
    _sum?: CombineTableItemSumAggregateInputType
    _min?: CombineTableItemMinAggregateInputType
    _max?: CombineTableItemMaxAggregateInputType
  }

  export type CombineTableItemGroupByOutputType = {
    id: number
    combineTableId: number
    tableId: number
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: CombineTableItemCountAggregateOutputType | null
    _avg: CombineTableItemAvgAggregateOutputType | null
    _sum: CombineTableItemSumAggregateOutputType | null
    _min: CombineTableItemMinAggregateOutputType | null
    _max: CombineTableItemMaxAggregateOutputType | null
  }

  type GetCombineTableItemGroupByPayload<T extends CombineTableItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CombineTableItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CombineTableItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CombineTableItemGroupByOutputType[P]>
            : GetScalarType<T[P], CombineTableItemGroupByOutputType[P]>
        }
      >
    >


  export type CombineTableItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    combineTableId?: boolean
    tableId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    combineTable?: boolean | CombineTableDefaultArgs<ExtArgs>
    table?: boolean | TableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["combineTableItem"]>



  export type CombineTableItemSelectScalar = {
    id?: boolean
    combineTableId?: boolean
    tableId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type CombineTableItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "combineTableId" | "tableId" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["combineTableItem"]>
  export type CombineTableItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    combineTable?: boolean | CombineTableDefaultArgs<ExtArgs>
    table?: boolean | TableDefaultArgs<ExtArgs>
  }

  export type $CombineTableItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CombineTableItem"
    objects: {
      combineTable: Prisma.$CombineTablePayload<ExtArgs>
      table: Prisma.$TablePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      combineTableId: number
      tableId: number
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["combineTableItem"]>
    composites: {}
  }

  type CombineTableItemGetPayload<S extends boolean | null | undefined | CombineTableItemDefaultArgs> = $Result.GetResult<Prisma.$CombineTableItemPayload, S>

  type CombineTableItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CombineTableItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CombineTableItemCountAggregateInputType | true
    }

  export interface CombineTableItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CombineTableItem'], meta: { name: 'CombineTableItem' } }
    /**
     * Find zero or one CombineTableItem that matches the filter.
     * @param {CombineTableItemFindUniqueArgs} args - Arguments to find a CombineTableItem
     * @example
     * // Get one CombineTableItem
     * const combineTableItem = await prisma.combineTableItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CombineTableItemFindUniqueArgs>(args: SelectSubset<T, CombineTableItemFindUniqueArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CombineTableItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CombineTableItemFindUniqueOrThrowArgs} args - Arguments to find a CombineTableItem
     * @example
     * // Get one CombineTableItem
     * const combineTableItem = await prisma.combineTableItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CombineTableItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CombineTableItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CombineTableItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemFindFirstArgs} args - Arguments to find a CombineTableItem
     * @example
     * // Get one CombineTableItem
     * const combineTableItem = await prisma.combineTableItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CombineTableItemFindFirstArgs>(args?: SelectSubset<T, CombineTableItemFindFirstArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CombineTableItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemFindFirstOrThrowArgs} args - Arguments to find a CombineTableItem
     * @example
     * // Get one CombineTableItem
     * const combineTableItem = await prisma.combineTableItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CombineTableItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CombineTableItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CombineTableItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CombineTableItems
     * const combineTableItems = await prisma.combineTableItem.findMany()
     * 
     * // Get first 10 CombineTableItems
     * const combineTableItems = await prisma.combineTableItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const combineTableItemWithIdOnly = await prisma.combineTableItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CombineTableItemFindManyArgs>(args?: SelectSubset<T, CombineTableItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CombineTableItem.
     * @param {CombineTableItemCreateArgs} args - Arguments to create a CombineTableItem.
     * @example
     * // Create one CombineTableItem
     * const CombineTableItem = await prisma.combineTableItem.create({
     *   data: {
     *     // ... data to create a CombineTableItem
     *   }
     * })
     * 
     */
    create<T extends CombineTableItemCreateArgs>(args: SelectSubset<T, CombineTableItemCreateArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CombineTableItems.
     * @param {CombineTableItemCreateManyArgs} args - Arguments to create many CombineTableItems.
     * @example
     * // Create many CombineTableItems
     * const combineTableItem = await prisma.combineTableItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CombineTableItemCreateManyArgs>(args?: SelectSubset<T, CombineTableItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CombineTableItem.
     * @param {CombineTableItemDeleteArgs} args - Arguments to delete one CombineTableItem.
     * @example
     * // Delete one CombineTableItem
     * const CombineTableItem = await prisma.combineTableItem.delete({
     *   where: {
     *     // ... filter to delete one CombineTableItem
     *   }
     * })
     * 
     */
    delete<T extends CombineTableItemDeleteArgs>(args: SelectSubset<T, CombineTableItemDeleteArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CombineTableItem.
     * @param {CombineTableItemUpdateArgs} args - Arguments to update one CombineTableItem.
     * @example
     * // Update one CombineTableItem
     * const combineTableItem = await prisma.combineTableItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CombineTableItemUpdateArgs>(args: SelectSubset<T, CombineTableItemUpdateArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CombineTableItems.
     * @param {CombineTableItemDeleteManyArgs} args - Arguments to filter CombineTableItems to delete.
     * @example
     * // Delete a few CombineTableItems
     * const { count } = await prisma.combineTableItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CombineTableItemDeleteManyArgs>(args?: SelectSubset<T, CombineTableItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CombineTableItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CombineTableItems
     * const combineTableItem = await prisma.combineTableItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CombineTableItemUpdateManyArgs>(args: SelectSubset<T, CombineTableItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CombineTableItem.
     * @param {CombineTableItemUpsertArgs} args - Arguments to update or create a CombineTableItem.
     * @example
     * // Update or create a CombineTableItem
     * const combineTableItem = await prisma.combineTableItem.upsert({
     *   create: {
     *     // ... data to create a CombineTableItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CombineTableItem we want to update
     *   }
     * })
     */
    upsert<T extends CombineTableItemUpsertArgs>(args: SelectSubset<T, CombineTableItemUpsertArgs<ExtArgs>>): Prisma__CombineTableItemClient<$Result.GetResult<Prisma.$CombineTableItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CombineTableItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemCountArgs} args - Arguments to filter CombineTableItems to count.
     * @example
     * // Count the number of CombineTableItems
     * const count = await prisma.combineTableItem.count({
     *   where: {
     *     // ... the filter for the CombineTableItems we want to count
     *   }
     * })
    **/
    count<T extends CombineTableItemCountArgs>(
      args?: Subset<T, CombineTableItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CombineTableItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CombineTableItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CombineTableItemAggregateArgs>(args: Subset<T, CombineTableItemAggregateArgs>): Prisma.PrismaPromise<GetCombineTableItemAggregateType<T>>

    /**
     * Group by CombineTableItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombineTableItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CombineTableItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CombineTableItemGroupByArgs['orderBy'] }
        : { orderBy?: CombineTableItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CombineTableItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCombineTableItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CombineTableItem model
   */
  readonly fields: CombineTableItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CombineTableItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CombineTableItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    combineTable<T extends CombineTableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CombineTableDefaultArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    table<T extends TableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TableDefaultArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CombineTableItem model
   */
  interface CombineTableItemFieldRefs {
    readonly id: FieldRef<"CombineTableItem", 'Int'>
    readonly combineTableId: FieldRef<"CombineTableItem", 'Int'>
    readonly tableId: FieldRef<"CombineTableItem", 'Int'>
    readonly createdAt: FieldRef<"CombineTableItem", 'DateTime'>
    readonly createdBy: FieldRef<"CombineTableItem", 'String'>
    readonly updatedAt: FieldRef<"CombineTableItem", 'DateTime'>
    readonly updatedBy: FieldRef<"CombineTableItem", 'String'>
    readonly deletedAt: FieldRef<"CombineTableItem", 'DateTime'>
    readonly deletedBy: FieldRef<"CombineTableItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CombineTableItem findUnique
   */
  export type CombineTableItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * Filter, which CombineTableItem to fetch.
     */
    where: CombineTableItemWhereUniqueInput
  }

  /**
   * CombineTableItem findUniqueOrThrow
   */
  export type CombineTableItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * Filter, which CombineTableItem to fetch.
     */
    where: CombineTableItemWhereUniqueInput
  }

  /**
   * CombineTableItem findFirst
   */
  export type CombineTableItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * Filter, which CombineTableItem to fetch.
     */
    where?: CombineTableItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTableItems to fetch.
     */
    orderBy?: CombineTableItemOrderByWithRelationInput | CombineTableItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CombineTableItems.
     */
    cursor?: CombineTableItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTableItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTableItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CombineTableItems.
     */
    distinct?: CombineTableItemScalarFieldEnum | CombineTableItemScalarFieldEnum[]
  }

  /**
   * CombineTableItem findFirstOrThrow
   */
  export type CombineTableItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * Filter, which CombineTableItem to fetch.
     */
    where?: CombineTableItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTableItems to fetch.
     */
    orderBy?: CombineTableItemOrderByWithRelationInput | CombineTableItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CombineTableItems.
     */
    cursor?: CombineTableItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTableItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTableItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CombineTableItems.
     */
    distinct?: CombineTableItemScalarFieldEnum | CombineTableItemScalarFieldEnum[]
  }

  /**
   * CombineTableItem findMany
   */
  export type CombineTableItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * Filter, which CombineTableItems to fetch.
     */
    where?: CombineTableItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CombineTableItems to fetch.
     */
    orderBy?: CombineTableItemOrderByWithRelationInput | CombineTableItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CombineTableItems.
     */
    cursor?: CombineTableItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CombineTableItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CombineTableItems.
     */
    skip?: number
    distinct?: CombineTableItemScalarFieldEnum | CombineTableItemScalarFieldEnum[]
  }

  /**
   * CombineTableItem create
   */
  export type CombineTableItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CombineTableItem.
     */
    data: XOR<CombineTableItemCreateInput, CombineTableItemUncheckedCreateInput>
  }

  /**
   * CombineTableItem createMany
   */
  export type CombineTableItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CombineTableItems.
     */
    data: CombineTableItemCreateManyInput | CombineTableItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CombineTableItem update
   */
  export type CombineTableItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CombineTableItem.
     */
    data: XOR<CombineTableItemUpdateInput, CombineTableItemUncheckedUpdateInput>
    /**
     * Choose, which CombineTableItem to update.
     */
    where: CombineTableItemWhereUniqueInput
  }

  /**
   * CombineTableItem updateMany
   */
  export type CombineTableItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CombineTableItems.
     */
    data: XOR<CombineTableItemUpdateManyMutationInput, CombineTableItemUncheckedUpdateManyInput>
    /**
     * Filter which CombineTableItems to update
     */
    where?: CombineTableItemWhereInput
    /**
     * Limit how many CombineTableItems to update.
     */
    limit?: number
  }

  /**
   * CombineTableItem upsert
   */
  export type CombineTableItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CombineTableItem to update in case it exists.
     */
    where: CombineTableItemWhereUniqueInput
    /**
     * In case the CombineTableItem found by the `where` argument doesn't exist, create a new CombineTableItem with this data.
     */
    create: XOR<CombineTableItemCreateInput, CombineTableItemUncheckedCreateInput>
    /**
     * In case the CombineTableItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CombineTableItemUpdateInput, CombineTableItemUncheckedUpdateInput>
  }

  /**
   * CombineTableItem delete
   */
  export type CombineTableItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
    /**
     * Filter which CombineTableItem to delete.
     */
    where: CombineTableItemWhereUniqueInput
  }

  /**
   * CombineTableItem deleteMany
   */
  export type CombineTableItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CombineTableItems to delete
     */
    where?: CombineTableItemWhereInput
    /**
     * Limit how many CombineTableItems to delete.
     */
    limit?: number
  }

  /**
   * CombineTableItem without action
   */
  export type CombineTableItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTableItem
     */
    select?: CombineTableItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTableItem
     */
    omit?: CombineTableItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableItemInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type BrandMaxAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type BrandCountAggregateOutputType = {
    name: number
    description: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type BrandMaxAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type BrandCountAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    name: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    products?: boolean | Brand$productsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>



  export type BrandSelectScalar = {
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Brand$productsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const brandWithNameOnly = await prisma.brand.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Brand$productsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly name: FieldRef<"Brand", 'String'>
    readonly description: FieldRef<"Brand", 'String'>
    readonly color: FieldRef<"Brand", 'String'>
    readonly isActive: FieldRef<"Brand", 'Boolean'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly createdBy: FieldRef<"Brand", 'String'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedBy: FieldRef<"Brand", 'String'>
    readonly deletedAt: FieldRef<"Brand", 'DateTime'>
    readonly deletedBy: FieldRef<"Brand", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand.products
   */
  export type Brand$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model ProductType
   */

  export type AggregateProductType = {
    _count: ProductTypeCountAggregateOutputType | null
    _min: ProductTypeMinAggregateOutputType | null
    _max: ProductTypeMaxAggregateOutputType | null
  }

  export type ProductTypeMinAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ProductTypeMaxAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ProductTypeCountAggregateOutputType = {
    name: number
    description: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type ProductTypeMinAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ProductTypeMaxAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ProductTypeCountAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type ProductTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductType to aggregate.
     */
    where?: ProductTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypeOrderByWithRelationInput | ProductTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTypes
    **/
    _count?: true | ProductTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductTypeMaxAggregateInputType
  }

  export type GetProductTypeAggregateType<T extends ProductTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateProductType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductType[P]>
      : GetScalarType<T[P], AggregateProductType[P]>
  }




  export type ProductTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTypeWhereInput
    orderBy?: ProductTypeOrderByWithAggregationInput | ProductTypeOrderByWithAggregationInput[]
    by: ProductTypeScalarFieldEnum[] | ProductTypeScalarFieldEnum
    having?: ProductTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductTypeCountAggregateInputType | true
    _min?: ProductTypeMinAggregateInputType
    _max?: ProductTypeMaxAggregateInputType
  }

  export type ProductTypeGroupByOutputType = {
    name: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: ProductTypeCountAggregateOutputType | null
    _min: ProductTypeMinAggregateOutputType | null
    _max: ProductTypeMaxAggregateOutputType | null
  }

  type GetProductTypeGroupByPayload<T extends ProductTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ProductTypeGroupByOutputType[P]>
        }
      >
    >


  export type ProductTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    products?: boolean | ProductType$productsArgs<ExtArgs>
    _count?: boolean | ProductTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productType"]>



  export type ProductTypeSelectScalar = {
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type ProductTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["productType"]>
  export type ProductTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductType$productsArgs<ExtArgs>
    _count?: boolean | ProductTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductType"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["productType"]>
    composites: {}
  }

  type ProductTypeGetPayload<S extends boolean | null | undefined | ProductTypeDefaultArgs> = $Result.GetResult<Prisma.$ProductTypePayload, S>

  type ProductTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductTypeCountAggregateInputType | true
    }

  export interface ProductTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductType'], meta: { name: 'ProductType' } }
    /**
     * Find zero or one ProductType that matches the filter.
     * @param {ProductTypeFindUniqueArgs} args - Arguments to find a ProductType
     * @example
     * // Get one ProductType
     * const productType = await prisma.productType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductTypeFindUniqueArgs>(args: SelectSubset<T, ProductTypeFindUniqueArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductTypeFindUniqueOrThrowArgs} args - Arguments to find a ProductType
     * @example
     * // Get one ProductType
     * const productType = await prisma.productType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeFindFirstArgs} args - Arguments to find a ProductType
     * @example
     * // Get one ProductType
     * const productType = await prisma.productType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductTypeFindFirstArgs>(args?: SelectSubset<T, ProductTypeFindFirstArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeFindFirstOrThrowArgs} args - Arguments to find a ProductType
     * @example
     * // Get one ProductType
     * const productType = await prisma.productType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTypes
     * const productTypes = await prisma.productType.findMany()
     * 
     * // Get first 10 ProductTypes
     * const productTypes = await prisma.productType.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const productTypeWithNameOnly = await prisma.productType.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends ProductTypeFindManyArgs>(args?: SelectSubset<T, ProductTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductType.
     * @param {ProductTypeCreateArgs} args - Arguments to create a ProductType.
     * @example
     * // Create one ProductType
     * const ProductType = await prisma.productType.create({
     *   data: {
     *     // ... data to create a ProductType
     *   }
     * })
     * 
     */
    create<T extends ProductTypeCreateArgs>(args: SelectSubset<T, ProductTypeCreateArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductTypes.
     * @param {ProductTypeCreateManyArgs} args - Arguments to create many ProductTypes.
     * @example
     * // Create many ProductTypes
     * const productType = await prisma.productType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductTypeCreateManyArgs>(args?: SelectSubset<T, ProductTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductType.
     * @param {ProductTypeDeleteArgs} args - Arguments to delete one ProductType.
     * @example
     * // Delete one ProductType
     * const ProductType = await prisma.productType.delete({
     *   where: {
     *     // ... filter to delete one ProductType
     *   }
     * })
     * 
     */
    delete<T extends ProductTypeDeleteArgs>(args: SelectSubset<T, ProductTypeDeleteArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductType.
     * @param {ProductTypeUpdateArgs} args - Arguments to update one ProductType.
     * @example
     * // Update one ProductType
     * const productType = await prisma.productType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductTypeUpdateArgs>(args: SelectSubset<T, ProductTypeUpdateArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductTypes.
     * @param {ProductTypeDeleteManyArgs} args - Arguments to filter ProductTypes to delete.
     * @example
     * // Delete a few ProductTypes
     * const { count } = await prisma.productType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductTypeDeleteManyArgs>(args?: SelectSubset<T, ProductTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTypes
     * const productType = await prisma.productType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductTypeUpdateManyArgs>(args: SelectSubset<T, ProductTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductType.
     * @param {ProductTypeUpsertArgs} args - Arguments to update or create a ProductType.
     * @example
     * // Update or create a ProductType
     * const productType = await prisma.productType.upsert({
     *   create: {
     *     // ... data to create a ProductType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductType we want to update
     *   }
     * })
     */
    upsert<T extends ProductTypeUpsertArgs>(args: SelectSubset<T, ProductTypeUpsertArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeCountArgs} args - Arguments to filter ProductTypes to count.
     * @example
     * // Count the number of ProductTypes
     * const count = await prisma.productType.count({
     *   where: {
     *     // ... the filter for the ProductTypes we want to count
     *   }
     * })
    **/
    count<T extends ProductTypeCountArgs>(
      args?: Subset<T, ProductTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductTypeAggregateArgs>(args: Subset<T, ProductTypeAggregateArgs>): Prisma.PrismaPromise<GetProductTypeAggregateType<T>>

    /**
     * Group by ProductType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductTypeGroupByArgs['orderBy'] }
        : { orderBy?: ProductTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductType model
   */
  readonly fields: ProductTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends ProductType$productsArgs<ExtArgs> = {}>(args?: Subset<T, ProductType$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductType model
   */
  interface ProductTypeFieldRefs {
    readonly name: FieldRef<"ProductType", 'String'>
    readonly description: FieldRef<"ProductType", 'String'>
    readonly color: FieldRef<"ProductType", 'String'>
    readonly isActive: FieldRef<"ProductType", 'Boolean'>
    readonly createdAt: FieldRef<"ProductType", 'DateTime'>
    readonly createdBy: FieldRef<"ProductType", 'String'>
    readonly updatedAt: FieldRef<"ProductType", 'DateTime'>
    readonly updatedBy: FieldRef<"ProductType", 'String'>
    readonly deletedAt: FieldRef<"ProductType", 'DateTime'>
    readonly deletedBy: FieldRef<"ProductType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductType findUnique
   */
  export type ProductTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProductType to fetch.
     */
    where: ProductTypeWhereUniqueInput
  }

  /**
   * ProductType findUniqueOrThrow
   */
  export type ProductTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProductType to fetch.
     */
    where: ProductTypeWhereUniqueInput
  }

  /**
   * ProductType findFirst
   */
  export type ProductTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProductType to fetch.
     */
    where?: ProductTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypeOrderByWithRelationInput | ProductTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTypes.
     */
    cursor?: ProductTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTypes.
     */
    distinct?: ProductTypeScalarFieldEnum | ProductTypeScalarFieldEnum[]
  }

  /**
   * ProductType findFirstOrThrow
   */
  export type ProductTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProductType to fetch.
     */
    where?: ProductTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypeOrderByWithRelationInput | ProductTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTypes.
     */
    cursor?: ProductTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTypes.
     */
    distinct?: ProductTypeScalarFieldEnum | ProductTypeScalarFieldEnum[]
  }

  /**
   * ProductType findMany
   */
  export type ProductTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProductTypes to fetch.
     */
    where?: ProductTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTypes to fetch.
     */
    orderBy?: ProductTypeOrderByWithRelationInput | ProductTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTypes.
     */
    cursor?: ProductTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTypes.
     */
    skip?: number
    distinct?: ProductTypeScalarFieldEnum | ProductTypeScalarFieldEnum[]
  }

  /**
   * ProductType create
   */
  export type ProductTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductType.
     */
    data: XOR<ProductTypeCreateInput, ProductTypeUncheckedCreateInput>
  }

  /**
   * ProductType createMany
   */
  export type ProductTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductTypes.
     */
    data: ProductTypeCreateManyInput | ProductTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductType update
   */
  export type ProductTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductType.
     */
    data: XOR<ProductTypeUpdateInput, ProductTypeUncheckedUpdateInput>
    /**
     * Choose, which ProductType to update.
     */
    where: ProductTypeWhereUniqueInput
  }

  /**
   * ProductType updateMany
   */
  export type ProductTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTypes.
     */
    data: XOR<ProductTypeUpdateManyMutationInput, ProductTypeUncheckedUpdateManyInput>
    /**
     * Filter which ProductTypes to update
     */
    where?: ProductTypeWhereInput
    /**
     * Limit how many ProductTypes to update.
     */
    limit?: number
  }

  /**
   * ProductType upsert
   */
  export type ProductTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductType to update in case it exists.
     */
    where: ProductTypeWhereUniqueInput
    /**
     * In case the ProductType found by the `where` argument doesn't exist, create a new ProductType with this data.
     */
    create: XOR<ProductTypeCreateInput, ProductTypeUncheckedCreateInput>
    /**
     * In case the ProductType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductTypeUpdateInput, ProductTypeUncheckedUpdateInput>
  }

  /**
   * ProductType delete
   */
  export type ProductTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
    /**
     * Filter which ProductType to delete.
     */
    where: ProductTypeWhereUniqueInput
  }

  /**
   * ProductType deleteMany
   */
  export type ProductTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTypes to delete
     */
    where?: ProductTypeWhereInput
    /**
     * Limit how many ProductTypes to delete.
     */
    limit?: number
  }

  /**
   * ProductType.products
   */
  export type ProductType$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * ProductType without action
   */
  export type ProductTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductType
     */
    select?: ProductTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductType
     */
    omit?: ProductTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTypeInclude<ExtArgs> | null
  }


  /**
   * Model ProductCategory
   */

  export type AggregateProductCategory = {
    _count: ProductCategoryCountAggregateOutputType | null
    _min: ProductCategoryMinAggregateOutputType | null
    _max: ProductCategoryMaxAggregateOutputType | null
  }

  export type ProductCategoryMinAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ProductCategoryMaxAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ProductCategoryCountAggregateOutputType = {
    name: number
    description: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type ProductCategoryMinAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ProductCategoryMaxAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ProductCategoryCountAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type ProductCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCategory to aggregate.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductCategories
    **/
    _count?: true | ProductCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCategoryMaxAggregateInputType
  }

  export type GetProductCategoryAggregateType<T extends ProductCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCategory[P]>
      : GetScalarType<T[P], AggregateProductCategory[P]>
  }




  export type ProductCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCategoryWhereInput
    orderBy?: ProductCategoryOrderByWithAggregationInput | ProductCategoryOrderByWithAggregationInput[]
    by: ProductCategoryScalarFieldEnum[] | ProductCategoryScalarFieldEnum
    having?: ProductCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCategoryCountAggregateInputType | true
    _min?: ProductCategoryMinAggregateInputType
    _max?: ProductCategoryMaxAggregateInputType
  }

  export type ProductCategoryGroupByOutputType = {
    name: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: ProductCategoryCountAggregateOutputType | null
    _min: ProductCategoryMinAggregateOutputType | null
    _max: ProductCategoryMaxAggregateOutputType | null
  }

  type GetProductCategoryGroupByPayload<T extends ProductCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ProductCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    products?: boolean | ProductCategory$productsArgs<ExtArgs>
    _count?: boolean | ProductCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCategory"]>



  export type ProductCategorySelectScalar = {
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type ProductCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["productCategory"]>
  export type ProductCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductCategory$productsArgs<ExtArgs>
    _count?: boolean | ProductCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductCategory"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["productCategory"]>
    composites: {}
  }

  type ProductCategoryGetPayload<S extends boolean | null | undefined | ProductCategoryDefaultArgs> = $Result.GetResult<Prisma.$ProductCategoryPayload, S>

  type ProductCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCategoryCountAggregateInputType | true
    }

  export interface ProductCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductCategory'], meta: { name: 'ProductCategory' } }
    /**
     * Find zero or one ProductCategory that matches the filter.
     * @param {ProductCategoryFindUniqueArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductCategoryFindUniqueArgs>(args: SelectSubset<T, ProductCategoryFindUniqueArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductCategoryFindUniqueOrThrowArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindFirstArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductCategoryFindFirstArgs>(args?: SelectSubset<T, ProductCategoryFindFirstArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindFirstOrThrowArgs} args - Arguments to find a ProductCategory
     * @example
     * // Get one ProductCategory
     * const productCategory = await prisma.productCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCategories
     * const productCategories = await prisma.productCategory.findMany()
     * 
     * // Get first 10 ProductCategories
     * const productCategories = await prisma.productCategory.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const productCategoryWithNameOnly = await prisma.productCategory.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends ProductCategoryFindManyArgs>(args?: SelectSubset<T, ProductCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductCategory.
     * @param {ProductCategoryCreateArgs} args - Arguments to create a ProductCategory.
     * @example
     * // Create one ProductCategory
     * const ProductCategory = await prisma.productCategory.create({
     *   data: {
     *     // ... data to create a ProductCategory
     *   }
     * })
     * 
     */
    create<T extends ProductCategoryCreateArgs>(args: SelectSubset<T, ProductCategoryCreateArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductCategories.
     * @param {ProductCategoryCreateManyArgs} args - Arguments to create many ProductCategories.
     * @example
     * // Create many ProductCategories
     * const productCategory = await prisma.productCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCategoryCreateManyArgs>(args?: SelectSubset<T, ProductCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductCategory.
     * @param {ProductCategoryDeleteArgs} args - Arguments to delete one ProductCategory.
     * @example
     * // Delete one ProductCategory
     * const ProductCategory = await prisma.productCategory.delete({
     *   where: {
     *     // ... filter to delete one ProductCategory
     *   }
     * })
     * 
     */
    delete<T extends ProductCategoryDeleteArgs>(args: SelectSubset<T, ProductCategoryDeleteArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductCategory.
     * @param {ProductCategoryUpdateArgs} args - Arguments to update one ProductCategory.
     * @example
     * // Update one ProductCategory
     * const productCategory = await prisma.productCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductCategoryUpdateArgs>(args: SelectSubset<T, ProductCategoryUpdateArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductCategories.
     * @param {ProductCategoryDeleteManyArgs} args - Arguments to filter ProductCategories to delete.
     * @example
     * // Delete a few ProductCategories
     * const { count } = await prisma.productCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductCategoryDeleteManyArgs>(args?: SelectSubset<T, ProductCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCategories
     * const productCategory = await prisma.productCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductCategoryUpdateManyArgs>(args: SelectSubset<T, ProductCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductCategory.
     * @param {ProductCategoryUpsertArgs} args - Arguments to update or create a ProductCategory.
     * @example
     * // Update or create a ProductCategory
     * const productCategory = await prisma.productCategory.upsert({
     *   create: {
     *     // ... data to create a ProductCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCategory we want to update
     *   }
     * })
     */
    upsert<T extends ProductCategoryUpsertArgs>(args: SelectSubset<T, ProductCategoryUpsertArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryCountArgs} args - Arguments to filter ProductCategories to count.
     * @example
     * // Count the number of ProductCategories
     * const count = await prisma.productCategory.count({
     *   where: {
     *     // ... the filter for the ProductCategories we want to count
     *   }
     * })
    **/
    count<T extends ProductCategoryCountArgs>(
      args?: Subset<T, ProductCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCategoryAggregateArgs>(args: Subset<T, ProductCategoryAggregateArgs>): Prisma.PrismaPromise<GetProductCategoryAggregateType<T>>

    /**
     * Group by ProductCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ProductCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductCategory model
   */
  readonly fields: ProductCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends ProductCategory$productsArgs<ExtArgs> = {}>(args?: Subset<T, ProductCategory$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductCategory model
   */
  interface ProductCategoryFieldRefs {
    readonly name: FieldRef<"ProductCategory", 'String'>
    readonly description: FieldRef<"ProductCategory", 'String'>
    readonly color: FieldRef<"ProductCategory", 'String'>
    readonly isActive: FieldRef<"ProductCategory", 'Boolean'>
    readonly createdAt: FieldRef<"ProductCategory", 'DateTime'>
    readonly createdBy: FieldRef<"ProductCategory", 'String'>
    readonly updatedAt: FieldRef<"ProductCategory", 'DateTime'>
    readonly updatedBy: FieldRef<"ProductCategory", 'String'>
    readonly deletedAt: FieldRef<"ProductCategory", 'DateTime'>
    readonly deletedBy: FieldRef<"ProductCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductCategory findUnique
   */
  export type ProductCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory findUniqueOrThrow
   */
  export type ProductCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory findFirst
   */
  export type ProductCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCategories.
     */
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory findFirstOrThrow
   */
  export type ProductCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategory to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCategories.
     */
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory findMany
   */
  export type ProductCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ProductCategories to fetch.
     */
    where?: ProductCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCategories to fetch.
     */
    orderBy?: ProductCategoryOrderByWithRelationInput | ProductCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductCategories.
     */
    cursor?: ProductCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCategories.
     */
    skip?: number
    distinct?: ProductCategoryScalarFieldEnum | ProductCategoryScalarFieldEnum[]
  }

  /**
   * ProductCategory create
   */
  export type ProductCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductCategory.
     */
    data: XOR<ProductCategoryCreateInput, ProductCategoryUncheckedCreateInput>
  }

  /**
   * ProductCategory createMany
   */
  export type ProductCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductCategories.
     */
    data: ProductCategoryCreateManyInput | ProductCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductCategory update
   */
  export type ProductCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductCategory.
     */
    data: XOR<ProductCategoryUpdateInput, ProductCategoryUncheckedUpdateInput>
    /**
     * Choose, which ProductCategory to update.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory updateMany
   */
  export type ProductCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductCategories.
     */
    data: XOR<ProductCategoryUpdateManyMutationInput, ProductCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ProductCategories to update
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to update.
     */
    limit?: number
  }

  /**
   * ProductCategory upsert
   */
  export type ProductCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductCategory to update in case it exists.
     */
    where: ProductCategoryWhereUniqueInput
    /**
     * In case the ProductCategory found by the `where` argument doesn't exist, create a new ProductCategory with this data.
     */
    create: XOR<ProductCategoryCreateInput, ProductCategoryUncheckedCreateInput>
    /**
     * In case the ProductCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductCategoryUpdateInput, ProductCategoryUncheckedUpdateInput>
  }

  /**
   * ProductCategory delete
   */
  export type ProductCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
    /**
     * Filter which ProductCategory to delete.
     */
    where: ProductCategoryWhereUniqueInput
  }

  /**
   * ProductCategory deleteMany
   */
  export type ProductCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCategories to delete
     */
    where?: ProductCategoryWhereInput
    /**
     * Limit how many ProductCategories to delete.
     */
    limit?: number
  }

  /**
   * ProductCategory.products
   */
  export type ProductCategory$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * ProductCategory without action
   */
  export type ProductCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCategory
     */
    select?: ProductCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCategory
     */
    omit?: ProductCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCategoryInclude<ExtArgs> | null
  }


  /**
   * Model ProductStatus
   */

  export type AggregateProductStatus = {
    _count: ProductStatusCountAggregateOutputType | null
    _min: ProductStatusMinAggregateOutputType | null
    _max: ProductStatusMaxAggregateOutputType | null
  }

  export type ProductStatusMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type ProductStatusMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type ProductStatusCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ProductStatusMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProductStatusMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProductStatusCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ProductStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductStatus to aggregate.
     */
    where?: ProductStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductStatuses to fetch.
     */
    orderBy?: ProductStatusOrderByWithRelationInput | ProductStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductStatuses
    **/
    _count?: true | ProductStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductStatusMaxAggregateInputType
  }

  export type GetProductStatusAggregateType<T extends ProductStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateProductStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductStatus[P]>
      : GetScalarType<T[P], AggregateProductStatus[P]>
  }




  export type ProductStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductStatusWhereInput
    orderBy?: ProductStatusOrderByWithAggregationInput | ProductStatusOrderByWithAggregationInput[]
    by: ProductStatusScalarFieldEnum[] | ProductStatusScalarFieldEnum
    having?: ProductStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductStatusCountAggregateInputType | true
    _min?: ProductStatusMinAggregateInputType
    _max?: ProductStatusMaxAggregateInputType
  }

  export type ProductStatusGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: ProductStatusCountAggregateOutputType | null
    _min: ProductStatusMinAggregateOutputType | null
    _max: ProductStatusMaxAggregateOutputType | null
  }

  type GetProductStatusGroupByPayload<T extends ProductStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ProductStatusGroupByOutputType[P]>
        }
      >
    >


  export type ProductStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    products?: boolean | ProductStatus$productsArgs<ExtArgs>
    _count?: boolean | ProductStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productStatus"]>



  export type ProductStatusSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ProductStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["productStatus"]>
  export type ProductStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | ProductStatus$productsArgs<ExtArgs>
    _count?: boolean | ProductStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductStatus"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["productStatus"]>
    composites: {}
  }

  type ProductStatusGetPayload<S extends boolean | null | undefined | ProductStatusDefaultArgs> = $Result.GetResult<Prisma.$ProductStatusPayload, S>

  type ProductStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductStatusCountAggregateInputType | true
    }

  export interface ProductStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductStatus'], meta: { name: 'ProductStatus' } }
    /**
     * Find zero or one ProductStatus that matches the filter.
     * @param {ProductStatusFindUniqueArgs} args - Arguments to find a ProductStatus
     * @example
     * // Get one ProductStatus
     * const productStatus = await prisma.productStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductStatusFindUniqueArgs>(args: SelectSubset<T, ProductStatusFindUniqueArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductStatusFindUniqueOrThrowArgs} args - Arguments to find a ProductStatus
     * @example
     * // Get one ProductStatus
     * const productStatus = await prisma.productStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusFindFirstArgs} args - Arguments to find a ProductStatus
     * @example
     * // Get one ProductStatus
     * const productStatus = await prisma.productStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductStatusFindFirstArgs>(args?: SelectSubset<T, ProductStatusFindFirstArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusFindFirstOrThrowArgs} args - Arguments to find a ProductStatus
     * @example
     * // Get one ProductStatus
     * const productStatus = await prisma.productStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductStatuses
     * const productStatuses = await prisma.productStatus.findMany()
     * 
     * // Get first 10 ProductStatuses
     * const productStatuses = await prisma.productStatus.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const productStatusWithCodeOnly = await prisma.productStatus.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends ProductStatusFindManyArgs>(args?: SelectSubset<T, ProductStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductStatus.
     * @param {ProductStatusCreateArgs} args - Arguments to create a ProductStatus.
     * @example
     * // Create one ProductStatus
     * const ProductStatus = await prisma.productStatus.create({
     *   data: {
     *     // ... data to create a ProductStatus
     *   }
     * })
     * 
     */
    create<T extends ProductStatusCreateArgs>(args: SelectSubset<T, ProductStatusCreateArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductStatuses.
     * @param {ProductStatusCreateManyArgs} args - Arguments to create many ProductStatuses.
     * @example
     * // Create many ProductStatuses
     * const productStatus = await prisma.productStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductStatusCreateManyArgs>(args?: SelectSubset<T, ProductStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductStatus.
     * @param {ProductStatusDeleteArgs} args - Arguments to delete one ProductStatus.
     * @example
     * // Delete one ProductStatus
     * const ProductStatus = await prisma.productStatus.delete({
     *   where: {
     *     // ... filter to delete one ProductStatus
     *   }
     * })
     * 
     */
    delete<T extends ProductStatusDeleteArgs>(args: SelectSubset<T, ProductStatusDeleteArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductStatus.
     * @param {ProductStatusUpdateArgs} args - Arguments to update one ProductStatus.
     * @example
     * // Update one ProductStatus
     * const productStatus = await prisma.productStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductStatusUpdateArgs>(args: SelectSubset<T, ProductStatusUpdateArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductStatuses.
     * @param {ProductStatusDeleteManyArgs} args - Arguments to filter ProductStatuses to delete.
     * @example
     * // Delete a few ProductStatuses
     * const { count } = await prisma.productStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductStatusDeleteManyArgs>(args?: SelectSubset<T, ProductStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductStatuses
     * const productStatus = await prisma.productStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductStatusUpdateManyArgs>(args: SelectSubset<T, ProductStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductStatus.
     * @param {ProductStatusUpsertArgs} args - Arguments to update or create a ProductStatus.
     * @example
     * // Update or create a ProductStatus
     * const productStatus = await prisma.productStatus.upsert({
     *   create: {
     *     // ... data to create a ProductStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductStatus we want to update
     *   }
     * })
     */
    upsert<T extends ProductStatusUpsertArgs>(args: SelectSubset<T, ProductStatusUpsertArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusCountArgs} args - Arguments to filter ProductStatuses to count.
     * @example
     * // Count the number of ProductStatuses
     * const count = await prisma.productStatus.count({
     *   where: {
     *     // ... the filter for the ProductStatuses we want to count
     *   }
     * })
    **/
    count<T extends ProductStatusCountArgs>(
      args?: Subset<T, ProductStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductStatusAggregateArgs>(args: Subset<T, ProductStatusAggregateArgs>): Prisma.PrismaPromise<GetProductStatusAggregateType<T>>

    /**
     * Group by ProductStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductStatusGroupByArgs['orderBy'] }
        : { orderBy?: ProductStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductStatus model
   */
  readonly fields: ProductStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends ProductStatus$productsArgs<ExtArgs> = {}>(args?: Subset<T, ProductStatus$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductStatus model
   */
  interface ProductStatusFieldRefs {
    readonly code: FieldRef<"ProductStatus", 'String'>
    readonly name: FieldRef<"ProductStatus", 'String'>
    readonly description: FieldRef<"ProductStatus", 'String'>
    readonly color: FieldRef<"ProductStatus", 'String'>
    readonly createdAt: FieldRef<"ProductStatus", 'DateTime'>
    readonly createdBy: FieldRef<"ProductStatus", 'String'>
    readonly updatedAt: FieldRef<"ProductStatus", 'DateTime'>
    readonly updatedBy: FieldRef<"ProductStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductStatus findUnique
   */
  export type ProductStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * Filter, which ProductStatus to fetch.
     */
    where: ProductStatusWhereUniqueInput
  }

  /**
   * ProductStatus findUniqueOrThrow
   */
  export type ProductStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * Filter, which ProductStatus to fetch.
     */
    where: ProductStatusWhereUniqueInput
  }

  /**
   * ProductStatus findFirst
   */
  export type ProductStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * Filter, which ProductStatus to fetch.
     */
    where?: ProductStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductStatuses to fetch.
     */
    orderBy?: ProductStatusOrderByWithRelationInput | ProductStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductStatuses.
     */
    cursor?: ProductStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductStatuses.
     */
    distinct?: ProductStatusScalarFieldEnum | ProductStatusScalarFieldEnum[]
  }

  /**
   * ProductStatus findFirstOrThrow
   */
  export type ProductStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * Filter, which ProductStatus to fetch.
     */
    where?: ProductStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductStatuses to fetch.
     */
    orderBy?: ProductStatusOrderByWithRelationInput | ProductStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductStatuses.
     */
    cursor?: ProductStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductStatuses.
     */
    distinct?: ProductStatusScalarFieldEnum | ProductStatusScalarFieldEnum[]
  }

  /**
   * ProductStatus findMany
   */
  export type ProductStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * Filter, which ProductStatuses to fetch.
     */
    where?: ProductStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductStatuses to fetch.
     */
    orderBy?: ProductStatusOrderByWithRelationInput | ProductStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductStatuses.
     */
    cursor?: ProductStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductStatuses.
     */
    skip?: number
    distinct?: ProductStatusScalarFieldEnum | ProductStatusScalarFieldEnum[]
  }

  /**
   * ProductStatus create
   */
  export type ProductStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductStatus.
     */
    data: XOR<ProductStatusCreateInput, ProductStatusUncheckedCreateInput>
  }

  /**
   * ProductStatus createMany
   */
  export type ProductStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductStatuses.
     */
    data: ProductStatusCreateManyInput | ProductStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductStatus update
   */
  export type ProductStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductStatus.
     */
    data: XOR<ProductStatusUpdateInput, ProductStatusUncheckedUpdateInput>
    /**
     * Choose, which ProductStatus to update.
     */
    where: ProductStatusWhereUniqueInput
  }

  /**
   * ProductStatus updateMany
   */
  export type ProductStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductStatuses.
     */
    data: XOR<ProductStatusUpdateManyMutationInput, ProductStatusUncheckedUpdateManyInput>
    /**
     * Filter which ProductStatuses to update
     */
    where?: ProductStatusWhereInput
    /**
     * Limit how many ProductStatuses to update.
     */
    limit?: number
  }

  /**
   * ProductStatus upsert
   */
  export type ProductStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductStatus to update in case it exists.
     */
    where: ProductStatusWhereUniqueInput
    /**
     * In case the ProductStatus found by the `where` argument doesn't exist, create a new ProductStatus with this data.
     */
    create: XOR<ProductStatusCreateInput, ProductStatusUncheckedCreateInput>
    /**
     * In case the ProductStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductStatusUpdateInput, ProductStatusUncheckedUpdateInput>
  }

  /**
   * ProductStatus delete
   */
  export type ProductStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
    /**
     * Filter which ProductStatus to delete.
     */
    where: ProductStatusWhereUniqueInput
  }

  /**
   * ProductStatus deleteMany
   */
  export type ProductStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductStatuses to delete
     */
    where?: ProductStatusWhereInput
    /**
     * Limit how many ProductStatuses to delete.
     */
    limit?: number
  }

  /**
   * ProductStatus.products
   */
  export type ProductStatus$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * ProductStatus without action
   */
  export type ProductStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductStatus
     */
    select?: ProductStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductStatus
     */
    omit?: ProductStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductStatusInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    offerPrice: Decimal | null
    mainImageId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    offerPrice: Decimal | null
    mainImageId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    offerPrice: Decimal | null
    productTypeName: string | null
    productCategoryName: string | null
    brandName: string | null
    productStatusCode: string | null
    mainImageId: number | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    offerPrice: Decimal | null
    productTypeName: string | null
    productCategoryName: string | null
    brandName: string | null
    productStatusCode: string | null
    mainImageId: number | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    offerPrice: number
    productTypeName: number
    productCategoryName: number
    brandName: number
    productStatusCode: number
    mainImageId: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    offerPrice?: true
    mainImageId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    offerPrice?: true
    mainImageId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    offerPrice?: true
    productTypeName?: true
    productCategoryName?: true
    brandName?: true
    productStatusCode?: true
    mainImageId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    offerPrice?: true
    productTypeName?: true
    productCategoryName?: true
    brandName?: true
    productStatusCode?: true
    mainImageId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    offerPrice?: true
    productTypeName?: true
    productCategoryName?: true
    brandName?: true
    productStatusCode?: true
    mainImageId?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string | null
    price: Decimal
    offerPrice: Decimal | null
    productTypeName: string
    productCategoryName: string
    brandName: string | null
    productStatusCode: string
    mainImageId: number | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    offerPrice?: boolean
    productTypeName?: boolean
    productCategoryName?: boolean
    brandName?: boolean
    productStatusCode?: boolean
    mainImageId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    productType?: boolean | ProductTypeDefaultArgs<ExtArgs>
    productCategory?: boolean | ProductCategoryDefaultArgs<ExtArgs>
    brand?: boolean | Product$brandArgs<ExtArgs>
    productStatus?: boolean | ProductStatusDefaultArgs<ExtArgs>
    inventory?: boolean | Product$inventoryArgs<ExtArgs>
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    offerPrice?: boolean
    productTypeName?: boolean
    productCategoryName?: boolean
    brandName?: boolean
    productStatusCode?: boolean
    mainImageId?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "price" | "offerPrice" | "productTypeName" | "productCategoryName" | "brandName" | "productStatusCode" | "mainImageId" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productType?: boolean | ProductTypeDefaultArgs<ExtArgs>
    productCategory?: boolean | ProductCategoryDefaultArgs<ExtArgs>
    brand?: boolean | Product$brandArgs<ExtArgs>
    productStatus?: boolean | ProductStatusDefaultArgs<ExtArgs>
    inventory?: boolean | Product$inventoryArgs<ExtArgs>
    orderItems?: boolean | Product$orderItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      productType: Prisma.$ProductTypePayload<ExtArgs>
      productCategory: Prisma.$ProductCategoryPayload<ExtArgs>
      brand: Prisma.$BrandPayload<ExtArgs> | null
      productStatus: Prisma.$ProductStatusPayload<ExtArgs>
      inventory: Prisma.$InventoryPayload<ExtArgs> | null
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      price: Prisma.Decimal
      offerPrice: Prisma.Decimal | null
      productTypeName: string
      productCategoryName: string
      brandName: string | null
      productStatusCode: string
      mainImageId: number | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productType<T extends ProductTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductTypeDefaultArgs<ExtArgs>>): Prisma__ProductTypeClient<$Result.GetResult<Prisma.$ProductTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    productCategory<T extends ProductCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductCategoryDefaultArgs<ExtArgs>>): Prisma__ProductCategoryClient<$Result.GetResult<Prisma.$ProductCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    brand<T extends Product$brandArgs<ExtArgs> = {}>(args?: Subset<T, Product$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    productStatus<T extends ProductStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductStatusDefaultArgs<ExtArgs>>): Prisma__ProductStatusClient<$Result.GetResult<Prisma.$ProductStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventory<T extends Product$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Product$inventoryArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Product$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Decimal'>
    readonly offerPrice: FieldRef<"Product", 'Decimal'>
    readonly productTypeName: FieldRef<"Product", 'String'>
    readonly productCategoryName: FieldRef<"Product", 'String'>
    readonly brandName: FieldRef<"Product", 'String'>
    readonly productStatusCode: FieldRef<"Product", 'String'>
    readonly mainImageId: FieldRef<"Product", 'Int'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly createdBy: FieldRef<"Product", 'String'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly updatedBy: FieldRef<"Product", 'String'>
    readonly deletedAt: FieldRef<"Product", 'DateTime'>
    readonly deletedBy: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.brand
   */
  export type Product$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * Product.inventory
   */
  export type Product$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
  }

  /**
   * Product.orderItems
   */
  export type Product$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model DocumentType
   */

  export type AggregateDocumentType = {
    _count: DocumentTypeCountAggregateOutputType | null
    _avg: DocumentTypeAvgAggregateOutputType | null
    _sum: DocumentTypeSumAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  export type DocumentTypeAvgAggregateOutputType = {
    digitLength: number | null
  }

  export type DocumentTypeSumAggregateOutputType = {
    digitLength: number | null
  }

  export type DocumentTypeMinAggregateOutputType = {
    name: string | null
    description: string | null
    digitLength: number | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type DocumentTypeMaxAggregateOutputType = {
    name: string | null
    description: string | null
    digitLength: number | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type DocumentTypeCountAggregateOutputType = {
    name: number
    description: number
    digitLength: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type DocumentTypeAvgAggregateInputType = {
    digitLength?: true
  }

  export type DocumentTypeSumAggregateInputType = {
    digitLength?: true
  }

  export type DocumentTypeMinAggregateInputType = {
    name?: true
    description?: true
    digitLength?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type DocumentTypeMaxAggregateInputType = {
    name?: true
    description?: true
    digitLength?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type DocumentTypeCountAggregateInputType = {
    name?: true
    description?: true
    digitLength?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type DocumentTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentType to aggregate.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DocumentTypes
    **/
    _count?: true | DocumentTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type GetDocumentTypeAggregateType<T extends DocumentTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumentType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumentType[P]>
      : GetScalarType<T[P], AggregateDocumentType[P]>
  }




  export type DocumentTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentTypeWhereInput
    orderBy?: DocumentTypeOrderByWithAggregationInput | DocumentTypeOrderByWithAggregationInput[]
    by: DocumentTypeScalarFieldEnum[] | DocumentTypeScalarFieldEnum
    having?: DocumentTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentTypeCountAggregateInputType | true
    _avg?: DocumentTypeAvgAggregateInputType
    _sum?: DocumentTypeSumAggregateInputType
    _min?: DocumentTypeMinAggregateInputType
    _max?: DocumentTypeMaxAggregateInputType
  }

  export type DocumentTypeGroupByOutputType = {
    name: string
    description: string | null
    digitLength: number
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: DocumentTypeCountAggregateOutputType | null
    _avg: DocumentTypeAvgAggregateOutputType | null
    _sum: DocumentTypeSumAggregateOutputType | null
    _min: DocumentTypeMinAggregateOutputType | null
    _max: DocumentTypeMaxAggregateOutputType | null
  }

  type GetDocumentTypeGroupByPayload<T extends DocumentTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentTypeGroupByOutputType[P]>
        }
      >
    >


  export type DocumentTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    digitLength?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    users?: boolean | DocumentType$usersArgs<ExtArgs>
    customers?: boolean | DocumentType$customersArgs<ExtArgs>
    _count?: boolean | DocumentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documentType"]>



  export type DocumentTypeSelectScalar = {
    name?: boolean
    description?: boolean
    digitLength?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type DocumentTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "digitLength" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["documentType"]>
  export type DocumentTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DocumentType$usersArgs<ExtArgs>
    customers?: boolean | DocumentType$customersArgs<ExtArgs>
    _count?: boolean | DocumentTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DocumentTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DocumentType"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      digitLength: number
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["documentType"]>
    composites: {}
  }

  type DocumentTypeGetPayload<S extends boolean | null | undefined | DocumentTypeDefaultArgs> = $Result.GetResult<Prisma.$DocumentTypePayload, S>

  type DocumentTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentTypeCountAggregateInputType | true
    }

  export interface DocumentTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DocumentType'], meta: { name: 'DocumentType' } }
    /**
     * Find zero or one DocumentType that matches the filter.
     * @param {DocumentTypeFindUniqueArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentTypeFindUniqueArgs>(args: SelectSubset<T, DocumentTypeFindUniqueArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DocumentType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentTypeFindUniqueOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentTypeFindFirstArgs>(args?: SelectSubset<T, DocumentTypeFindFirstArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DocumentType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindFirstOrThrowArgs} args - Arguments to find a DocumentType
     * @example
     * // Get one DocumentType
     * const documentType = await prisma.documentType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DocumentTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DocumentTypes
     * const documentTypes = await prisma.documentType.findMany()
     * 
     * // Get first 10 DocumentTypes
     * const documentTypes = await prisma.documentType.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const documentTypeWithNameOnly = await prisma.documentType.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends DocumentTypeFindManyArgs>(args?: SelectSubset<T, DocumentTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DocumentType.
     * @param {DocumentTypeCreateArgs} args - Arguments to create a DocumentType.
     * @example
     * // Create one DocumentType
     * const DocumentType = await prisma.documentType.create({
     *   data: {
     *     // ... data to create a DocumentType
     *   }
     * })
     * 
     */
    create<T extends DocumentTypeCreateArgs>(args: SelectSubset<T, DocumentTypeCreateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DocumentTypes.
     * @param {DocumentTypeCreateManyArgs} args - Arguments to create many DocumentTypes.
     * @example
     * // Create many DocumentTypes
     * const documentType = await prisma.documentType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentTypeCreateManyArgs>(args?: SelectSubset<T, DocumentTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DocumentType.
     * @param {DocumentTypeDeleteArgs} args - Arguments to delete one DocumentType.
     * @example
     * // Delete one DocumentType
     * const DocumentType = await prisma.documentType.delete({
     *   where: {
     *     // ... filter to delete one DocumentType
     *   }
     * })
     * 
     */
    delete<T extends DocumentTypeDeleteArgs>(args: SelectSubset<T, DocumentTypeDeleteArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DocumentType.
     * @param {DocumentTypeUpdateArgs} args - Arguments to update one DocumentType.
     * @example
     * // Update one DocumentType
     * const documentType = await prisma.documentType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentTypeUpdateArgs>(args: SelectSubset<T, DocumentTypeUpdateArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DocumentTypes.
     * @param {DocumentTypeDeleteManyArgs} args - Arguments to filter DocumentTypes to delete.
     * @example
     * // Delete a few DocumentTypes
     * const { count } = await prisma.documentType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentTypeDeleteManyArgs>(args?: SelectSubset<T, DocumentTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DocumentTypes
     * const documentType = await prisma.documentType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentTypeUpdateManyArgs>(args: SelectSubset<T, DocumentTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DocumentType.
     * @param {DocumentTypeUpsertArgs} args - Arguments to update or create a DocumentType.
     * @example
     * // Update or create a DocumentType
     * const documentType = await prisma.documentType.upsert({
     *   create: {
     *     // ... data to create a DocumentType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DocumentType we want to update
     *   }
     * })
     */
    upsert<T extends DocumentTypeUpsertArgs>(args: SelectSubset<T, DocumentTypeUpsertArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DocumentTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeCountArgs} args - Arguments to filter DocumentTypes to count.
     * @example
     * // Count the number of DocumentTypes
     * const count = await prisma.documentType.count({
     *   where: {
     *     // ... the filter for the DocumentTypes we want to count
     *   }
     * })
    **/
    count<T extends DocumentTypeCountArgs>(
      args?: Subset<T, DocumentTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentTypeAggregateArgs>(args: Subset<T, DocumentTypeAggregateArgs>): Prisma.PrismaPromise<GetDocumentTypeAggregateType<T>>

    /**
     * Group by DocumentType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentTypeGroupByArgs['orderBy'] }
        : { orderBy?: DocumentTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DocumentType model
   */
  readonly fields: DocumentTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DocumentType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends DocumentType$usersArgs<ExtArgs> = {}>(args?: Subset<T, DocumentType$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customers<T extends DocumentType$customersArgs<ExtArgs> = {}>(args?: Subset<T, DocumentType$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DocumentType model
   */
  interface DocumentTypeFieldRefs {
    readonly name: FieldRef<"DocumentType", 'String'>
    readonly description: FieldRef<"DocumentType", 'String'>
    readonly digitLength: FieldRef<"DocumentType", 'Int'>
    readonly color: FieldRef<"DocumentType", 'String'>
    readonly isActive: FieldRef<"DocumentType", 'Boolean'>
    readonly createdAt: FieldRef<"DocumentType", 'DateTime'>
    readonly createdBy: FieldRef<"DocumentType", 'String'>
    readonly updatedAt: FieldRef<"DocumentType", 'DateTime'>
    readonly updatedBy: FieldRef<"DocumentType", 'String'>
    readonly deletedAt: FieldRef<"DocumentType", 'DateTime'>
    readonly deletedBy: FieldRef<"DocumentType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DocumentType findUnique
   */
  export type DocumentTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findUniqueOrThrow
   */
  export type DocumentTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType findFirst
   */
  export type DocumentTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findFirstOrThrow
   */
  export type DocumentTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentType to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DocumentTypes.
     */
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType findMany
   */
  export type DocumentTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter, which DocumentTypes to fetch.
     */
    where?: DocumentTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DocumentTypes to fetch.
     */
    orderBy?: DocumentTypeOrderByWithRelationInput | DocumentTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DocumentTypes.
     */
    cursor?: DocumentTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DocumentTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DocumentTypes.
     */
    skip?: number
    distinct?: DocumentTypeScalarFieldEnum | DocumentTypeScalarFieldEnum[]
  }

  /**
   * DocumentType create
   */
  export type DocumentTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a DocumentType.
     */
    data: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
  }

  /**
   * DocumentType createMany
   */
  export type DocumentTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DocumentTypes.
     */
    data: DocumentTypeCreateManyInput | DocumentTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DocumentType update
   */
  export type DocumentTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a DocumentType.
     */
    data: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
    /**
     * Choose, which DocumentType to update.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType updateMany
   */
  export type DocumentTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DocumentTypes.
     */
    data: XOR<DocumentTypeUpdateManyMutationInput, DocumentTypeUncheckedUpdateManyInput>
    /**
     * Filter which DocumentTypes to update
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to update.
     */
    limit?: number
  }

  /**
   * DocumentType upsert
   */
  export type DocumentTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the DocumentType to update in case it exists.
     */
    where: DocumentTypeWhereUniqueInput
    /**
     * In case the DocumentType found by the `where` argument doesn't exist, create a new DocumentType with this data.
     */
    create: XOR<DocumentTypeCreateInput, DocumentTypeUncheckedCreateInput>
    /**
     * In case the DocumentType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentTypeUpdateInput, DocumentTypeUncheckedUpdateInput>
  }

  /**
   * DocumentType delete
   */
  export type DocumentTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
    /**
     * Filter which DocumentType to delete.
     */
    where: DocumentTypeWhereUniqueInput
  }

  /**
   * DocumentType deleteMany
   */
  export type DocumentTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DocumentTypes to delete
     */
    where?: DocumentTypeWhereInput
    /**
     * Limit how many DocumentTypes to delete.
     */
    limit?: number
  }

  /**
   * DocumentType.users
   */
  export type DocumentType$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * DocumentType.customers
   */
  export type DocumentType$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * DocumentType without action
   */
  export type DocumentTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentType
     */
    select?: DocumentTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DocumentType
     */
    omit?: DocumentTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentTypeInclude<ExtArgs> | null
  }


  /**
   * Model AccountStatus
   */

  export type AggregateAccountStatus = {
    _count: AccountStatusCountAggregateOutputType | null
    _min: AccountStatusMinAggregateOutputType | null
    _max: AccountStatusMaxAggregateOutputType | null
  }

  export type AccountStatusMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type AccountStatusMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type AccountStatusCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type AccountStatusMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type AccountStatusMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type AccountStatusCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type AccountStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountStatus to aggregate.
     */
    where?: AccountStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountStatuses to fetch.
     */
    orderBy?: AccountStatusOrderByWithRelationInput | AccountStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountStatuses
    **/
    _count?: true | AccountStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountStatusMaxAggregateInputType
  }

  export type GetAccountStatusAggregateType<T extends AccountStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountStatus[P]>
      : GetScalarType<T[P], AggregateAccountStatus[P]>
  }




  export type AccountStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountStatusWhereInput
    orderBy?: AccountStatusOrderByWithAggregationInput | AccountStatusOrderByWithAggregationInput[]
    by: AccountStatusScalarFieldEnum[] | AccountStatusScalarFieldEnum
    having?: AccountStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountStatusCountAggregateInputType | true
    _min?: AccountStatusMinAggregateInputType
    _max?: AccountStatusMaxAggregateInputType
  }

  export type AccountStatusGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: AccountStatusCountAggregateOutputType | null
    _min: AccountStatusMinAggregateOutputType | null
    _max: AccountStatusMaxAggregateOutputType | null
  }

  type GetAccountStatusGroupByPayload<T extends AccountStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountStatusGroupByOutputType[P]>
            : GetScalarType<T[P], AccountStatusGroupByOutputType[P]>
        }
      >
    >


  export type AccountStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    users?: boolean | AccountStatus$usersArgs<ExtArgs>
    customers?: boolean | AccountStatus$customersArgs<ExtArgs>
    _count?: boolean | AccountStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountStatus"]>



  export type AccountStatusSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type AccountStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["accountStatus"]>
  export type AccountStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AccountStatus$usersArgs<ExtArgs>
    customers?: boolean | AccountStatus$customersArgs<ExtArgs>
    _count?: boolean | AccountStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AccountStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountStatus"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      customers: Prisma.$CustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["accountStatus"]>
    composites: {}
  }

  type AccountStatusGetPayload<S extends boolean | null | undefined | AccountStatusDefaultArgs> = $Result.GetResult<Prisma.$AccountStatusPayload, S>

  type AccountStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountStatusCountAggregateInputType | true
    }

  export interface AccountStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountStatus'], meta: { name: 'AccountStatus' } }
    /**
     * Find zero or one AccountStatus that matches the filter.
     * @param {AccountStatusFindUniqueArgs} args - Arguments to find a AccountStatus
     * @example
     * // Get one AccountStatus
     * const accountStatus = await prisma.accountStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountStatusFindUniqueArgs>(args: SelectSubset<T, AccountStatusFindUniqueArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AccountStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountStatusFindUniqueOrThrowArgs} args - Arguments to find a AccountStatus
     * @example
     * // Get one AccountStatus
     * const accountStatus = await prisma.accountStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusFindFirstArgs} args - Arguments to find a AccountStatus
     * @example
     * // Get one AccountStatus
     * const accountStatus = await prisma.accountStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountStatusFindFirstArgs>(args?: SelectSubset<T, AccountStatusFindFirstArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AccountStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusFindFirstOrThrowArgs} args - Arguments to find a AccountStatus
     * @example
     * // Get one AccountStatus
     * const accountStatus = await prisma.accountStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AccountStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountStatuses
     * const accountStatuses = await prisma.accountStatus.findMany()
     * 
     * // Get first 10 AccountStatuses
     * const accountStatuses = await prisma.accountStatus.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const accountStatusWithCodeOnly = await prisma.accountStatus.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends AccountStatusFindManyArgs>(args?: SelectSubset<T, AccountStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AccountStatus.
     * @param {AccountStatusCreateArgs} args - Arguments to create a AccountStatus.
     * @example
     * // Create one AccountStatus
     * const AccountStatus = await prisma.accountStatus.create({
     *   data: {
     *     // ... data to create a AccountStatus
     *   }
     * })
     * 
     */
    create<T extends AccountStatusCreateArgs>(args: SelectSubset<T, AccountStatusCreateArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AccountStatuses.
     * @param {AccountStatusCreateManyArgs} args - Arguments to create many AccountStatuses.
     * @example
     * // Create many AccountStatuses
     * const accountStatus = await prisma.accountStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountStatusCreateManyArgs>(args?: SelectSubset<T, AccountStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccountStatus.
     * @param {AccountStatusDeleteArgs} args - Arguments to delete one AccountStatus.
     * @example
     * // Delete one AccountStatus
     * const AccountStatus = await prisma.accountStatus.delete({
     *   where: {
     *     // ... filter to delete one AccountStatus
     *   }
     * })
     * 
     */
    delete<T extends AccountStatusDeleteArgs>(args: SelectSubset<T, AccountStatusDeleteArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AccountStatus.
     * @param {AccountStatusUpdateArgs} args - Arguments to update one AccountStatus.
     * @example
     * // Update one AccountStatus
     * const accountStatus = await prisma.accountStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountStatusUpdateArgs>(args: SelectSubset<T, AccountStatusUpdateArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AccountStatuses.
     * @param {AccountStatusDeleteManyArgs} args - Arguments to filter AccountStatuses to delete.
     * @example
     * // Delete a few AccountStatuses
     * const { count } = await prisma.accountStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountStatusDeleteManyArgs>(args?: SelectSubset<T, AccountStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountStatuses
     * const accountStatus = await prisma.accountStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountStatusUpdateManyArgs>(args: SelectSubset<T, AccountStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountStatus.
     * @param {AccountStatusUpsertArgs} args - Arguments to update or create a AccountStatus.
     * @example
     * // Update or create a AccountStatus
     * const accountStatus = await prisma.accountStatus.upsert({
     *   create: {
     *     // ... data to create a AccountStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountStatus we want to update
     *   }
     * })
     */
    upsert<T extends AccountStatusUpsertArgs>(args: SelectSubset<T, AccountStatusUpsertArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AccountStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusCountArgs} args - Arguments to filter AccountStatuses to count.
     * @example
     * // Count the number of AccountStatuses
     * const count = await prisma.accountStatus.count({
     *   where: {
     *     // ... the filter for the AccountStatuses we want to count
     *   }
     * })
    **/
    count<T extends AccountStatusCountArgs>(
      args?: Subset<T, AccountStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountStatusAggregateArgs>(args: Subset<T, AccountStatusAggregateArgs>): Prisma.PrismaPromise<GetAccountStatusAggregateType<T>>

    /**
     * Group by AccountStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountStatusGroupByArgs['orderBy'] }
        : { orderBy?: AccountStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountStatus model
   */
  readonly fields: AccountStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends AccountStatus$usersArgs<ExtArgs> = {}>(args?: Subset<T, AccountStatus$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customers<T extends AccountStatus$customersArgs<ExtArgs> = {}>(args?: Subset<T, AccountStatus$customersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountStatus model
   */
  interface AccountStatusFieldRefs {
    readonly code: FieldRef<"AccountStatus", 'String'>
    readonly name: FieldRef<"AccountStatus", 'String'>
    readonly description: FieldRef<"AccountStatus", 'String'>
    readonly color: FieldRef<"AccountStatus", 'String'>
    readonly createdAt: FieldRef<"AccountStatus", 'DateTime'>
    readonly createdBy: FieldRef<"AccountStatus", 'String'>
    readonly updatedAt: FieldRef<"AccountStatus", 'DateTime'>
    readonly updatedBy: FieldRef<"AccountStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AccountStatus findUnique
   */
  export type AccountStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * Filter, which AccountStatus to fetch.
     */
    where: AccountStatusWhereUniqueInput
  }

  /**
   * AccountStatus findUniqueOrThrow
   */
  export type AccountStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * Filter, which AccountStatus to fetch.
     */
    where: AccountStatusWhereUniqueInput
  }

  /**
   * AccountStatus findFirst
   */
  export type AccountStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * Filter, which AccountStatus to fetch.
     */
    where?: AccountStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountStatuses to fetch.
     */
    orderBy?: AccountStatusOrderByWithRelationInput | AccountStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountStatuses.
     */
    cursor?: AccountStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountStatuses.
     */
    distinct?: AccountStatusScalarFieldEnum | AccountStatusScalarFieldEnum[]
  }

  /**
   * AccountStatus findFirstOrThrow
   */
  export type AccountStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * Filter, which AccountStatus to fetch.
     */
    where?: AccountStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountStatuses to fetch.
     */
    orderBy?: AccountStatusOrderByWithRelationInput | AccountStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountStatuses.
     */
    cursor?: AccountStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountStatuses.
     */
    distinct?: AccountStatusScalarFieldEnum | AccountStatusScalarFieldEnum[]
  }

  /**
   * AccountStatus findMany
   */
  export type AccountStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * Filter, which AccountStatuses to fetch.
     */
    where?: AccountStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountStatuses to fetch.
     */
    orderBy?: AccountStatusOrderByWithRelationInput | AccountStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountStatuses.
     */
    cursor?: AccountStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountStatuses.
     */
    skip?: number
    distinct?: AccountStatusScalarFieldEnum | AccountStatusScalarFieldEnum[]
  }

  /**
   * AccountStatus create
   */
  export type AccountStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountStatus.
     */
    data: XOR<AccountStatusCreateInput, AccountStatusUncheckedCreateInput>
  }

  /**
   * AccountStatus createMany
   */
  export type AccountStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountStatuses.
     */
    data: AccountStatusCreateManyInput | AccountStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountStatus update
   */
  export type AccountStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountStatus.
     */
    data: XOR<AccountStatusUpdateInput, AccountStatusUncheckedUpdateInput>
    /**
     * Choose, which AccountStatus to update.
     */
    where: AccountStatusWhereUniqueInput
  }

  /**
   * AccountStatus updateMany
   */
  export type AccountStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountStatuses.
     */
    data: XOR<AccountStatusUpdateManyMutationInput, AccountStatusUncheckedUpdateManyInput>
    /**
     * Filter which AccountStatuses to update
     */
    where?: AccountStatusWhereInput
    /**
     * Limit how many AccountStatuses to update.
     */
    limit?: number
  }

  /**
   * AccountStatus upsert
   */
  export type AccountStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountStatus to update in case it exists.
     */
    where: AccountStatusWhereUniqueInput
    /**
     * In case the AccountStatus found by the `where` argument doesn't exist, create a new AccountStatus with this data.
     */
    create: XOR<AccountStatusCreateInput, AccountStatusUncheckedCreateInput>
    /**
     * In case the AccountStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountStatusUpdateInput, AccountStatusUncheckedUpdateInput>
  }

  /**
   * AccountStatus delete
   */
  export type AccountStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
    /**
     * Filter which AccountStatus to delete.
     */
    where: AccountStatusWhereUniqueInput
  }

  /**
   * AccountStatus deleteMany
   */
  export type AccountStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountStatuses to delete
     */
    where?: AccountStatusWhereInput
    /**
     * Limit how many AccountStatuses to delete.
     */
    limit?: number
  }

  /**
   * AccountStatus.users
   */
  export type AccountStatus$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * AccountStatus.customers
   */
  export type AccountStatus$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * AccountStatus without action
   */
  export type AccountStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountStatus
     */
    select?: AccountStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AccountStatus
     */
    omit?: AccountStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountStatusInclude<ExtArgs> | null
  }


  /**
   * Model PermissionCategory
   */

  export type AggregatePermissionCategory = {
    _count: PermissionCategoryCountAggregateOutputType | null
    _min: PermissionCategoryMinAggregateOutputType | null
    _max: PermissionCategoryMaxAggregateOutputType | null
  }

  export type PermissionCategoryMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type PermissionCategoryMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type PermissionCategoryCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type PermissionCategoryMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type PermissionCategoryMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type PermissionCategoryCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type PermissionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionCategory to aggregate.
     */
    where?: PermissionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionCategories to fetch.
     */
    orderBy?: PermissionCategoryOrderByWithRelationInput | PermissionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PermissionCategories
    **/
    _count?: true | PermissionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionCategoryMaxAggregateInputType
  }

  export type GetPermissionCategoryAggregateType<T extends PermissionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissionCategory[P]>
      : GetScalarType<T[P], AggregatePermissionCategory[P]>
  }




  export type PermissionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionCategoryWhereInput
    orderBy?: PermissionCategoryOrderByWithAggregationInput | PermissionCategoryOrderByWithAggregationInput[]
    by: PermissionCategoryScalarFieldEnum[] | PermissionCategoryScalarFieldEnum
    having?: PermissionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCategoryCountAggregateInputType | true
    _min?: PermissionCategoryMinAggregateInputType
    _max?: PermissionCategoryMaxAggregateInputType
  }

  export type PermissionCategoryGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: PermissionCategoryCountAggregateOutputType | null
    _min: PermissionCategoryMinAggregateOutputType | null
    _max: PermissionCategoryMaxAggregateOutputType | null
  }

  type GetPermissionCategoryGroupByPayload<T extends PermissionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type PermissionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    permissions?: boolean | PermissionCategory$permissionsArgs<ExtArgs>
    _count?: boolean | PermissionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissionCategory"]>



  export type PermissionCategorySelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type PermissionCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["permissionCategory"]>
  export type PermissionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | PermissionCategory$permissionsArgs<ExtArgs>
    _count?: boolean | PermissionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PermissionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PermissionCategory"
    objects: {
      permissions: Prisma.$PermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["permissionCategory"]>
    composites: {}
  }

  type PermissionCategoryGetPayload<S extends boolean | null | undefined | PermissionCategoryDefaultArgs> = $Result.GetResult<Prisma.$PermissionCategoryPayload, S>

  type PermissionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCategoryCountAggregateInputType | true
    }

  export interface PermissionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PermissionCategory'], meta: { name: 'PermissionCategory' } }
    /**
     * Find zero or one PermissionCategory that matches the filter.
     * @param {PermissionCategoryFindUniqueArgs} args - Arguments to find a PermissionCategory
     * @example
     * // Get one PermissionCategory
     * const permissionCategory = await prisma.permissionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionCategoryFindUniqueArgs>(args: SelectSubset<T, PermissionCategoryFindUniqueArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PermissionCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionCategoryFindUniqueOrThrowArgs} args - Arguments to find a PermissionCategory
     * @example
     * // Get one PermissionCategory
     * const permissionCategory = await prisma.permissionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PermissionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryFindFirstArgs} args - Arguments to find a PermissionCategory
     * @example
     * // Get one PermissionCategory
     * const permissionCategory = await prisma.permissionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionCategoryFindFirstArgs>(args?: SelectSubset<T, PermissionCategoryFindFirstArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PermissionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryFindFirstOrThrowArgs} args - Arguments to find a PermissionCategory
     * @example
     * // Get one PermissionCategory
     * const permissionCategory = await prisma.permissionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PermissionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PermissionCategories
     * const permissionCategories = await prisma.permissionCategory.findMany()
     * 
     * // Get first 10 PermissionCategories
     * const permissionCategories = await prisma.permissionCategory.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const permissionCategoryWithCodeOnly = await prisma.permissionCategory.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends PermissionCategoryFindManyArgs>(args?: SelectSubset<T, PermissionCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PermissionCategory.
     * @param {PermissionCategoryCreateArgs} args - Arguments to create a PermissionCategory.
     * @example
     * // Create one PermissionCategory
     * const PermissionCategory = await prisma.permissionCategory.create({
     *   data: {
     *     // ... data to create a PermissionCategory
     *   }
     * })
     * 
     */
    create<T extends PermissionCategoryCreateArgs>(args: SelectSubset<T, PermissionCategoryCreateArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PermissionCategories.
     * @param {PermissionCategoryCreateManyArgs} args - Arguments to create many PermissionCategories.
     * @example
     * // Create many PermissionCategories
     * const permissionCategory = await prisma.permissionCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCategoryCreateManyArgs>(args?: SelectSubset<T, PermissionCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PermissionCategory.
     * @param {PermissionCategoryDeleteArgs} args - Arguments to delete one PermissionCategory.
     * @example
     * // Delete one PermissionCategory
     * const PermissionCategory = await prisma.permissionCategory.delete({
     *   where: {
     *     // ... filter to delete one PermissionCategory
     *   }
     * })
     * 
     */
    delete<T extends PermissionCategoryDeleteArgs>(args: SelectSubset<T, PermissionCategoryDeleteArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PermissionCategory.
     * @param {PermissionCategoryUpdateArgs} args - Arguments to update one PermissionCategory.
     * @example
     * // Update one PermissionCategory
     * const permissionCategory = await prisma.permissionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionCategoryUpdateArgs>(args: SelectSubset<T, PermissionCategoryUpdateArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PermissionCategories.
     * @param {PermissionCategoryDeleteManyArgs} args - Arguments to filter PermissionCategories to delete.
     * @example
     * // Delete a few PermissionCategories
     * const { count } = await prisma.permissionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionCategoryDeleteManyArgs>(args?: SelectSubset<T, PermissionCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PermissionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PermissionCategories
     * const permissionCategory = await prisma.permissionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionCategoryUpdateManyArgs>(args: SelectSubset<T, PermissionCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PermissionCategory.
     * @param {PermissionCategoryUpsertArgs} args - Arguments to update or create a PermissionCategory.
     * @example
     * // Update or create a PermissionCategory
     * const permissionCategory = await prisma.permissionCategory.upsert({
     *   create: {
     *     // ... data to create a PermissionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PermissionCategory we want to update
     *   }
     * })
     */
    upsert<T extends PermissionCategoryUpsertArgs>(args: SelectSubset<T, PermissionCategoryUpsertArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PermissionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryCountArgs} args - Arguments to filter PermissionCategories to count.
     * @example
     * // Count the number of PermissionCategories
     * const count = await prisma.permissionCategory.count({
     *   where: {
     *     // ... the filter for the PermissionCategories we want to count
     *   }
     * })
    **/
    count<T extends PermissionCategoryCountArgs>(
      args?: Subset<T, PermissionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PermissionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionCategoryAggregateArgs>(args: Subset<T, PermissionCategoryAggregateArgs>): Prisma.PrismaPromise<GetPermissionCategoryAggregateType<T>>

    /**
     * Group by PermissionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: PermissionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PermissionCategory model
   */
  readonly fields: PermissionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PermissionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends PermissionCategory$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, PermissionCategory$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PermissionCategory model
   */
  interface PermissionCategoryFieldRefs {
    readonly code: FieldRef<"PermissionCategory", 'String'>
    readonly name: FieldRef<"PermissionCategory", 'String'>
    readonly description: FieldRef<"PermissionCategory", 'String'>
    readonly color: FieldRef<"PermissionCategory", 'String'>
    readonly createdAt: FieldRef<"PermissionCategory", 'DateTime'>
    readonly createdBy: FieldRef<"PermissionCategory", 'String'>
    readonly updatedAt: FieldRef<"PermissionCategory", 'DateTime'>
    readonly updatedBy: FieldRef<"PermissionCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PermissionCategory findUnique
   */
  export type PermissionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PermissionCategory to fetch.
     */
    where: PermissionCategoryWhereUniqueInput
  }

  /**
   * PermissionCategory findUniqueOrThrow
   */
  export type PermissionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PermissionCategory to fetch.
     */
    where: PermissionCategoryWhereUniqueInput
  }

  /**
   * PermissionCategory findFirst
   */
  export type PermissionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PermissionCategory to fetch.
     */
    where?: PermissionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionCategories to fetch.
     */
    orderBy?: PermissionCategoryOrderByWithRelationInput | PermissionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionCategories.
     */
    cursor?: PermissionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionCategories.
     */
    distinct?: PermissionCategoryScalarFieldEnum | PermissionCategoryScalarFieldEnum[]
  }

  /**
   * PermissionCategory findFirstOrThrow
   */
  export type PermissionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PermissionCategory to fetch.
     */
    where?: PermissionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionCategories to fetch.
     */
    orderBy?: PermissionCategoryOrderByWithRelationInput | PermissionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionCategories.
     */
    cursor?: PermissionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionCategories.
     */
    distinct?: PermissionCategoryScalarFieldEnum | PermissionCategoryScalarFieldEnum[]
  }

  /**
   * PermissionCategory findMany
   */
  export type PermissionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which PermissionCategories to fetch.
     */
    where?: PermissionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionCategories to fetch.
     */
    orderBy?: PermissionCategoryOrderByWithRelationInput | PermissionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PermissionCategories.
     */
    cursor?: PermissionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionCategories.
     */
    skip?: number
    distinct?: PermissionCategoryScalarFieldEnum | PermissionCategoryScalarFieldEnum[]
  }

  /**
   * PermissionCategory create
   */
  export type PermissionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PermissionCategory.
     */
    data: XOR<PermissionCategoryCreateInput, PermissionCategoryUncheckedCreateInput>
  }

  /**
   * PermissionCategory createMany
   */
  export type PermissionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PermissionCategories.
     */
    data: PermissionCategoryCreateManyInput | PermissionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PermissionCategory update
   */
  export type PermissionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PermissionCategory.
     */
    data: XOR<PermissionCategoryUpdateInput, PermissionCategoryUncheckedUpdateInput>
    /**
     * Choose, which PermissionCategory to update.
     */
    where: PermissionCategoryWhereUniqueInput
  }

  /**
   * PermissionCategory updateMany
   */
  export type PermissionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PermissionCategories.
     */
    data: XOR<PermissionCategoryUpdateManyMutationInput, PermissionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which PermissionCategories to update
     */
    where?: PermissionCategoryWhereInput
    /**
     * Limit how many PermissionCategories to update.
     */
    limit?: number
  }

  /**
   * PermissionCategory upsert
   */
  export type PermissionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PermissionCategory to update in case it exists.
     */
    where: PermissionCategoryWhereUniqueInput
    /**
     * In case the PermissionCategory found by the `where` argument doesn't exist, create a new PermissionCategory with this data.
     */
    create: XOR<PermissionCategoryCreateInput, PermissionCategoryUncheckedCreateInput>
    /**
     * In case the PermissionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionCategoryUpdateInput, PermissionCategoryUncheckedUpdateInput>
  }

  /**
   * PermissionCategory delete
   */
  export type PermissionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
    /**
     * Filter which PermissionCategory to delete.
     */
    where: PermissionCategoryWhereUniqueInput
  }

  /**
   * PermissionCategory deleteMany
   */
  export type PermissionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionCategories to delete
     */
    where?: PermissionCategoryWhereInput
    /**
     * Limit how many PermissionCategories to delete.
     */
    limit?: number
  }

  /**
   * PermissionCategory.permissions
   */
  export type PermissionCategory$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * PermissionCategory without action
   */
  export type PermissionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCategory
     */
    select?: PermissionCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PermissionCategory
     */
    omit?: PermissionCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    permissionCategoryCode: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    permissionCategoryCode: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type PermissionCountAggregateOutputType = {
    code: number
    name: number
    description: number
    permissionCategoryCode: number
    createdAt: number
    createdBy: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    permissionCategoryCode?: true
    createdAt?: true
    createdBy?: true
  }

  export type PermissionMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    permissionCategoryCode?: true
    createdAt?: true
    createdBy?: true
  }

  export type PermissionCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    permissionCategoryCode?: true
    createdAt?: true
    createdBy?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    code: string
    name: string
    description: string | null
    permissionCategoryCode: string
    createdAt: Date
    createdBy: string
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    permissionCategoryCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    permissioncategory?: boolean | PermissionCategoryDefaultArgs<ExtArgs>
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>



  export type PermissionSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    permissionCategoryCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "permissionCategoryCode" | "createdAt" | "createdBy", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissioncategory?: boolean | PermissionCategoryDefaultArgs<ExtArgs>
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      permissioncategory: Prisma.$PermissionCategoryPayload<ExtArgs>
      rolePermissions: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      permissionCategoryCode: string
      createdAt: Date
      createdBy: string
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const permissionWithCodeOnly = await prisma.permission.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissioncategory<T extends PermissionCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionCategoryDefaultArgs<ExtArgs>>): Prisma__PermissionCategoryClient<$Result.GetResult<Prisma.$PermissionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rolePermissions<T extends Permission$rolePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly code: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly permissionCategoryCode: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly createdBy: FieldRef<"Permission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.rolePermissions
   */
  export type Permission$rolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type RoleMaxAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type RoleCountAggregateOutputType = {
    name: number
    description: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type RoleMaxAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type RoleCountAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    name: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>



  export type RoleSelectScalar = {
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const roleWithNameOnly = await prisma.role.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly color: FieldRef<"Role", 'String'>
    readonly isActive: FieldRef<"Role", 'Boolean'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly createdBy: FieldRef<"Role", 'String'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
    readonly updatedBy: FieldRef<"Role", 'String'>
    readonly deletedAt: FieldRef<"Role", 'DateTime'>
    readonly deletedBy: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _avg: RolePermissionAvgAggregateOutputType | null
    _sum: RolePermissionSumAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type RolePermissionSumAggregateOutputType = {
    id: number | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: number | null
    roleName: string | null
    permissionCode: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: number | null
    roleName: string | null
    permissionCode: string | null
    createdAt: Date | null
    createdBy: string | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    roleName: number
    permissionCode: number
    createdAt: number
    createdBy: number
    _all: number
  }


  export type RolePermissionAvgAggregateInputType = {
    id?: true
  }

  export type RolePermissionSumAggregateInputType = {
    id?: true
  }

  export type RolePermissionMinAggregateInputType = {
    id?: true
    roleName?: true
    permissionCode?: true
    createdAt?: true
    createdBy?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    roleName?: true
    permissionCode?: true
    createdAt?: true
    createdBy?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    roleName?: true
    permissionCode?: true
    createdAt?: true
    createdBy?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _avg?: RolePermissionAvgAggregateInputType
    _sum?: RolePermissionSumAggregateInputType
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: number
    roleName: string
    permissionCode: string
    createdAt: Date
    createdBy: string
    _count: RolePermissionCountAggregateOutputType | null
    _avg: RolePermissionAvgAggregateOutputType | null
    _sum: RolePermissionSumAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleName?: boolean
    permissionCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>



  export type RolePermissionSelectScalar = {
    id?: boolean
    roleName?: boolean
    permissionCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
  }

  export type RolePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roleName" | "permissionCode" | "createdAt" | "createdBy", ExtArgs["result"]["rolePermission"]>
  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roleName: string
      permissionCode: string
      createdAt: Date
      createdBy: string
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'Int'>
    readonly roleName: FieldRef<"RolePermission", 'String'>
    readonly permissionCode: FieldRef<"RolePermission", 'String'>
    readonly createdAt: FieldRef<"RolePermission", 'DateTime'>
    readonly createdBy: FieldRef<"RolePermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to update.
     */
    limit?: number
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to delete.
     */
    limit?: number
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    document: string | null
    username: string | null
    email: string | null
    password: string | null
    pin: string | null
    documentTypeName: string | null
    roleName: string | null
    accountStatusCode: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type UserMaxAggregateOutputType = {
    document: string | null
    username: string | null
    email: string | null
    password: string | null
    pin: string | null
    documentTypeName: string | null
    roleName: string | null
    accountStatusCode: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type UserCountAggregateOutputType = {
    document: number
    username: number
    email: number
    password: number
    pin: number
    documentTypeName: number
    roleName: number
    accountStatusCode: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    document?: true
    username?: true
    email?: true
    password?: true
    pin?: true
    documentTypeName?: true
    roleName?: true
    accountStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type UserMaxAggregateInputType = {
    document?: true
    username?: true
    email?: true
    password?: true
    pin?: true
    documentTypeName?: true
    roleName?: true
    accountStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type UserCountAggregateInputType = {
    document?: true
    username?: true
    email?: true
    password?: true
    pin?: true
    documentTypeName?: true
    roleName?: true
    accountStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    document: string
    username: string
    email: string
    password: string
    pin: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode: string
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    document?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    pin?: boolean
    documentTypeName?: boolean
    roleName?: boolean
    accountStatusCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    accountStatus?: boolean | AccountStatusDefaultArgs<ExtArgs>
    createdThemes?: boolean | User$createdThemesArgs<ExtArgs>
    combinedTables?: boolean | User$combinedTablesArgs<ExtArgs>
    releasedTables?: boolean | User$releasedTablesArgs<ExtArgs>
    userProfile?: boolean | User$userProfileArgs<ExtArgs>
    commandOpener?: boolean | User$commandOpenerArgs<ExtArgs>
    commandCloser?: boolean | User$commandCloserArgs<ExtArgs>
    orderCreator?: boolean | User$orderCreatorArgs<ExtArgs>
    orderCloser?: boolean | User$orderCloserArgs<ExtArgs>
    openedCashBoxes?: boolean | User$openedCashBoxesArgs<ExtArgs>
    closedCashBoxes?: boolean | User$closedCashBoxesArgs<ExtArgs>
    cashBoxMovements?: boolean | User$cashBoxMovementsArgs<ExtArgs>
    paymentsReceived?: boolean | User$paymentsReceivedArgs<ExtArgs>
    inventoryMovements?: boolean | User$inventoryMovementsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    document?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    pin?: boolean
    documentTypeName?: boolean
    roleName?: boolean
    accountStatusCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"document" | "username" | "email" | "password" | "pin" | "documentTypeName" | "roleName" | "accountStatusCode" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    accountStatus?: boolean | AccountStatusDefaultArgs<ExtArgs>
    createdThemes?: boolean | User$createdThemesArgs<ExtArgs>
    combinedTables?: boolean | User$combinedTablesArgs<ExtArgs>
    releasedTables?: boolean | User$releasedTablesArgs<ExtArgs>
    userProfile?: boolean | User$userProfileArgs<ExtArgs>
    commandOpener?: boolean | User$commandOpenerArgs<ExtArgs>
    commandCloser?: boolean | User$commandCloserArgs<ExtArgs>
    orderCreator?: boolean | User$orderCreatorArgs<ExtArgs>
    orderCloser?: boolean | User$orderCloserArgs<ExtArgs>
    openedCashBoxes?: boolean | User$openedCashBoxesArgs<ExtArgs>
    closedCashBoxes?: boolean | User$closedCashBoxesArgs<ExtArgs>
    cashBoxMovements?: boolean | User$cashBoxMovementsArgs<ExtArgs>
    paymentsReceived?: boolean | User$paymentsReceivedArgs<ExtArgs>
    inventoryMovements?: boolean | User$inventoryMovementsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    logs?: boolean | User$logsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      documentType: Prisma.$DocumentTypePayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
      accountStatus: Prisma.$AccountStatusPayload<ExtArgs>
      createdThemes: Prisma.$ThemePayload<ExtArgs>[]
      combinedTables: Prisma.$CombineTablePayload<ExtArgs>[]
      releasedTables: Prisma.$CombineTablePayload<ExtArgs>[]
      userProfile: Prisma.$userProfilePayload<ExtArgs> | null
      commandOpener: Prisma.$CommandPayload<ExtArgs>[]
      commandCloser: Prisma.$CommandPayload<ExtArgs>[]
      orderCreator: Prisma.$OrderPayload<ExtArgs>[]
      orderCloser: Prisma.$OrderPayload<ExtArgs>[]
      openedCashBoxes: Prisma.$CashBoxPayload<ExtArgs>[]
      closedCashBoxes: Prisma.$CashBoxPayload<ExtArgs>[]
      cashBoxMovements: Prisma.$CashBoxMovementPayload<ExtArgs>[]
      paymentsReceived: Prisma.$PaymentPayload<ExtArgs>[]
      inventoryMovements: Prisma.$InventoryMovementPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      document: string
      username: string
      email: string
      password: string
      pin: string | null
      documentTypeName: string
      roleName: string
      accountStatusCode: string
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `document`
     * const userWithDocumentOnly = await prisma.user.findMany({ select: { document: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentType<T extends DocumentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTypeDefaultArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accountStatus<T extends AccountStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountStatusDefaultArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdThemes<T extends User$createdThemesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdThemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    combinedTables<T extends User$combinedTablesArgs<ExtArgs> = {}>(args?: Subset<T, User$combinedTablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    releasedTables<T extends User$releasedTablesArgs<ExtArgs> = {}>(args?: Subset<T, User$releasedTablesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userProfile<T extends User$userProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$userProfileArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    commandOpener<T extends User$commandOpenerArgs<ExtArgs> = {}>(args?: Subset<T, User$commandOpenerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    commandCloser<T extends User$commandCloserArgs<ExtArgs> = {}>(args?: Subset<T, User$commandCloserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderCreator<T extends User$orderCreatorArgs<ExtArgs> = {}>(args?: Subset<T, User$orderCreatorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderCloser<T extends User$orderCloserArgs<ExtArgs> = {}>(args?: Subset<T, User$orderCloserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    openedCashBoxes<T extends User$openedCashBoxesArgs<ExtArgs> = {}>(args?: Subset<T, User$openedCashBoxesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    closedCashBoxes<T extends User$closedCashBoxesArgs<ExtArgs> = {}>(args?: Subset<T, User$closedCashBoxesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cashBoxMovements<T extends User$cashBoxMovementsArgs<ExtArgs> = {}>(args?: Subset<T, User$cashBoxMovementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentsReceived<T extends User$paymentsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inventoryMovements<T extends User$inventoryMovementsArgs<ExtArgs> = {}>(args?: Subset<T, User$inventoryMovementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends User$logsArgs<ExtArgs> = {}>(args?: Subset<T, User$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly document: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly pin: FieldRef<"User", 'String'>
    readonly documentTypeName: FieldRef<"User", 'String'>
    readonly roleName: FieldRef<"User", 'String'>
    readonly accountStatusCode: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly createdBy: FieldRef<"User", 'String'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly updatedBy: FieldRef<"User", 'String'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
    readonly deletedBy: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdThemes
   */
  export type User$createdThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    where?: ThemeWhereInput
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    cursor?: ThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * User.combinedTables
   */
  export type User$combinedTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    where?: CombineTableWhereInput
    orderBy?: CombineTableOrderByWithRelationInput | CombineTableOrderByWithRelationInput[]
    cursor?: CombineTableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CombineTableScalarFieldEnum | CombineTableScalarFieldEnum[]
  }

  /**
   * User.releasedTables
   */
  export type User$releasedTablesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    where?: CombineTableWhereInput
    orderBy?: CombineTableOrderByWithRelationInput | CombineTableOrderByWithRelationInput[]
    cursor?: CombineTableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CombineTableScalarFieldEnum | CombineTableScalarFieldEnum[]
  }

  /**
   * User.userProfile
   */
  export type User$userProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    where?: userProfileWhereInput
  }

  /**
   * User.commandOpener
   */
  export type User$commandOpenerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    where?: CommandWhereInput
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    cursor?: CommandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * User.commandCloser
   */
  export type User$commandCloserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    where?: CommandWhereInput
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    cursor?: CommandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * User.orderCreator
   */
  export type User$orderCreatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.orderCloser
   */
  export type User$orderCloserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.openedCashBoxes
   */
  export type User$openedCashBoxesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    where?: CashBoxWhereInput
    orderBy?: CashBoxOrderByWithRelationInput | CashBoxOrderByWithRelationInput[]
    cursor?: CashBoxWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashBoxScalarFieldEnum | CashBoxScalarFieldEnum[]
  }

  /**
   * User.closedCashBoxes
   */
  export type User$closedCashBoxesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    where?: CashBoxWhereInput
    orderBy?: CashBoxOrderByWithRelationInput | CashBoxOrderByWithRelationInput[]
    cursor?: CashBoxWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashBoxScalarFieldEnum | CashBoxScalarFieldEnum[]
  }

  /**
   * User.cashBoxMovements
   */
  export type User$cashBoxMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    where?: CashBoxMovementWhereInput
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    cursor?: CashBoxMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashBoxMovementScalarFieldEnum | CashBoxMovementScalarFieldEnum[]
  }

  /**
   * User.paymentsReceived
   */
  export type User$paymentsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User.inventoryMovements
   */
  export type User$inventoryMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    where?: InventoryMovementWhereInput
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    cursor?: InventoryMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryMovementScalarFieldEnum | InventoryMovementScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.logs
   */
  export type User$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model userProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    id: number | null
    salary: Decimal | null
  }

  export type UserProfileSumAggregateOutputType = {
    id: number | null
    salary: Decimal | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: number | null
    userDocument: string | null
    fullName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    hireDate: Date | null
    salary: Decimal | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    themeName: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: number | null
    userDocument: string | null
    fullName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    hireDate: Date | null
    salary: Decimal | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    themeName: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userDocument: number
    fullName: number
    phoneNumber: number
    birthDate: number
    hireDate: number
    salary: number
    emergencyContactName: number
    emergencyContactPhone: number
    themeName: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    id?: true
    salary?: true
  }

  export type UserProfileSumAggregateInputType = {
    id?: true
    salary?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    userDocument?: true
    fullName?: true
    phoneNumber?: true
    birthDate?: true
    hireDate?: true
    salary?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    themeName?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userDocument?: true
    fullName?: true
    phoneNumber?: true
    birthDate?: true
    hireDate?: true
    salary?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    themeName?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userDocument?: true
    fullName?: true
    phoneNumber?: true
    birthDate?: true
    hireDate?: true
    salary?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    themeName?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userProfile to aggregate.
     */
    where?: userProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userProfiles to fetch.
     */
    orderBy?: userProfileOrderByWithRelationInput | userProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type userProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userProfileWhereInput
    orderBy?: userProfileOrderByWithAggregationInput | userProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: userProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: number
    userDocument: string
    fullName: string
    phoneNumber: string | null
    birthDate: Date | null
    hireDate: Date | null
    salary: Decimal | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    themeName: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends userProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type userProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userDocument?: boolean
    fullName?: boolean
    phoneNumber?: boolean
    birthDate?: boolean
    hireDate?: boolean
    salary?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    themeName?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    theme?: boolean | userProfile$themeArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>



  export type userProfileSelectScalar = {
    id?: boolean
    userDocument?: boolean
    fullName?: boolean
    phoneNumber?: boolean
    birthDate?: boolean
    hireDate?: boolean
    salary?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    themeName?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type userProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userDocument" | "fullName" | "phoneNumber" | "birthDate" | "hireDate" | "salary" | "emergencyContactName" | "emergencyContactPhone" | "themeName" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["userProfile"]>
  export type userProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    theme?: boolean | userProfile$themeArgs<ExtArgs>
  }

  export type $userProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      theme: Prisma.$ThemePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userDocument: string
      fullName: string
      phoneNumber: string | null
      birthDate: Date | null
      hireDate: Date | null
      salary: Prisma.Decimal | null
      emergencyContactName: string | null
      emergencyContactPhone: string | null
      themeName: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type userProfileGetPayload<S extends boolean | null | undefined | userProfileDefaultArgs> = $Result.GetResult<Prisma.$userProfilePayload, S>

  type userProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface userProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userProfile'], meta: { name: 'userProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {userProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userProfileFindUniqueArgs>(args: SelectSubset<T, userProfileFindUniqueArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, userProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userProfileFindFirstArgs>(args?: SelectSubset<T, userProfileFindFirstArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, userProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userProfileFindManyArgs>(args?: SelectSubset<T, userProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfile.
     * @param {userProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends userProfileCreateArgs>(args: SelectSubset<T, userProfileCreateArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfiles.
     * @param {userProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userProfileCreateManyArgs>(args?: SelectSubset<T, userProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserProfile.
     * @param {userProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends userProfileDeleteArgs>(args: SelectSubset<T, userProfileDeleteArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfile.
     * @param {userProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userProfileUpdateArgs>(args: SelectSubset<T, userProfileUpdateArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfiles.
     * @param {userProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userProfileDeleteManyArgs>(args?: SelectSubset<T, userProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userProfileUpdateManyArgs>(args: SelectSubset<T, userProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {userProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends userProfileUpsertArgs>(args: SelectSubset<T, userProfileUpsertArgs<ExtArgs>>): Prisma__userProfileClient<$Result.GetResult<Prisma.$userProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends userProfileCountArgs>(
      args?: Subset<T, userProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userProfileGroupByArgs['orderBy'] }
        : { orderBy?: userProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userProfile model
   */
  readonly fields: userProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    theme<T extends userProfile$themeArgs<ExtArgs> = {}>(args?: Subset<T, userProfile$themeArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userProfile model
   */
  interface userProfileFieldRefs {
    readonly id: FieldRef<"userProfile", 'Int'>
    readonly userDocument: FieldRef<"userProfile", 'String'>
    readonly fullName: FieldRef<"userProfile", 'String'>
    readonly phoneNumber: FieldRef<"userProfile", 'String'>
    readonly birthDate: FieldRef<"userProfile", 'DateTime'>
    readonly hireDate: FieldRef<"userProfile", 'DateTime'>
    readonly salary: FieldRef<"userProfile", 'Decimal'>
    readonly emergencyContactName: FieldRef<"userProfile", 'String'>
    readonly emergencyContactPhone: FieldRef<"userProfile", 'String'>
    readonly themeName: FieldRef<"userProfile", 'String'>
    readonly createdAt: FieldRef<"userProfile", 'DateTime'>
    readonly createdBy: FieldRef<"userProfile", 'String'>
    readonly updatedAt: FieldRef<"userProfile", 'DateTime'>
    readonly updatedBy: FieldRef<"userProfile", 'String'>
    readonly deletedAt: FieldRef<"userProfile", 'DateTime'>
    readonly deletedBy: FieldRef<"userProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * userProfile findUnique
   */
  export type userProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * Filter, which userProfile to fetch.
     */
    where: userProfileWhereUniqueInput
  }

  /**
   * userProfile findUniqueOrThrow
   */
  export type userProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * Filter, which userProfile to fetch.
     */
    where: userProfileWhereUniqueInput
  }

  /**
   * userProfile findFirst
   */
  export type userProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * Filter, which userProfile to fetch.
     */
    where?: userProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userProfiles to fetch.
     */
    orderBy?: userProfileOrderByWithRelationInput | userProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userProfiles.
     */
    cursor?: userProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * userProfile findFirstOrThrow
   */
  export type userProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * Filter, which userProfile to fetch.
     */
    where?: userProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userProfiles to fetch.
     */
    orderBy?: userProfileOrderByWithRelationInput | userProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userProfiles.
     */
    cursor?: userProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * userProfile findMany
   */
  export type userProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * Filter, which userProfiles to fetch.
     */
    where?: userProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userProfiles to fetch.
     */
    orderBy?: userProfileOrderByWithRelationInput | userProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userProfiles.
     */
    cursor?: userProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * userProfile create
   */
  export type userProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a userProfile.
     */
    data: XOR<userProfileCreateInput, userProfileUncheckedCreateInput>
  }

  /**
   * userProfile createMany
   */
  export type userProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userProfiles.
     */
    data: userProfileCreateManyInput | userProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userProfile update
   */
  export type userProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a userProfile.
     */
    data: XOR<userProfileUpdateInput, userProfileUncheckedUpdateInput>
    /**
     * Choose, which userProfile to update.
     */
    where: userProfileWhereUniqueInput
  }

  /**
   * userProfile updateMany
   */
  export type userProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userProfiles.
     */
    data: XOR<userProfileUpdateManyMutationInput, userProfileUncheckedUpdateManyInput>
    /**
     * Filter which userProfiles to update
     */
    where?: userProfileWhereInput
    /**
     * Limit how many userProfiles to update.
     */
    limit?: number
  }

  /**
   * userProfile upsert
   */
  export type userProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the userProfile to update in case it exists.
     */
    where: userProfileWhereUniqueInput
    /**
     * In case the userProfile found by the `where` argument doesn't exist, create a new userProfile with this data.
     */
    create: XOR<userProfileCreateInput, userProfileUncheckedCreateInput>
    /**
     * In case the userProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userProfileUpdateInput, userProfileUncheckedUpdateInput>
  }

  /**
   * userProfile delete
   */
  export type userProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
    /**
     * Filter which userProfile to delete.
     */
    where: userProfileWhereUniqueInput
  }

  /**
   * userProfile deleteMany
   */
  export type userProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userProfiles to delete
     */
    where?: userProfileWhereInput
    /**
     * Limit how many userProfiles to delete.
     */
    limit?: number
  }

  /**
   * userProfile.theme
   */
  export type userProfile$themeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    where?: ThemeWhereInput
  }

  /**
   * userProfile without action
   */
  export type userProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userProfile
     */
    select?: userProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userProfile
     */
    omit?: userProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userProfileInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerMinAggregateOutputType = {
    document: string | null
    username: string | null
    email: string | null
    password: string | null
    documentTypeName: string | null
    accountStatusCode: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    document: string | null
    username: string | null
    email: string | null
    password: string | null
    documentTypeName: string | null
    accountStatusCode: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CustomerCountAggregateOutputType = {
    document: number
    username: number
    email: number
    password: number
    documentTypeName: number
    accountStatusCode: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type CustomerMinAggregateInputType = {
    document?: true
    username?: true
    email?: true
    password?: true
    documentTypeName?: true
    accountStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CustomerMaxAggregateInputType = {
    document?: true
    username?: true
    email?: true
    password?: true
    documentTypeName?: true
    accountStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CustomerCountAggregateInputType = {
    document?: true
    username?: true
    email?: true
    password?: true
    documentTypeName?: true
    accountStatusCode?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    document: string
    username: string | null
    email: string | null
    password: string | null
    documentTypeName: string
    accountStatusCode: string
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    document?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    documentTypeName?: boolean
    accountStatusCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    accountStatus?: boolean | AccountStatusDefaultArgs<ExtArgs>
    profile?: boolean | Customer$profileArgs<ExtArgs>
    orders?: boolean | Customer$ordersArgs<ExtArgs>
    payments?: boolean | Customer$paymentsArgs<ExtArgs>
    sessions?: boolean | Customer$sessionsArgs<ExtArgs>
    logs?: boolean | Customer$logsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>



  export type CustomerSelectScalar = {
    document?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    documentTypeName?: boolean
    accountStatusCode?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"document" | "username" | "email" | "password" | "documentTypeName" | "accountStatusCode" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentType?: boolean | DocumentTypeDefaultArgs<ExtArgs>
    accountStatus?: boolean | AccountStatusDefaultArgs<ExtArgs>
    profile?: boolean | Customer$profileArgs<ExtArgs>
    orders?: boolean | Customer$ordersArgs<ExtArgs>
    payments?: boolean | Customer$paymentsArgs<ExtArgs>
    sessions?: boolean | Customer$sessionsArgs<ExtArgs>
    logs?: boolean | Customer$logsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      documentType: Prisma.$DocumentTypePayload<ExtArgs>
      accountStatus: Prisma.$AccountStatusPayload<ExtArgs>
      profile: Prisma.$CustomerProfilePayload<ExtArgs> | null
      orders: Prisma.$OrderPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      logs: Prisma.$LogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      document: string
      username: string | null
      email: string | null
      password: string | null
      documentTypeName: string
      accountStatusCode: string
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `document`
     * const customerWithDocumentOnly = await prisma.customer.findMany({ select: { document: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentType<T extends DocumentTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DocumentTypeDefaultArgs<ExtArgs>>): Prisma__DocumentTypeClient<$Result.GetResult<Prisma.$DocumentTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    accountStatus<T extends AccountStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountStatusDefaultArgs<ExtArgs>>): Prisma__AccountStatusClient<$Result.GetResult<Prisma.$AccountStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile<T extends Customer$profileArgs<ExtArgs> = {}>(args?: Subset<T, Customer$profileArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orders<T extends Customer$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Customer$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Customer$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends Customer$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    logs<T extends Customer$logsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly document: FieldRef<"Customer", 'String'>
    readonly username: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly password: FieldRef<"Customer", 'String'>
    readonly documentTypeName: FieldRef<"Customer", 'String'>
    readonly accountStatusCode: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly createdBy: FieldRef<"Customer", 'String'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedBy: FieldRef<"Customer", 'String'>
    readonly deletedAt: FieldRef<"Customer", 'DateTime'>
    readonly deletedBy: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.profile
   */
  export type Customer$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    where?: CustomerProfileWhereInput
  }

  /**
   * Customer.orders
   */
  export type Customer$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Customer.payments
   */
  export type Customer$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Customer.sessions
   */
  export type Customer$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Customer.logs
   */
  export type Customer$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    where?: LogWhereInput
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    cursor?: LogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model CustomerProfile
   */

  export type AggregateCustomerProfile = {
    _count: CustomerProfileCountAggregateOutputType | null
    _avg: CustomerProfileAvgAggregateOutputType | null
    _sum: CustomerProfileSumAggregateOutputType | null
    _min: CustomerProfileMinAggregateOutputType | null
    _max: CustomerProfileMaxAggregateOutputType | null
  }

  export type CustomerProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerProfileSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerProfileMinAggregateOutputType = {
    id: number | null
    customerDocument: string | null
    fullName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    themeName: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CustomerProfileMaxAggregateOutputType = {
    id: number | null
    customerDocument: string | null
    fullName: string | null
    phoneNumber: string | null
    birthDate: Date | null
    themeName: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CustomerProfileCountAggregateOutputType = {
    id: number
    customerDocument: number
    fullName: number
    phoneNumber: number
    birthDate: number
    themeName: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type CustomerProfileAvgAggregateInputType = {
    id?: true
  }

  export type CustomerProfileSumAggregateInputType = {
    id?: true
  }

  export type CustomerProfileMinAggregateInputType = {
    id?: true
    customerDocument?: true
    fullName?: true
    phoneNumber?: true
    birthDate?: true
    themeName?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CustomerProfileMaxAggregateInputType = {
    id?: true
    customerDocument?: true
    fullName?: true
    phoneNumber?: true
    birthDate?: true
    themeName?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CustomerProfileCountAggregateInputType = {
    id?: true
    customerDocument?: true
    fullName?: true
    phoneNumber?: true
    birthDate?: true
    themeName?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type CustomerProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerProfile to aggregate.
     */
    where?: CustomerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerProfiles to fetch.
     */
    orderBy?: CustomerProfileOrderByWithRelationInput | CustomerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerProfiles
    **/
    _count?: true | CustomerProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerProfileMaxAggregateInputType
  }

  export type GetCustomerProfileAggregateType<T extends CustomerProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerProfile[P]>
      : GetScalarType<T[P], AggregateCustomerProfile[P]>
  }




  export type CustomerProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerProfileWhereInput
    orderBy?: CustomerProfileOrderByWithAggregationInput | CustomerProfileOrderByWithAggregationInput[]
    by: CustomerProfileScalarFieldEnum[] | CustomerProfileScalarFieldEnum
    having?: CustomerProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerProfileCountAggregateInputType | true
    _avg?: CustomerProfileAvgAggregateInputType
    _sum?: CustomerProfileSumAggregateInputType
    _min?: CustomerProfileMinAggregateInputType
    _max?: CustomerProfileMaxAggregateInputType
  }

  export type CustomerProfileGroupByOutputType = {
    id: number
    customerDocument: string
    fullName: string
    phoneNumber: string | null
    birthDate: Date | null
    themeName: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: CustomerProfileCountAggregateOutputType | null
    _avg: CustomerProfileAvgAggregateOutputType | null
    _sum: CustomerProfileSumAggregateOutputType | null
    _min: CustomerProfileMinAggregateOutputType | null
    _max: CustomerProfileMaxAggregateOutputType | null
  }

  type GetCustomerProfileGroupByPayload<T extends CustomerProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerProfileGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerProfileGroupByOutputType[P]>
        }
      >
    >


  export type CustomerProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerDocument?: boolean
    fullName?: boolean
    phoneNumber?: boolean
    birthDate?: boolean
    themeName?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    theme?: boolean | CustomerProfile$themeArgs<ExtArgs>
  }, ExtArgs["result"]["customerProfile"]>



  export type CustomerProfileSelectScalar = {
    id?: boolean
    customerDocument?: boolean
    fullName?: boolean
    phoneNumber?: boolean
    birthDate?: boolean
    themeName?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type CustomerProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerDocument" | "fullName" | "phoneNumber" | "birthDate" | "themeName" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["customerProfile"]>
  export type CustomerProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    theme?: boolean | CustomerProfile$themeArgs<ExtArgs>
  }

  export type $CustomerProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerProfile"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      theme: Prisma.$ThemePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerDocument: string
      fullName: string
      phoneNumber: string | null
      birthDate: Date | null
      themeName: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["customerProfile"]>
    composites: {}
  }

  type CustomerProfileGetPayload<S extends boolean | null | undefined | CustomerProfileDefaultArgs> = $Result.GetResult<Prisma.$CustomerProfilePayload, S>

  type CustomerProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerProfileCountAggregateInputType | true
    }

  export interface CustomerProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerProfile'], meta: { name: 'CustomerProfile' } }
    /**
     * Find zero or one CustomerProfile that matches the filter.
     * @param {CustomerProfileFindUniqueArgs} args - Arguments to find a CustomerProfile
     * @example
     * // Get one CustomerProfile
     * const customerProfile = await prisma.customerProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerProfileFindUniqueArgs>(args: SelectSubset<T, CustomerProfileFindUniqueArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerProfileFindUniqueOrThrowArgs} args - Arguments to find a CustomerProfile
     * @example
     * // Get one CustomerProfile
     * const customerProfile = await prisma.customerProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileFindFirstArgs} args - Arguments to find a CustomerProfile
     * @example
     * // Get one CustomerProfile
     * const customerProfile = await prisma.customerProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerProfileFindFirstArgs>(args?: SelectSubset<T, CustomerProfileFindFirstArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileFindFirstOrThrowArgs} args - Arguments to find a CustomerProfile
     * @example
     * // Get one CustomerProfile
     * const customerProfile = await prisma.customerProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerProfiles
     * const customerProfiles = await prisma.customerProfile.findMany()
     * 
     * // Get first 10 CustomerProfiles
     * const customerProfiles = await prisma.customerProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerProfileWithIdOnly = await prisma.customerProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerProfileFindManyArgs>(args?: SelectSubset<T, CustomerProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerProfile.
     * @param {CustomerProfileCreateArgs} args - Arguments to create a CustomerProfile.
     * @example
     * // Create one CustomerProfile
     * const CustomerProfile = await prisma.customerProfile.create({
     *   data: {
     *     // ... data to create a CustomerProfile
     *   }
     * })
     * 
     */
    create<T extends CustomerProfileCreateArgs>(args: SelectSubset<T, CustomerProfileCreateArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerProfiles.
     * @param {CustomerProfileCreateManyArgs} args - Arguments to create many CustomerProfiles.
     * @example
     * // Create many CustomerProfiles
     * const customerProfile = await prisma.customerProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerProfileCreateManyArgs>(args?: SelectSubset<T, CustomerProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CustomerProfile.
     * @param {CustomerProfileDeleteArgs} args - Arguments to delete one CustomerProfile.
     * @example
     * // Delete one CustomerProfile
     * const CustomerProfile = await prisma.customerProfile.delete({
     *   where: {
     *     // ... filter to delete one CustomerProfile
     *   }
     * })
     * 
     */
    delete<T extends CustomerProfileDeleteArgs>(args: SelectSubset<T, CustomerProfileDeleteArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerProfile.
     * @param {CustomerProfileUpdateArgs} args - Arguments to update one CustomerProfile.
     * @example
     * // Update one CustomerProfile
     * const customerProfile = await prisma.customerProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerProfileUpdateArgs>(args: SelectSubset<T, CustomerProfileUpdateArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerProfiles.
     * @param {CustomerProfileDeleteManyArgs} args - Arguments to filter CustomerProfiles to delete.
     * @example
     * // Delete a few CustomerProfiles
     * const { count } = await prisma.customerProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerProfileDeleteManyArgs>(args?: SelectSubset<T, CustomerProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerProfiles
     * const customerProfile = await prisma.customerProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerProfileUpdateManyArgs>(args: SelectSubset<T, CustomerProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomerProfile.
     * @param {CustomerProfileUpsertArgs} args - Arguments to update or create a CustomerProfile.
     * @example
     * // Update or create a CustomerProfile
     * const customerProfile = await prisma.customerProfile.upsert({
     *   create: {
     *     // ... data to create a CustomerProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerProfile we want to update
     *   }
     * })
     */
    upsert<T extends CustomerProfileUpsertArgs>(args: SelectSubset<T, CustomerProfileUpsertArgs<ExtArgs>>): Prisma__CustomerProfileClient<$Result.GetResult<Prisma.$CustomerProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileCountArgs} args - Arguments to filter CustomerProfiles to count.
     * @example
     * // Count the number of CustomerProfiles
     * const count = await prisma.customerProfile.count({
     *   where: {
     *     // ... the filter for the CustomerProfiles we want to count
     *   }
     * })
    **/
    count<T extends CustomerProfileCountArgs>(
      args?: Subset<T, CustomerProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerProfileAggregateArgs>(args: Subset<T, CustomerProfileAggregateArgs>): Prisma.PrismaPromise<GetCustomerProfileAggregateType<T>>

    /**
     * Group by CustomerProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerProfileGroupByArgs['orderBy'] }
        : { orderBy?: CustomerProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerProfile model
   */
  readonly fields: CustomerProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    theme<T extends CustomerProfile$themeArgs<ExtArgs> = {}>(args?: Subset<T, CustomerProfile$themeArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerProfile model
   */
  interface CustomerProfileFieldRefs {
    readonly id: FieldRef<"CustomerProfile", 'Int'>
    readonly customerDocument: FieldRef<"CustomerProfile", 'String'>
    readonly fullName: FieldRef<"CustomerProfile", 'String'>
    readonly phoneNumber: FieldRef<"CustomerProfile", 'String'>
    readonly birthDate: FieldRef<"CustomerProfile", 'DateTime'>
    readonly themeName: FieldRef<"CustomerProfile", 'String'>
    readonly createdAt: FieldRef<"CustomerProfile", 'DateTime'>
    readonly createdBy: FieldRef<"CustomerProfile", 'String'>
    readonly updatedAt: FieldRef<"CustomerProfile", 'DateTime'>
    readonly updatedBy: FieldRef<"CustomerProfile", 'String'>
    readonly deletedAt: FieldRef<"CustomerProfile", 'DateTime'>
    readonly deletedBy: FieldRef<"CustomerProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CustomerProfile findUnique
   */
  export type CustomerProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerProfile to fetch.
     */
    where: CustomerProfileWhereUniqueInput
  }

  /**
   * CustomerProfile findUniqueOrThrow
   */
  export type CustomerProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerProfile to fetch.
     */
    where: CustomerProfileWhereUniqueInput
  }

  /**
   * CustomerProfile findFirst
   */
  export type CustomerProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerProfile to fetch.
     */
    where?: CustomerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerProfiles to fetch.
     */
    orderBy?: CustomerProfileOrderByWithRelationInput | CustomerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerProfiles.
     */
    cursor?: CustomerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerProfiles.
     */
    distinct?: CustomerProfileScalarFieldEnum | CustomerProfileScalarFieldEnum[]
  }

  /**
   * CustomerProfile findFirstOrThrow
   */
  export type CustomerProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerProfile to fetch.
     */
    where?: CustomerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerProfiles to fetch.
     */
    orderBy?: CustomerProfileOrderByWithRelationInput | CustomerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerProfiles.
     */
    cursor?: CustomerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerProfiles.
     */
    distinct?: CustomerProfileScalarFieldEnum | CustomerProfileScalarFieldEnum[]
  }

  /**
   * CustomerProfile findMany
   */
  export type CustomerProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * Filter, which CustomerProfiles to fetch.
     */
    where?: CustomerProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerProfiles to fetch.
     */
    orderBy?: CustomerProfileOrderByWithRelationInput | CustomerProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerProfiles.
     */
    cursor?: CustomerProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerProfiles.
     */
    skip?: number
    distinct?: CustomerProfileScalarFieldEnum | CustomerProfileScalarFieldEnum[]
  }

  /**
   * CustomerProfile create
   */
  export type CustomerProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerProfile.
     */
    data: XOR<CustomerProfileCreateInput, CustomerProfileUncheckedCreateInput>
  }

  /**
   * CustomerProfile createMany
   */
  export type CustomerProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerProfiles.
     */
    data: CustomerProfileCreateManyInput | CustomerProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerProfile update
   */
  export type CustomerProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerProfile.
     */
    data: XOR<CustomerProfileUpdateInput, CustomerProfileUncheckedUpdateInput>
    /**
     * Choose, which CustomerProfile to update.
     */
    where: CustomerProfileWhereUniqueInput
  }

  /**
   * CustomerProfile updateMany
   */
  export type CustomerProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerProfiles.
     */
    data: XOR<CustomerProfileUpdateManyMutationInput, CustomerProfileUncheckedUpdateManyInput>
    /**
     * Filter which CustomerProfiles to update
     */
    where?: CustomerProfileWhereInput
    /**
     * Limit how many CustomerProfiles to update.
     */
    limit?: number
  }

  /**
   * CustomerProfile upsert
   */
  export type CustomerProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerProfile to update in case it exists.
     */
    where: CustomerProfileWhereUniqueInput
    /**
     * In case the CustomerProfile found by the `where` argument doesn't exist, create a new CustomerProfile with this data.
     */
    create: XOR<CustomerProfileCreateInput, CustomerProfileUncheckedCreateInput>
    /**
     * In case the CustomerProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerProfileUpdateInput, CustomerProfileUncheckedUpdateInput>
  }

  /**
   * CustomerProfile delete
   */
  export type CustomerProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
    /**
     * Filter which CustomerProfile to delete.
     */
    where: CustomerProfileWhereUniqueInput
  }

  /**
   * CustomerProfile deleteMany
   */
  export type CustomerProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerProfiles to delete
     */
    where?: CustomerProfileWhereInput
    /**
     * Limit how many CustomerProfiles to delete.
     */
    limit?: number
  }

  /**
   * CustomerProfile.theme
   */
  export type CustomerProfile$themeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    where?: ThemeWhereInput
  }

  /**
   * CustomerProfile without action
   */
  export type CustomerProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerProfile
     */
    select?: CustomerProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerProfile
     */
    omit?: CustomerProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerProfileInclude<ExtArgs> | null
  }


  /**
   * Model CommandStatus
   */

  export type AggregateCommandStatus = {
    _count: CommandStatusCountAggregateOutputType | null
    _min: CommandStatusMinAggregateOutputType | null
    _max: CommandStatusMaxAggregateOutputType | null
  }

  export type CommandStatusMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CommandStatusMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CommandStatusCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type CommandStatusMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CommandStatusMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CommandStatusCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type CommandStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandStatus to aggregate.
     */
    where?: CommandStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStatuses to fetch.
     */
    orderBy?: CommandStatusOrderByWithRelationInput | CommandStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommandStatuses
    **/
    _count?: true | CommandStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandStatusMaxAggregateInputType
  }

  export type GetCommandStatusAggregateType<T extends CommandStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateCommandStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommandStatus[P]>
      : GetScalarType<T[P], AggregateCommandStatus[P]>
  }




  export type CommandStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandStatusWhereInput
    orderBy?: CommandStatusOrderByWithAggregationInput | CommandStatusOrderByWithAggregationInput[]
    by: CommandStatusScalarFieldEnum[] | CommandStatusScalarFieldEnum
    having?: CommandStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandStatusCountAggregateInputType | true
    _min?: CommandStatusMinAggregateInputType
    _max?: CommandStatusMaxAggregateInputType
  }

  export type CommandStatusGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: CommandStatusCountAggregateOutputType | null
    _min: CommandStatusMinAggregateOutputType | null
    _max: CommandStatusMaxAggregateOutputType | null
  }

  type GetCommandStatusGroupByPayload<T extends CommandStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandStatusGroupByOutputType[P]>
            : GetScalarType<T[P], CommandStatusGroupByOutputType[P]>
        }
      >
    >


  export type CommandStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    commands?: boolean | CommandStatus$commandsArgs<ExtArgs>
    _count?: boolean | CommandStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commandStatus"]>



  export type CommandStatusSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type CommandStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["commandStatus"]>
  export type CommandStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commands?: boolean | CommandStatus$commandsArgs<ExtArgs>
    _count?: boolean | CommandStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommandStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommandStatus"
    objects: {
      commands: Prisma.$CommandPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["commandStatus"]>
    composites: {}
  }

  type CommandStatusGetPayload<S extends boolean | null | undefined | CommandStatusDefaultArgs> = $Result.GetResult<Prisma.$CommandStatusPayload, S>

  type CommandStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommandStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommandStatusCountAggregateInputType | true
    }

  export interface CommandStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommandStatus'], meta: { name: 'CommandStatus' } }
    /**
     * Find zero or one CommandStatus that matches the filter.
     * @param {CommandStatusFindUniqueArgs} args - Arguments to find a CommandStatus
     * @example
     * // Get one CommandStatus
     * const commandStatus = await prisma.commandStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommandStatusFindUniqueArgs>(args: SelectSubset<T, CommandStatusFindUniqueArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CommandStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommandStatusFindUniqueOrThrowArgs} args - Arguments to find a CommandStatus
     * @example
     * // Get one CommandStatus
     * const commandStatus = await prisma.commandStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommandStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, CommandStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommandStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusFindFirstArgs} args - Arguments to find a CommandStatus
     * @example
     * // Get one CommandStatus
     * const commandStatus = await prisma.commandStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommandStatusFindFirstArgs>(args?: SelectSubset<T, CommandStatusFindFirstArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CommandStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusFindFirstOrThrowArgs} args - Arguments to find a CommandStatus
     * @example
     * // Get one CommandStatus
     * const commandStatus = await prisma.commandStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommandStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, CommandStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CommandStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommandStatuses
     * const commandStatuses = await prisma.commandStatus.findMany()
     * 
     * // Get first 10 CommandStatuses
     * const commandStatuses = await prisma.commandStatus.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const commandStatusWithCodeOnly = await prisma.commandStatus.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends CommandStatusFindManyArgs>(args?: SelectSubset<T, CommandStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CommandStatus.
     * @param {CommandStatusCreateArgs} args - Arguments to create a CommandStatus.
     * @example
     * // Create one CommandStatus
     * const CommandStatus = await prisma.commandStatus.create({
     *   data: {
     *     // ... data to create a CommandStatus
     *   }
     * })
     * 
     */
    create<T extends CommandStatusCreateArgs>(args: SelectSubset<T, CommandStatusCreateArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CommandStatuses.
     * @param {CommandStatusCreateManyArgs} args - Arguments to create many CommandStatuses.
     * @example
     * // Create many CommandStatuses
     * const commandStatus = await prisma.commandStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommandStatusCreateManyArgs>(args?: SelectSubset<T, CommandStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommandStatus.
     * @param {CommandStatusDeleteArgs} args - Arguments to delete one CommandStatus.
     * @example
     * // Delete one CommandStatus
     * const CommandStatus = await prisma.commandStatus.delete({
     *   where: {
     *     // ... filter to delete one CommandStatus
     *   }
     * })
     * 
     */
    delete<T extends CommandStatusDeleteArgs>(args: SelectSubset<T, CommandStatusDeleteArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CommandStatus.
     * @param {CommandStatusUpdateArgs} args - Arguments to update one CommandStatus.
     * @example
     * // Update one CommandStatus
     * const commandStatus = await prisma.commandStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommandStatusUpdateArgs>(args: SelectSubset<T, CommandStatusUpdateArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CommandStatuses.
     * @param {CommandStatusDeleteManyArgs} args - Arguments to filter CommandStatuses to delete.
     * @example
     * // Delete a few CommandStatuses
     * const { count } = await prisma.commandStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommandStatusDeleteManyArgs>(args?: SelectSubset<T, CommandStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommandStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommandStatuses
     * const commandStatus = await prisma.commandStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommandStatusUpdateManyArgs>(args: SelectSubset<T, CommandStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommandStatus.
     * @param {CommandStatusUpsertArgs} args - Arguments to update or create a CommandStatus.
     * @example
     * // Update or create a CommandStatus
     * const commandStatus = await prisma.commandStatus.upsert({
     *   create: {
     *     // ... data to create a CommandStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommandStatus we want to update
     *   }
     * })
     */
    upsert<T extends CommandStatusUpsertArgs>(args: SelectSubset<T, CommandStatusUpsertArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CommandStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusCountArgs} args - Arguments to filter CommandStatuses to count.
     * @example
     * // Count the number of CommandStatuses
     * const count = await prisma.commandStatus.count({
     *   where: {
     *     // ... the filter for the CommandStatuses we want to count
     *   }
     * })
    **/
    count<T extends CommandStatusCountArgs>(
      args?: Subset<T, CommandStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommandStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandStatusAggregateArgs>(args: Subset<T, CommandStatusAggregateArgs>): Prisma.PrismaPromise<GetCommandStatusAggregateType<T>>

    /**
     * Group by CommandStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandStatusGroupByArgs['orderBy'] }
        : { orderBy?: CommandStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommandStatus model
   */
  readonly fields: CommandStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommandStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    commands<T extends CommandStatus$commandsArgs<ExtArgs> = {}>(args?: Subset<T, CommandStatus$commandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommandStatus model
   */
  interface CommandStatusFieldRefs {
    readonly code: FieldRef<"CommandStatus", 'String'>
    readonly name: FieldRef<"CommandStatus", 'String'>
    readonly description: FieldRef<"CommandStatus", 'String'>
    readonly color: FieldRef<"CommandStatus", 'String'>
    readonly createdAt: FieldRef<"CommandStatus", 'DateTime'>
    readonly createdBy: FieldRef<"CommandStatus", 'String'>
    readonly updatedAt: FieldRef<"CommandStatus", 'DateTime'>
    readonly updatedBy: FieldRef<"CommandStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CommandStatus findUnique
   */
  export type CommandStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * Filter, which CommandStatus to fetch.
     */
    where: CommandStatusWhereUniqueInput
  }

  /**
   * CommandStatus findUniqueOrThrow
   */
  export type CommandStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * Filter, which CommandStatus to fetch.
     */
    where: CommandStatusWhereUniqueInput
  }

  /**
   * CommandStatus findFirst
   */
  export type CommandStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * Filter, which CommandStatus to fetch.
     */
    where?: CommandStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStatuses to fetch.
     */
    orderBy?: CommandStatusOrderByWithRelationInput | CommandStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandStatuses.
     */
    cursor?: CommandStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandStatuses.
     */
    distinct?: CommandStatusScalarFieldEnum | CommandStatusScalarFieldEnum[]
  }

  /**
   * CommandStatus findFirstOrThrow
   */
  export type CommandStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * Filter, which CommandStatus to fetch.
     */
    where?: CommandStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStatuses to fetch.
     */
    orderBy?: CommandStatusOrderByWithRelationInput | CommandStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommandStatuses.
     */
    cursor?: CommandStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommandStatuses.
     */
    distinct?: CommandStatusScalarFieldEnum | CommandStatusScalarFieldEnum[]
  }

  /**
   * CommandStatus findMany
   */
  export type CommandStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * Filter, which CommandStatuses to fetch.
     */
    where?: CommandStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommandStatuses to fetch.
     */
    orderBy?: CommandStatusOrderByWithRelationInput | CommandStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommandStatuses.
     */
    cursor?: CommandStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommandStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommandStatuses.
     */
    skip?: number
    distinct?: CommandStatusScalarFieldEnum | CommandStatusScalarFieldEnum[]
  }

  /**
   * CommandStatus create
   */
  export type CommandStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a CommandStatus.
     */
    data: XOR<CommandStatusCreateInput, CommandStatusUncheckedCreateInput>
  }

  /**
   * CommandStatus createMany
   */
  export type CommandStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommandStatuses.
     */
    data: CommandStatusCreateManyInput | CommandStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommandStatus update
   */
  export type CommandStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a CommandStatus.
     */
    data: XOR<CommandStatusUpdateInput, CommandStatusUncheckedUpdateInput>
    /**
     * Choose, which CommandStatus to update.
     */
    where: CommandStatusWhereUniqueInput
  }

  /**
   * CommandStatus updateMany
   */
  export type CommandStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommandStatuses.
     */
    data: XOR<CommandStatusUpdateManyMutationInput, CommandStatusUncheckedUpdateManyInput>
    /**
     * Filter which CommandStatuses to update
     */
    where?: CommandStatusWhereInput
    /**
     * Limit how many CommandStatuses to update.
     */
    limit?: number
  }

  /**
   * CommandStatus upsert
   */
  export type CommandStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the CommandStatus to update in case it exists.
     */
    where: CommandStatusWhereUniqueInput
    /**
     * In case the CommandStatus found by the `where` argument doesn't exist, create a new CommandStatus with this data.
     */
    create: XOR<CommandStatusCreateInput, CommandStatusUncheckedCreateInput>
    /**
     * In case the CommandStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandStatusUpdateInput, CommandStatusUncheckedUpdateInput>
  }

  /**
   * CommandStatus delete
   */
  export type CommandStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
    /**
     * Filter which CommandStatus to delete.
     */
    where: CommandStatusWhereUniqueInput
  }

  /**
   * CommandStatus deleteMany
   */
  export type CommandStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommandStatuses to delete
     */
    where?: CommandStatusWhereInput
    /**
     * Limit how many CommandStatuses to delete.
     */
    limit?: number
  }

  /**
   * CommandStatus.commands
   */
  export type CommandStatus$commandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    where?: CommandWhereInput
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    cursor?: CommandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * CommandStatus without action
   */
  export type CommandStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommandStatus
     */
    select?: CommandStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CommandStatus
     */
    omit?: CommandStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandStatusInclude<ExtArgs> | null
  }


  /**
   * Model Command
   */

  export type AggregateCommand = {
    _count: CommandCountAggregateOutputType | null
    _avg: CommandAvgAggregateOutputType | null
    _sum: CommandSumAggregateOutputType | null
    _min: CommandMinAggregateOutputType | null
    _max: CommandMaxAggregateOutputType | null
  }

  export type CommandAvgAggregateOutputType = {
    id: number | null
    tableId: number | null
    combineTableId: number | null
  }

  export type CommandSumAggregateOutputType = {
    id: number | null
    tableId: number | null
    combineTableId: number | null
  }

  export type CommandMinAggregateOutputType = {
    id: number | null
    tableId: number | null
    combineTableId: number | null
    userDocumentOpener: string | null
    openedAt: Date | null
    commandStatusCode: string | null
    notes: string | null
    userDocumentCloser: string | null
    closedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CommandMaxAggregateOutputType = {
    id: number | null
    tableId: number | null
    combineTableId: number | null
    userDocumentOpener: string | null
    openedAt: Date | null
    commandStatusCode: string | null
    notes: string | null
    userDocumentCloser: string | null
    closedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type CommandCountAggregateOutputType = {
    id: number
    tableId: number
    combineTableId: number
    userDocumentOpener: number
    openedAt: number
    commandStatusCode: number
    notes: number
    userDocumentCloser: number
    closedAt: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type CommandAvgAggregateInputType = {
    id?: true
    tableId?: true
    combineTableId?: true
  }

  export type CommandSumAggregateInputType = {
    id?: true
    tableId?: true
    combineTableId?: true
  }

  export type CommandMinAggregateInputType = {
    id?: true
    tableId?: true
    combineTableId?: true
    userDocumentOpener?: true
    openedAt?: true
    commandStatusCode?: true
    notes?: true
    userDocumentCloser?: true
    closedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CommandMaxAggregateInputType = {
    id?: true
    tableId?: true
    combineTableId?: true
    userDocumentOpener?: true
    openedAt?: true
    commandStatusCode?: true
    notes?: true
    userDocumentCloser?: true
    closedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type CommandCountAggregateInputType = {
    id?: true
    tableId?: true
    combineTableId?: true
    userDocumentOpener?: true
    openedAt?: true
    commandStatusCode?: true
    notes?: true
    userDocumentCloser?: true
    closedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type CommandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Command to aggregate.
     */
    where?: CommandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commands to fetch.
     */
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Commands
    **/
    _count?: true | CommandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommandAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommandSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommandMaxAggregateInputType
  }

  export type GetCommandAggregateType<T extends CommandAggregateArgs> = {
        [P in keyof T & keyof AggregateCommand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommand[P]>
      : GetScalarType<T[P], AggregateCommand[P]>
  }




  export type CommandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommandWhereInput
    orderBy?: CommandOrderByWithAggregationInput | CommandOrderByWithAggregationInput[]
    by: CommandScalarFieldEnum[] | CommandScalarFieldEnum
    having?: CommandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommandCountAggregateInputType | true
    _avg?: CommandAvgAggregateInputType
    _sum?: CommandSumAggregateInputType
    _min?: CommandMinAggregateInputType
    _max?: CommandMaxAggregateInputType
  }

  export type CommandGroupByOutputType = {
    id: number
    tableId: number | null
    combineTableId: number | null
    userDocumentOpener: string
    openedAt: Date
    commandStatusCode: string
    notes: string | null
    userDocumentCloser: string | null
    closedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: CommandCountAggregateOutputType | null
    _avg: CommandAvgAggregateOutputType | null
    _sum: CommandSumAggregateOutputType | null
    _min: CommandMinAggregateOutputType | null
    _max: CommandMaxAggregateOutputType | null
  }

  type GetCommandGroupByPayload<T extends CommandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommandGroupByOutputType[P]>
            : GetScalarType<T[P], CommandGroupByOutputType[P]>
        }
      >
    >


  export type CommandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableId?: boolean
    combineTableId?: boolean
    userDocumentOpener?: boolean
    openedAt?: boolean
    commandStatusCode?: boolean
    notes?: boolean
    userDocumentCloser?: boolean
    closedAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    table?: boolean | Command$tableArgs<ExtArgs>
    combineTable?: boolean | Command$combineTableArgs<ExtArgs>
    opener?: boolean | UserDefaultArgs<ExtArgs>
    commandStatus?: boolean | CommandStatusDefaultArgs<ExtArgs>
    closer?: boolean | Command$closerArgs<ExtArgs>
    orders?: boolean | Command$ordersArgs<ExtArgs>
    orderItems?: boolean | Command$orderItemsArgs<ExtArgs>
    _count?: boolean | CommandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["command"]>



  export type CommandSelectScalar = {
    id?: boolean
    tableId?: boolean
    combineTableId?: boolean
    userDocumentOpener?: boolean
    openedAt?: boolean
    commandStatusCode?: boolean
    notes?: boolean
    userDocumentCloser?: boolean
    closedAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type CommandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tableId" | "combineTableId" | "userDocumentOpener" | "openedAt" | "commandStatusCode" | "notes" | "userDocumentCloser" | "closedAt" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["command"]>
  export type CommandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    table?: boolean | Command$tableArgs<ExtArgs>
    combineTable?: boolean | Command$combineTableArgs<ExtArgs>
    opener?: boolean | UserDefaultArgs<ExtArgs>
    commandStatus?: boolean | CommandStatusDefaultArgs<ExtArgs>
    closer?: boolean | Command$closerArgs<ExtArgs>
    orders?: boolean | Command$ordersArgs<ExtArgs>
    orderItems?: boolean | Command$orderItemsArgs<ExtArgs>
    _count?: boolean | CommandCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Command"
    objects: {
      table: Prisma.$TablePayload<ExtArgs> | null
      combineTable: Prisma.$CombineTablePayload<ExtArgs> | null
      opener: Prisma.$UserPayload<ExtArgs>
      commandStatus: Prisma.$CommandStatusPayload<ExtArgs>
      closer: Prisma.$UserPayload<ExtArgs> | null
      orders: Prisma.$OrderPayload<ExtArgs>[]
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tableId: number | null
      combineTableId: number | null
      userDocumentOpener: string
      openedAt: Date
      commandStatusCode: string
      notes: string | null
      userDocumentCloser: string | null
      closedAt: Date | null
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["command"]>
    composites: {}
  }

  type CommandGetPayload<S extends boolean | null | undefined | CommandDefaultArgs> = $Result.GetResult<Prisma.$CommandPayload, S>

  type CommandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommandCountAggregateInputType | true
    }

  export interface CommandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Command'], meta: { name: 'Command' } }
    /**
     * Find zero or one Command that matches the filter.
     * @param {CommandFindUniqueArgs} args - Arguments to find a Command
     * @example
     * // Get one Command
     * const command = await prisma.command.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommandFindUniqueArgs>(args: SelectSubset<T, CommandFindUniqueArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Command that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommandFindUniqueOrThrowArgs} args - Arguments to find a Command
     * @example
     * // Get one Command
     * const command = await prisma.command.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommandFindUniqueOrThrowArgs>(args: SelectSubset<T, CommandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Command that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandFindFirstArgs} args - Arguments to find a Command
     * @example
     * // Get one Command
     * const command = await prisma.command.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommandFindFirstArgs>(args?: SelectSubset<T, CommandFindFirstArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Command that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandFindFirstOrThrowArgs} args - Arguments to find a Command
     * @example
     * // Get one Command
     * const command = await prisma.command.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommandFindFirstOrThrowArgs>(args?: SelectSubset<T, CommandFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Commands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commands
     * const commands = await prisma.command.findMany()
     * 
     * // Get first 10 Commands
     * const commands = await prisma.command.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commandWithIdOnly = await prisma.command.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommandFindManyArgs>(args?: SelectSubset<T, CommandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Command.
     * @param {CommandCreateArgs} args - Arguments to create a Command.
     * @example
     * // Create one Command
     * const Command = await prisma.command.create({
     *   data: {
     *     // ... data to create a Command
     *   }
     * })
     * 
     */
    create<T extends CommandCreateArgs>(args: SelectSubset<T, CommandCreateArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Commands.
     * @param {CommandCreateManyArgs} args - Arguments to create many Commands.
     * @example
     * // Create many Commands
     * const command = await prisma.command.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommandCreateManyArgs>(args?: SelectSubset<T, CommandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Command.
     * @param {CommandDeleteArgs} args - Arguments to delete one Command.
     * @example
     * // Delete one Command
     * const Command = await prisma.command.delete({
     *   where: {
     *     // ... filter to delete one Command
     *   }
     * })
     * 
     */
    delete<T extends CommandDeleteArgs>(args: SelectSubset<T, CommandDeleteArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Command.
     * @param {CommandUpdateArgs} args - Arguments to update one Command.
     * @example
     * // Update one Command
     * const command = await prisma.command.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommandUpdateArgs>(args: SelectSubset<T, CommandUpdateArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Commands.
     * @param {CommandDeleteManyArgs} args - Arguments to filter Commands to delete.
     * @example
     * // Delete a few Commands
     * const { count } = await prisma.command.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommandDeleteManyArgs>(args?: SelectSubset<T, CommandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commands
     * const command = await prisma.command.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommandUpdateManyArgs>(args: SelectSubset<T, CommandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Command.
     * @param {CommandUpsertArgs} args - Arguments to update or create a Command.
     * @example
     * // Update or create a Command
     * const command = await prisma.command.upsert({
     *   create: {
     *     // ... data to create a Command
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Command we want to update
     *   }
     * })
     */
    upsert<T extends CommandUpsertArgs>(args: SelectSubset<T, CommandUpsertArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Commands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandCountArgs} args - Arguments to filter Commands to count.
     * @example
     * // Count the number of Commands
     * const count = await prisma.command.count({
     *   where: {
     *     // ... the filter for the Commands we want to count
     *   }
     * })
    **/
    count<T extends CommandCountArgs>(
      args?: Subset<T, CommandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Command.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommandAggregateArgs>(args: Subset<T, CommandAggregateArgs>): Prisma.PrismaPromise<GetCommandAggregateType<T>>

    /**
     * Group by Command.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommandGroupByArgs['orderBy'] }
        : { orderBy?: CommandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Command model
   */
  readonly fields: CommandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Command.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    table<T extends Command$tableArgs<ExtArgs> = {}>(args?: Subset<T, Command$tableArgs<ExtArgs>>): Prisma__TableClient<$Result.GetResult<Prisma.$TablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    combineTable<T extends Command$combineTableArgs<ExtArgs> = {}>(args?: Subset<T, Command$combineTableArgs<ExtArgs>>): Prisma__CombineTableClient<$Result.GetResult<Prisma.$CombineTablePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    opener<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    commandStatus<T extends CommandStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandStatusDefaultArgs<ExtArgs>>): Prisma__CommandStatusClient<$Result.GetResult<Prisma.$CommandStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    closer<T extends Command$closerArgs<ExtArgs> = {}>(args?: Subset<T, Command$closerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orders<T extends Command$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Command$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orderItems<T extends Command$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Command$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Command model
   */
  interface CommandFieldRefs {
    readonly id: FieldRef<"Command", 'Int'>
    readonly tableId: FieldRef<"Command", 'Int'>
    readonly combineTableId: FieldRef<"Command", 'Int'>
    readonly userDocumentOpener: FieldRef<"Command", 'String'>
    readonly openedAt: FieldRef<"Command", 'DateTime'>
    readonly commandStatusCode: FieldRef<"Command", 'String'>
    readonly notes: FieldRef<"Command", 'String'>
    readonly userDocumentCloser: FieldRef<"Command", 'String'>
    readonly closedAt: FieldRef<"Command", 'DateTime'>
    readonly updatedAt: FieldRef<"Command", 'DateTime'>
    readonly updatedBy: FieldRef<"Command", 'String'>
    readonly deletedAt: FieldRef<"Command", 'DateTime'>
    readonly deletedBy: FieldRef<"Command", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Command findUnique
   */
  export type CommandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * Filter, which Command to fetch.
     */
    where: CommandWhereUniqueInput
  }

  /**
   * Command findUniqueOrThrow
   */
  export type CommandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * Filter, which Command to fetch.
     */
    where: CommandWhereUniqueInput
  }

  /**
   * Command findFirst
   */
  export type CommandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * Filter, which Command to fetch.
     */
    where?: CommandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commands to fetch.
     */
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commands.
     */
    cursor?: CommandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commands.
     */
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * Command findFirstOrThrow
   */
  export type CommandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * Filter, which Command to fetch.
     */
    where?: CommandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commands to fetch.
     */
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commands.
     */
    cursor?: CommandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commands.
     */
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * Command findMany
   */
  export type CommandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * Filter, which Commands to fetch.
     */
    where?: CommandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commands to fetch.
     */
    orderBy?: CommandOrderByWithRelationInput | CommandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Commands.
     */
    cursor?: CommandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commands.
     */
    skip?: number
    distinct?: CommandScalarFieldEnum | CommandScalarFieldEnum[]
  }

  /**
   * Command create
   */
  export type CommandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * The data needed to create a Command.
     */
    data: XOR<CommandCreateInput, CommandUncheckedCreateInput>
  }

  /**
   * Command createMany
   */
  export type CommandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Commands.
     */
    data: CommandCreateManyInput | CommandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Command update
   */
  export type CommandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * The data needed to update a Command.
     */
    data: XOR<CommandUpdateInput, CommandUncheckedUpdateInput>
    /**
     * Choose, which Command to update.
     */
    where: CommandWhereUniqueInput
  }

  /**
   * Command updateMany
   */
  export type CommandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Commands.
     */
    data: XOR<CommandUpdateManyMutationInput, CommandUncheckedUpdateManyInput>
    /**
     * Filter which Commands to update
     */
    where?: CommandWhereInput
    /**
     * Limit how many Commands to update.
     */
    limit?: number
  }

  /**
   * Command upsert
   */
  export type CommandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * The filter to search for the Command to update in case it exists.
     */
    where: CommandWhereUniqueInput
    /**
     * In case the Command found by the `where` argument doesn't exist, create a new Command with this data.
     */
    create: XOR<CommandCreateInput, CommandUncheckedCreateInput>
    /**
     * In case the Command was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommandUpdateInput, CommandUncheckedUpdateInput>
  }

  /**
   * Command delete
   */
  export type CommandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
    /**
     * Filter which Command to delete.
     */
    where: CommandWhereUniqueInput
  }

  /**
   * Command deleteMany
   */
  export type CommandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Commands to delete
     */
    where?: CommandWhereInput
    /**
     * Limit how many Commands to delete.
     */
    limit?: number
  }

  /**
   * Command.table
   */
  export type Command$tableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Table
     */
    select?: TableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Table
     */
    omit?: TableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TableInclude<ExtArgs> | null
    where?: TableWhereInput
  }

  /**
   * Command.combineTable
   */
  export type Command$combineTableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CombineTable
     */
    select?: CombineTableSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CombineTable
     */
    omit?: CombineTableOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CombineTableInclude<ExtArgs> | null
    where?: CombineTableWhereInput
  }

  /**
   * Command.closer
   */
  export type Command$closerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Command.orders
   */
  export type Command$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Command.orderItems
   */
  export type Command$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Command without action
   */
  export type CommandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Command
     */
    select?: CommandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Command
     */
    omit?: CommandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommandInclude<ExtArgs> | null
  }


  /**
   * Model OrderStatus
   */

  export type AggregateOrderStatus = {
    _count: OrderStatusCountAggregateOutputType | null
    _min: OrderStatusMinAggregateOutputType | null
    _max: OrderStatusMaxAggregateOutputType | null
  }

  export type OrderStatusMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type OrderStatusMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type OrderStatusCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type OrderStatusMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type OrderStatusMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type OrderStatusCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type OrderStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderStatus to aggregate.
     */
    where?: OrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderStatuses to fetch.
     */
    orderBy?: OrderStatusOrderByWithRelationInput | OrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderStatuses
    **/
    _count?: true | OrderStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderStatusMaxAggregateInputType
  }

  export type GetOrderStatusAggregateType<T extends OrderStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderStatus[P]>
      : GetScalarType<T[P], AggregateOrderStatus[P]>
  }




  export type OrderStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderStatusWhereInput
    orderBy?: OrderStatusOrderByWithAggregationInput | OrderStatusOrderByWithAggregationInput[]
    by: OrderStatusScalarFieldEnum[] | OrderStatusScalarFieldEnum
    having?: OrderStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderStatusCountAggregateInputType | true
    _min?: OrderStatusMinAggregateInputType
    _max?: OrderStatusMaxAggregateInputType
  }

  export type OrderStatusGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: OrderStatusCountAggregateOutputType | null
    _min: OrderStatusMinAggregateOutputType | null
    _max: OrderStatusMaxAggregateOutputType | null
  }

  type GetOrderStatusGroupByPayload<T extends OrderStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderStatusGroupByOutputType[P]>
            : GetScalarType<T[P], OrderStatusGroupByOutputType[P]>
        }
      >
    >


  export type OrderStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    orders?: boolean | OrderStatus$ordersArgs<ExtArgs>
    _count?: boolean | OrderStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderStatus"]>



  export type OrderStatusSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type OrderStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["orderStatus"]>
  export type OrderStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | OrderStatus$ordersArgs<ExtArgs>
    _count?: boolean | OrderStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderStatus"
    objects: {
      orders: Prisma.$OrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["orderStatus"]>
    composites: {}
  }

  type OrderStatusGetPayload<S extends boolean | null | undefined | OrderStatusDefaultArgs> = $Result.GetResult<Prisma.$OrderStatusPayload, S>

  type OrderStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderStatusCountAggregateInputType | true
    }

  export interface OrderStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderStatus'], meta: { name: 'OrderStatus' } }
    /**
     * Find zero or one OrderStatus that matches the filter.
     * @param {OrderStatusFindUniqueArgs} args - Arguments to find a OrderStatus
     * @example
     * // Get one OrderStatus
     * const orderStatus = await prisma.orderStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderStatusFindUniqueArgs>(args: SelectSubset<T, OrderStatusFindUniqueArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderStatusFindUniqueOrThrowArgs} args - Arguments to find a OrderStatus
     * @example
     * // Get one OrderStatus
     * const orderStatus = await prisma.orderStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusFindFirstArgs} args - Arguments to find a OrderStatus
     * @example
     * // Get one OrderStatus
     * const orderStatus = await prisma.orderStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderStatusFindFirstArgs>(args?: SelectSubset<T, OrderStatusFindFirstArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusFindFirstOrThrowArgs} args - Arguments to find a OrderStatus
     * @example
     * // Get one OrderStatus
     * const orderStatus = await prisma.orderStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderStatuses
     * const orderStatuses = await prisma.orderStatus.findMany()
     * 
     * // Get first 10 OrderStatuses
     * const orderStatuses = await prisma.orderStatus.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const orderStatusWithCodeOnly = await prisma.orderStatus.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends OrderStatusFindManyArgs>(args?: SelectSubset<T, OrderStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderStatus.
     * @param {OrderStatusCreateArgs} args - Arguments to create a OrderStatus.
     * @example
     * // Create one OrderStatus
     * const OrderStatus = await prisma.orderStatus.create({
     *   data: {
     *     // ... data to create a OrderStatus
     *   }
     * })
     * 
     */
    create<T extends OrderStatusCreateArgs>(args: SelectSubset<T, OrderStatusCreateArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderStatuses.
     * @param {OrderStatusCreateManyArgs} args - Arguments to create many OrderStatuses.
     * @example
     * // Create many OrderStatuses
     * const orderStatus = await prisma.orderStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderStatusCreateManyArgs>(args?: SelectSubset<T, OrderStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderStatus.
     * @param {OrderStatusDeleteArgs} args - Arguments to delete one OrderStatus.
     * @example
     * // Delete one OrderStatus
     * const OrderStatus = await prisma.orderStatus.delete({
     *   where: {
     *     // ... filter to delete one OrderStatus
     *   }
     * })
     * 
     */
    delete<T extends OrderStatusDeleteArgs>(args: SelectSubset<T, OrderStatusDeleteArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderStatus.
     * @param {OrderStatusUpdateArgs} args - Arguments to update one OrderStatus.
     * @example
     * // Update one OrderStatus
     * const orderStatus = await prisma.orderStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderStatusUpdateArgs>(args: SelectSubset<T, OrderStatusUpdateArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderStatuses.
     * @param {OrderStatusDeleteManyArgs} args - Arguments to filter OrderStatuses to delete.
     * @example
     * // Delete a few OrderStatuses
     * const { count } = await prisma.orderStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderStatusDeleteManyArgs>(args?: SelectSubset<T, OrderStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderStatuses
     * const orderStatus = await prisma.orderStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderStatusUpdateManyArgs>(args: SelectSubset<T, OrderStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderStatus.
     * @param {OrderStatusUpsertArgs} args - Arguments to update or create a OrderStatus.
     * @example
     * // Update or create a OrderStatus
     * const orderStatus = await prisma.orderStatus.upsert({
     *   create: {
     *     // ... data to create a OrderStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderStatus we want to update
     *   }
     * })
     */
    upsert<T extends OrderStatusUpsertArgs>(args: SelectSubset<T, OrderStatusUpsertArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusCountArgs} args - Arguments to filter OrderStatuses to count.
     * @example
     * // Count the number of OrderStatuses
     * const count = await prisma.orderStatus.count({
     *   where: {
     *     // ... the filter for the OrderStatuses we want to count
     *   }
     * })
    **/
    count<T extends OrderStatusCountArgs>(
      args?: Subset<T, OrderStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderStatusAggregateArgs>(args: Subset<T, OrderStatusAggregateArgs>): Prisma.PrismaPromise<GetOrderStatusAggregateType<T>>

    /**
     * Group by OrderStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderStatusGroupByArgs['orderBy'] }
        : { orderBy?: OrderStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderStatus model
   */
  readonly fields: OrderStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends OrderStatus$ordersArgs<ExtArgs> = {}>(args?: Subset<T, OrderStatus$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderStatus model
   */
  interface OrderStatusFieldRefs {
    readonly code: FieldRef<"OrderStatus", 'String'>
    readonly name: FieldRef<"OrderStatus", 'String'>
    readonly description: FieldRef<"OrderStatus", 'String'>
    readonly color: FieldRef<"OrderStatus", 'String'>
    readonly createdAt: FieldRef<"OrderStatus", 'DateTime'>
    readonly createdBy: FieldRef<"OrderStatus", 'String'>
    readonly updatedAt: FieldRef<"OrderStatus", 'DateTime'>
    readonly updatedBy: FieldRef<"OrderStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrderStatus findUnique
   */
  export type OrderStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderStatus to fetch.
     */
    where: OrderStatusWhereUniqueInput
  }

  /**
   * OrderStatus findUniqueOrThrow
   */
  export type OrderStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderStatus to fetch.
     */
    where: OrderStatusWhereUniqueInput
  }

  /**
   * OrderStatus findFirst
   */
  export type OrderStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderStatus to fetch.
     */
    where?: OrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderStatuses to fetch.
     */
    orderBy?: OrderStatusOrderByWithRelationInput | OrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderStatuses.
     */
    cursor?: OrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderStatuses.
     */
    distinct?: OrderStatusScalarFieldEnum | OrderStatusScalarFieldEnum[]
  }

  /**
   * OrderStatus findFirstOrThrow
   */
  export type OrderStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderStatus to fetch.
     */
    where?: OrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderStatuses to fetch.
     */
    orderBy?: OrderStatusOrderByWithRelationInput | OrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderStatuses.
     */
    cursor?: OrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderStatuses.
     */
    distinct?: OrderStatusScalarFieldEnum | OrderStatusScalarFieldEnum[]
  }

  /**
   * OrderStatus findMany
   */
  export type OrderStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderStatuses to fetch.
     */
    where?: OrderStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderStatuses to fetch.
     */
    orderBy?: OrderStatusOrderByWithRelationInput | OrderStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderStatuses.
     */
    cursor?: OrderStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderStatuses.
     */
    skip?: number
    distinct?: OrderStatusScalarFieldEnum | OrderStatusScalarFieldEnum[]
  }

  /**
   * OrderStatus create
   */
  export type OrderStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderStatus.
     */
    data: XOR<OrderStatusCreateInput, OrderStatusUncheckedCreateInput>
  }

  /**
   * OrderStatus createMany
   */
  export type OrderStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderStatuses.
     */
    data: OrderStatusCreateManyInput | OrderStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderStatus update
   */
  export type OrderStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderStatus.
     */
    data: XOR<OrderStatusUpdateInput, OrderStatusUncheckedUpdateInput>
    /**
     * Choose, which OrderStatus to update.
     */
    where: OrderStatusWhereUniqueInput
  }

  /**
   * OrderStatus updateMany
   */
  export type OrderStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderStatuses.
     */
    data: XOR<OrderStatusUpdateManyMutationInput, OrderStatusUncheckedUpdateManyInput>
    /**
     * Filter which OrderStatuses to update
     */
    where?: OrderStatusWhereInput
    /**
     * Limit how many OrderStatuses to update.
     */
    limit?: number
  }

  /**
   * OrderStatus upsert
   */
  export type OrderStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderStatus to update in case it exists.
     */
    where: OrderStatusWhereUniqueInput
    /**
     * In case the OrderStatus found by the `where` argument doesn't exist, create a new OrderStatus with this data.
     */
    create: XOR<OrderStatusCreateInput, OrderStatusUncheckedCreateInput>
    /**
     * In case the OrderStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderStatusUpdateInput, OrderStatusUncheckedUpdateInput>
  }

  /**
   * OrderStatus delete
   */
  export type OrderStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
    /**
     * Filter which OrderStatus to delete.
     */
    where: OrderStatusWhereUniqueInput
  }

  /**
   * OrderStatus deleteMany
   */
  export type OrderStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderStatuses to delete
     */
    where?: OrderStatusWhereInput
    /**
     * Limit how many OrderStatuses to delete.
     */
    limit?: number
  }

  /**
   * OrderStatus.orders
   */
  export type OrderStatus$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * OrderStatus without action
   */
  export type OrderStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderStatus
     */
    select?: OrderStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderStatus
     */
    omit?: OrderStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderStatusInclude<ExtArgs> | null
  }


  /**
   * Model OrderItemStatus
   */

  export type AggregateOrderItemStatus = {
    _count: OrderItemStatusCountAggregateOutputType | null
    _min: OrderItemStatusMinAggregateOutputType | null
    _max: OrderItemStatusMaxAggregateOutputType | null
  }

  export type OrderItemStatusMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type OrderItemStatusMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type OrderItemStatusCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type OrderItemStatusMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type OrderItemStatusMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type OrderItemStatusCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type OrderItemStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItemStatus to aggregate.
     */
    where?: OrderItemStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItemStatuses to fetch.
     */
    orderBy?: OrderItemStatusOrderByWithRelationInput | OrderItemStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItemStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItemStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItemStatuses
    **/
    _count?: true | OrderItemStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemStatusMaxAggregateInputType
  }

  export type GetOrderItemStatusAggregateType<T extends OrderItemStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItemStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItemStatus[P]>
      : GetScalarType<T[P], AggregateOrderItemStatus[P]>
  }




  export type OrderItemStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemStatusWhereInput
    orderBy?: OrderItemStatusOrderByWithAggregationInput | OrderItemStatusOrderByWithAggregationInput[]
    by: OrderItemStatusScalarFieldEnum[] | OrderItemStatusScalarFieldEnum
    having?: OrderItemStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemStatusCountAggregateInputType | true
    _min?: OrderItemStatusMinAggregateInputType
    _max?: OrderItemStatusMaxAggregateInputType
  }

  export type OrderItemStatusGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: OrderItemStatusCountAggregateOutputType | null
    _min: OrderItemStatusMinAggregateOutputType | null
    _max: OrderItemStatusMaxAggregateOutputType | null
  }

  type GetOrderItemStatusGroupByPayload<T extends OrderItemStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemStatusGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemStatusGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    orderItems?: boolean | OrderItemStatus$orderItemsArgs<ExtArgs>
    _count?: boolean | OrderItemStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItemStatus"]>



  export type OrderItemStatusSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type OrderItemStatusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["orderItemStatus"]>
  export type OrderItemStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | OrderItemStatus$orderItemsArgs<ExtArgs>
    _count?: boolean | OrderItemStatusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderItemStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItemStatus"
    objects: {
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["orderItemStatus"]>
    composites: {}
  }

  type OrderItemStatusGetPayload<S extends boolean | null | undefined | OrderItemStatusDefaultArgs> = $Result.GetResult<Prisma.$OrderItemStatusPayload, S>

  type OrderItemStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemStatusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemStatusCountAggregateInputType | true
    }

  export interface OrderItemStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItemStatus'], meta: { name: 'OrderItemStatus' } }
    /**
     * Find zero or one OrderItemStatus that matches the filter.
     * @param {OrderItemStatusFindUniqueArgs} args - Arguments to find a OrderItemStatus
     * @example
     * // Get one OrderItemStatus
     * const orderItemStatus = await prisma.orderItemStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemStatusFindUniqueArgs>(args: SelectSubset<T, OrderItemStatusFindUniqueArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItemStatus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemStatusFindUniqueOrThrowArgs} args - Arguments to find a OrderItemStatus
     * @example
     * // Get one OrderItemStatus
     * const orderItemStatus = await prisma.orderItemStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItemStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusFindFirstArgs} args - Arguments to find a OrderItemStatus
     * @example
     * // Get one OrderItemStatus
     * const orderItemStatus = await prisma.orderItemStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemStatusFindFirstArgs>(args?: SelectSubset<T, OrderItemStatusFindFirstArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItemStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusFindFirstOrThrowArgs} args - Arguments to find a OrderItemStatus
     * @example
     * // Get one OrderItemStatus
     * const orderItemStatus = await prisma.orderItemStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItemStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItemStatuses
     * const orderItemStatuses = await prisma.orderItemStatus.findMany()
     * 
     * // Get first 10 OrderItemStatuses
     * const orderItemStatuses = await prisma.orderItemStatus.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const orderItemStatusWithCodeOnly = await prisma.orderItemStatus.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends OrderItemStatusFindManyArgs>(args?: SelectSubset<T, OrderItemStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItemStatus.
     * @param {OrderItemStatusCreateArgs} args - Arguments to create a OrderItemStatus.
     * @example
     * // Create one OrderItemStatus
     * const OrderItemStatus = await prisma.orderItemStatus.create({
     *   data: {
     *     // ... data to create a OrderItemStatus
     *   }
     * })
     * 
     */
    create<T extends OrderItemStatusCreateArgs>(args: SelectSubset<T, OrderItemStatusCreateArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItemStatuses.
     * @param {OrderItemStatusCreateManyArgs} args - Arguments to create many OrderItemStatuses.
     * @example
     * // Create many OrderItemStatuses
     * const orderItemStatus = await prisma.orderItemStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemStatusCreateManyArgs>(args?: SelectSubset<T, OrderItemStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderItemStatus.
     * @param {OrderItemStatusDeleteArgs} args - Arguments to delete one OrderItemStatus.
     * @example
     * // Delete one OrderItemStatus
     * const OrderItemStatus = await prisma.orderItemStatus.delete({
     *   where: {
     *     // ... filter to delete one OrderItemStatus
     *   }
     * })
     * 
     */
    delete<T extends OrderItemStatusDeleteArgs>(args: SelectSubset<T, OrderItemStatusDeleteArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItemStatus.
     * @param {OrderItemStatusUpdateArgs} args - Arguments to update one OrderItemStatus.
     * @example
     * // Update one OrderItemStatus
     * const orderItemStatus = await prisma.orderItemStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemStatusUpdateArgs>(args: SelectSubset<T, OrderItemStatusUpdateArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItemStatuses.
     * @param {OrderItemStatusDeleteManyArgs} args - Arguments to filter OrderItemStatuses to delete.
     * @example
     * // Delete a few OrderItemStatuses
     * const { count } = await prisma.orderItemStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemStatusDeleteManyArgs>(args?: SelectSubset<T, OrderItemStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItemStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItemStatuses
     * const orderItemStatus = await prisma.orderItemStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemStatusUpdateManyArgs>(args: SelectSubset<T, OrderItemStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItemStatus.
     * @param {OrderItemStatusUpsertArgs} args - Arguments to update or create a OrderItemStatus.
     * @example
     * // Update or create a OrderItemStatus
     * const orderItemStatus = await prisma.orderItemStatus.upsert({
     *   create: {
     *     // ... data to create a OrderItemStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItemStatus we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemStatusUpsertArgs>(args: SelectSubset<T, OrderItemStatusUpsertArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItemStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusCountArgs} args - Arguments to filter OrderItemStatuses to count.
     * @example
     * // Count the number of OrderItemStatuses
     * const count = await prisma.orderItemStatus.count({
     *   where: {
     *     // ... the filter for the OrderItemStatuses we want to count
     *   }
     * })
    **/
    count<T extends OrderItemStatusCountArgs>(
      args?: Subset<T, OrderItemStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItemStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemStatusAggregateArgs>(args: Subset<T, OrderItemStatusAggregateArgs>): Prisma.PrismaPromise<GetOrderItemStatusAggregateType<T>>

    /**
     * Group by OrderItemStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemStatusGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItemStatus model
   */
  readonly fields: OrderItemStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItemStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderItems<T extends OrderItemStatus$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, OrderItemStatus$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItemStatus model
   */
  interface OrderItemStatusFieldRefs {
    readonly code: FieldRef<"OrderItemStatus", 'String'>
    readonly name: FieldRef<"OrderItemStatus", 'String'>
    readonly description: FieldRef<"OrderItemStatus", 'String'>
    readonly color: FieldRef<"OrderItemStatus", 'String'>
    readonly createdAt: FieldRef<"OrderItemStatus", 'DateTime'>
    readonly createdBy: FieldRef<"OrderItemStatus", 'String'>
    readonly updatedAt: FieldRef<"OrderItemStatus", 'DateTime'>
    readonly updatedBy: FieldRef<"OrderItemStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrderItemStatus findUnique
   */
  export type OrderItemStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderItemStatus to fetch.
     */
    where: OrderItemStatusWhereUniqueInput
  }

  /**
   * OrderItemStatus findUniqueOrThrow
   */
  export type OrderItemStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderItemStatus to fetch.
     */
    where: OrderItemStatusWhereUniqueInput
  }

  /**
   * OrderItemStatus findFirst
   */
  export type OrderItemStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderItemStatus to fetch.
     */
    where?: OrderItemStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItemStatuses to fetch.
     */
    orderBy?: OrderItemStatusOrderByWithRelationInput | OrderItemStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItemStatuses.
     */
    cursor?: OrderItemStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItemStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItemStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItemStatuses.
     */
    distinct?: OrderItemStatusScalarFieldEnum | OrderItemStatusScalarFieldEnum[]
  }

  /**
   * OrderItemStatus findFirstOrThrow
   */
  export type OrderItemStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderItemStatus to fetch.
     */
    where?: OrderItemStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItemStatuses to fetch.
     */
    orderBy?: OrderItemStatusOrderByWithRelationInput | OrderItemStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItemStatuses.
     */
    cursor?: OrderItemStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItemStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItemStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItemStatuses.
     */
    distinct?: OrderItemStatusScalarFieldEnum | OrderItemStatusScalarFieldEnum[]
  }

  /**
   * OrderItemStatus findMany
   */
  export type OrderItemStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * Filter, which OrderItemStatuses to fetch.
     */
    where?: OrderItemStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItemStatuses to fetch.
     */
    orderBy?: OrderItemStatusOrderByWithRelationInput | OrderItemStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItemStatuses.
     */
    cursor?: OrderItemStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItemStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItemStatuses.
     */
    skip?: number
    distinct?: OrderItemStatusScalarFieldEnum | OrderItemStatusScalarFieldEnum[]
  }

  /**
   * OrderItemStatus create
   */
  export type OrderItemStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItemStatus.
     */
    data: XOR<OrderItemStatusCreateInput, OrderItemStatusUncheckedCreateInput>
  }

  /**
   * OrderItemStatus createMany
   */
  export type OrderItemStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItemStatuses.
     */
    data: OrderItemStatusCreateManyInput | OrderItemStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItemStatus update
   */
  export type OrderItemStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItemStatus.
     */
    data: XOR<OrderItemStatusUpdateInput, OrderItemStatusUncheckedUpdateInput>
    /**
     * Choose, which OrderItemStatus to update.
     */
    where: OrderItemStatusWhereUniqueInput
  }

  /**
   * OrderItemStatus updateMany
   */
  export type OrderItemStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItemStatuses.
     */
    data: XOR<OrderItemStatusUpdateManyMutationInput, OrderItemStatusUncheckedUpdateManyInput>
    /**
     * Filter which OrderItemStatuses to update
     */
    where?: OrderItemStatusWhereInput
    /**
     * Limit how many OrderItemStatuses to update.
     */
    limit?: number
  }

  /**
   * OrderItemStatus upsert
   */
  export type OrderItemStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItemStatus to update in case it exists.
     */
    where: OrderItemStatusWhereUniqueInput
    /**
     * In case the OrderItemStatus found by the `where` argument doesn't exist, create a new OrderItemStatus with this data.
     */
    create: XOR<OrderItemStatusCreateInput, OrderItemStatusUncheckedCreateInput>
    /**
     * In case the OrderItemStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemStatusUpdateInput, OrderItemStatusUncheckedUpdateInput>
  }

  /**
   * OrderItemStatus delete
   */
  export type OrderItemStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
    /**
     * Filter which OrderItemStatus to delete.
     */
    where: OrderItemStatusWhereUniqueInput
  }

  /**
   * OrderItemStatus deleteMany
   */
  export type OrderItemStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItemStatuses to delete
     */
    where?: OrderItemStatusWhereInput
    /**
     * Limit how many OrderItemStatuses to delete.
     */
    limit?: number
  }

  /**
   * OrderItemStatus.orderItems
   */
  export type OrderItemStatus$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItemStatus without action
   */
  export type OrderItemStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItemStatus
     */
    select?: OrderItemStatusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItemStatus
     */
    omit?: OrderItemStatusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemStatusInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    commandId: number | null
    subtotal: Decimal | null
    discount: Decimal | null
    taxAmount: Decimal | null
    totalAmount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    commandId: number | null
    subtotal: Decimal | null
    discount: Decimal | null
    taxAmount: Decimal | null
    totalAmount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    code: string | null
    commandId: number | null
    userDocumentCreator: string | null
    createdAt: Date | null
    customerDocument: string | null
    subtotal: Decimal | null
    discount: Decimal | null
    taxAmount: Decimal | null
    totalAmount: Decimal | null
    orderStatusCode: string | null
    userDocumentCloser: string | null
    closedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type OrderMaxAggregateOutputType = {
    code: string | null
    commandId: number | null
    userDocumentCreator: string | null
    createdAt: Date | null
    customerDocument: string | null
    subtotal: Decimal | null
    discount: Decimal | null
    taxAmount: Decimal | null
    totalAmount: Decimal | null
    orderStatusCode: string | null
    userDocumentCloser: string | null
    closedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type OrderCountAggregateOutputType = {
    code: number
    commandId: number
    userDocumentCreator: number
    createdAt: number
    customerDocument: number
    subtotal: number
    discount: number
    taxAmount: number
    totalAmount: number
    orderStatusCode: number
    userDocumentCloser: number
    closedAt: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    commandId?: true
    subtotal?: true
    discount?: true
    taxAmount?: true
    totalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    commandId?: true
    subtotal?: true
    discount?: true
    taxAmount?: true
    totalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    code?: true
    commandId?: true
    userDocumentCreator?: true
    createdAt?: true
    customerDocument?: true
    subtotal?: true
    discount?: true
    taxAmount?: true
    totalAmount?: true
    orderStatusCode?: true
    userDocumentCloser?: true
    closedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type OrderMaxAggregateInputType = {
    code?: true
    commandId?: true
    userDocumentCreator?: true
    createdAt?: true
    customerDocument?: true
    subtotal?: true
    discount?: true
    taxAmount?: true
    totalAmount?: true
    orderStatusCode?: true
    userDocumentCloser?: true
    closedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type OrderCountAggregateInputType = {
    code?: true
    commandId?: true
    userDocumentCreator?: true
    createdAt?: true
    customerDocument?: true
    subtotal?: true
    discount?: true
    taxAmount?: true
    totalAmount?: true
    orderStatusCode?: true
    userDocumentCloser?: true
    closedAt?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt: Date
    customerDocument: string
    subtotal: Decimal
    discount: Decimal
    taxAmount: Decimal
    totalAmount: Decimal
    orderStatusCode: string
    userDocumentCloser: string | null
    closedAt: Date | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    commandId?: boolean
    userDocumentCreator?: boolean
    createdAt?: boolean
    customerDocument?: boolean
    subtotal?: boolean
    discount?: boolean
    taxAmount?: boolean
    totalAmount?: boolean
    orderStatusCode?: boolean
    userDocumentCloser?: boolean
    closedAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    command?: boolean | CommandDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    orderStatus?: boolean | OrderStatusDefaultArgs<ExtArgs>
    closer?: boolean | Order$closerArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    payment?: boolean | Order$paymentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>



  export type OrderSelectScalar = {
    code?: boolean
    commandId?: boolean
    userDocumentCreator?: boolean
    createdAt?: boolean
    customerDocument?: boolean
    subtotal?: boolean
    discount?: boolean
    taxAmount?: boolean
    totalAmount?: boolean
    orderStatusCode?: boolean
    userDocumentCloser?: boolean
    closedAt?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "commandId" | "userDocumentCreator" | "createdAt" | "customerDocument" | "subtotal" | "discount" | "taxAmount" | "totalAmount" | "orderStatusCode" | "userDocumentCloser" | "closedAt" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    command?: boolean | CommandDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    orderStatus?: boolean | OrderStatusDefaultArgs<ExtArgs>
    closer?: boolean | Order$closerArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    payment?: boolean | Order$paymentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      command: Prisma.$CommandPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      customer: Prisma.$CustomerPayload<ExtArgs>
      orderStatus: Prisma.$OrderStatusPayload<ExtArgs>
      closer: Prisma.$UserPayload<ExtArgs> | null
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      payment: Prisma.$PaymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      commandId: number
      userDocumentCreator: string
      createdAt: Date
      customerDocument: string
      subtotal: Prisma.Decimal
      discount: Prisma.Decimal
      taxAmount: Prisma.Decimal
      totalAmount: Prisma.Decimal
      orderStatusCode: string
      userDocumentCloser: string | null
      closedAt: Date | null
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const orderWithCodeOnly = await prisma.order.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    command<T extends CommandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandDefaultArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderStatus<T extends OrderStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderStatusDefaultArgs<ExtArgs>>): Prisma__OrderStatusClient<$Result.GetResult<Prisma.$OrderStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    closer<T extends Order$closerArgs<ExtArgs> = {}>(args?: Subset<T, Order$closerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Order$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payment<T extends Order$paymentArgs<ExtArgs> = {}>(args?: Subset<T, Order$paymentArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly code: FieldRef<"Order", 'String'>
    readonly commandId: FieldRef<"Order", 'Int'>
    readonly userDocumentCreator: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly customerDocument: FieldRef<"Order", 'String'>
    readonly subtotal: FieldRef<"Order", 'Decimal'>
    readonly discount: FieldRef<"Order", 'Decimal'>
    readonly taxAmount: FieldRef<"Order", 'Decimal'>
    readonly totalAmount: FieldRef<"Order", 'Decimal'>
    readonly orderStatusCode: FieldRef<"Order", 'String'>
    readonly userDocumentCloser: FieldRef<"Order", 'String'>
    readonly closedAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly updatedBy: FieldRef<"Order", 'String'>
    readonly deletedAt: FieldRef<"Order", 'DateTime'>
    readonly deletedBy: FieldRef<"Order", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.closer
   */
  export type Order$closerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Order.orderItems
   */
  export type Order$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.payment
   */
  export type Order$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    commandId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: Decimal | null
    discount: Decimal | null
    totalPrice: Decimal | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    commandId: number | null
    productId: number | null
    quantity: number | null
    unitPrice: Decimal | null
    discount: Decimal | null
    totalPrice: Decimal | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    commandId: number | null
    orderCode: string | null
    productId: number | null
    orderItemStatusCode: string | null
    quantity: number | null
    specialInstructions: string | null
    unitPrice: Decimal | null
    discount: Decimal | null
    totalPrice: Decimal | null
    notes: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    commandId: number | null
    orderCode: string | null
    productId: number | null
    orderItemStatusCode: string | null
    quantity: number | null
    specialInstructions: string | null
    unitPrice: Decimal | null
    discount: Decimal | null
    totalPrice: Decimal | null
    notes: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    commandId: number
    orderCode: number
    productId: number
    orderItemStatusCode: number
    quantity: number
    specialInstructions: number
    unitPrice: number
    discount: number
    totalPrice: number
    notes: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    commandId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    discount?: true
    totalPrice?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    commandId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    discount?: true
    totalPrice?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    commandId?: true
    orderCode?: true
    productId?: true
    orderItemStatusCode?: true
    quantity?: true
    specialInstructions?: true
    unitPrice?: true
    discount?: true
    totalPrice?: true
    notes?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    commandId?: true
    orderCode?: true
    productId?: true
    orderItemStatusCode?: true
    quantity?: true
    specialInstructions?: true
    unitPrice?: true
    discount?: true
    totalPrice?: true
    notes?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    commandId?: true
    orderCode?: true
    productId?: true
    orderItemStatusCode?: true
    quantity?: true
    specialInstructions?: true
    unitPrice?: true
    discount?: true
    totalPrice?: true
    notes?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: number
    commandId: number
    orderCode: string | null
    productId: number
    orderItemStatusCode: string
    quantity: number
    specialInstructions: string | null
    unitPrice: Decimal
    discount: Decimal
    totalPrice: Decimal
    notes: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    commandId?: boolean
    orderCode?: boolean
    productId?: boolean
    orderItemStatusCode?: boolean
    quantity?: boolean
    specialInstructions?: boolean
    unitPrice?: boolean
    discount?: boolean
    totalPrice?: boolean
    notes?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    command?: boolean | CommandDefaultArgs<ExtArgs>
    order?: boolean | OrderItem$orderArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    orderItemStatus?: boolean | OrderItemStatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>



  export type OrderItemSelectScalar = {
    id?: boolean
    commandId?: boolean
    orderCode?: boolean
    productId?: boolean
    orderItemStatusCode?: boolean
    quantity?: boolean
    specialInstructions?: boolean
    unitPrice?: boolean
    discount?: boolean
    totalPrice?: boolean
    notes?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "commandId" | "orderCode" | "productId" | "orderItemStatusCode" | "quantity" | "specialInstructions" | "unitPrice" | "discount" | "totalPrice" | "notes" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    command?: boolean | CommandDefaultArgs<ExtArgs>
    order?: boolean | OrderItem$orderArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    orderItemStatus?: boolean | OrderItemStatusDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      command: Prisma.$CommandPayload<ExtArgs>
      order: Prisma.$OrderPayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs>
      orderItemStatus: Prisma.$OrderItemStatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      commandId: number
      orderCode: string | null
      productId: number
      orderItemStatusCode: string
      quantity: number
      specialInstructions: string | null
      unitPrice: Prisma.Decimal
      discount: Prisma.Decimal
      totalPrice: Prisma.Decimal
      notes: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    command<T extends CommandDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommandDefaultArgs<ExtArgs>>): Prisma__CommandClient<$Result.GetResult<Prisma.$CommandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    order<T extends OrderItem$orderArgs<ExtArgs> = {}>(args?: Subset<T, OrderItem$orderArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderItemStatus<T extends OrderItemStatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderItemStatusDefaultArgs<ExtArgs>>): Prisma__OrderItemStatusClient<$Result.GetResult<Prisma.$OrderItemStatusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'Int'>
    readonly commandId: FieldRef<"OrderItem", 'Int'>
    readonly orderCode: FieldRef<"OrderItem", 'String'>
    readonly productId: FieldRef<"OrderItem", 'Int'>
    readonly orderItemStatusCode: FieldRef<"OrderItem", 'String'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly specialInstructions: FieldRef<"OrderItem", 'String'>
    readonly unitPrice: FieldRef<"OrderItem", 'Decimal'>
    readonly discount: FieldRef<"OrderItem", 'Decimal'>
    readonly totalPrice: FieldRef<"OrderItem", 'Decimal'>
    readonly notes: FieldRef<"OrderItem", 'String'>
    readonly createdAt: FieldRef<"OrderItem", 'DateTime'>
    readonly createdBy: FieldRef<"OrderItem", 'String'>
    readonly updatedAt: FieldRef<"OrderItem", 'DateTime'>
    readonly updatedBy: FieldRef<"OrderItem", 'String'>
    readonly deletedAt: FieldRef<"OrderItem", 'DateTime'>
    readonly deletedBy: FieldRef<"OrderItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem.order
   */
  export type OrderItem$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model CashBox
   */

  export type AggregateCashBox = {
    _count: CashBoxCountAggregateOutputType | null
    _avg: CashBoxAvgAggregateOutputType | null
    _sum: CashBoxSumAggregateOutputType | null
    _min: CashBoxMinAggregateOutputType | null
    _max: CashBoxMaxAggregateOutputType | null
  }

  export type CashBoxAvgAggregateOutputType = {
    id: number | null
    initialAmount: Decimal | null
    finalAmount: Decimal | null
    totalSales: Decimal | null
  }

  export type CashBoxSumAggregateOutputType = {
    id: number | null
    initialAmount: Decimal | null
    finalAmount: Decimal | null
    totalSales: Decimal | null
  }

  export type CashBoxMinAggregateOutputType = {
    id: number | null
    userDocumentOpened: string | null
    openedAt: Date | null
    initialAmount: Decimal | null
    userDocumentClosed: string | null
    closedAt: Date | null
    finalAmount: Decimal | null
    totalSales: Decimal | null
    notes: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CashBoxMaxAggregateOutputType = {
    id: number | null
    userDocumentOpened: string | null
    openedAt: Date | null
    initialAmount: Decimal | null
    userDocumentClosed: string | null
    closedAt: Date | null
    finalAmount: Decimal | null
    totalSales: Decimal | null
    notes: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CashBoxCountAggregateOutputType = {
    id: number
    userDocumentOpened: number
    openedAt: number
    initialAmount: number
    userDocumentClosed: number
    closedAt: number
    finalAmount: number
    totalSales: number
    notes: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type CashBoxAvgAggregateInputType = {
    id?: true
    initialAmount?: true
    finalAmount?: true
    totalSales?: true
  }

  export type CashBoxSumAggregateInputType = {
    id?: true
    initialAmount?: true
    finalAmount?: true
    totalSales?: true
  }

  export type CashBoxMinAggregateInputType = {
    id?: true
    userDocumentOpened?: true
    openedAt?: true
    initialAmount?: true
    userDocumentClosed?: true
    closedAt?: true
    finalAmount?: true
    totalSales?: true
    notes?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CashBoxMaxAggregateInputType = {
    id?: true
    userDocumentOpened?: true
    openedAt?: true
    initialAmount?: true
    userDocumentClosed?: true
    closedAt?: true
    finalAmount?: true
    totalSales?: true
    notes?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CashBoxCountAggregateInputType = {
    id?: true
    userDocumentOpened?: true
    openedAt?: true
    initialAmount?: true
    userDocumentClosed?: true
    closedAt?: true
    finalAmount?: true
    totalSales?: true
    notes?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type CashBoxAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashBox to aggregate.
     */
    where?: CashBoxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxes to fetch.
     */
    orderBy?: CashBoxOrderByWithRelationInput | CashBoxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashBoxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashBoxes
    **/
    _count?: true | CashBoxCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CashBoxAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CashBoxSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashBoxMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashBoxMaxAggregateInputType
  }

  export type GetCashBoxAggregateType<T extends CashBoxAggregateArgs> = {
        [P in keyof T & keyof AggregateCashBox]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashBox[P]>
      : GetScalarType<T[P], AggregateCashBox[P]>
  }




  export type CashBoxGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxWhereInput
    orderBy?: CashBoxOrderByWithAggregationInput | CashBoxOrderByWithAggregationInput[]
    by: CashBoxScalarFieldEnum[] | CashBoxScalarFieldEnum
    having?: CashBoxScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashBoxCountAggregateInputType | true
    _avg?: CashBoxAvgAggregateInputType
    _sum?: CashBoxSumAggregateInputType
    _min?: CashBoxMinAggregateInputType
    _max?: CashBoxMaxAggregateInputType
  }

  export type CashBoxGroupByOutputType = {
    id: number
    userDocumentOpened: string
    openedAt: Date
    initialAmount: Decimal
    userDocumentClosed: string | null
    closedAt: Date | null
    finalAmount: Decimal | null
    totalSales: Decimal | null
    notes: string | null
    updatedAt: Date | null
    updatedBy: string | null
    _count: CashBoxCountAggregateOutputType | null
    _avg: CashBoxAvgAggregateOutputType | null
    _sum: CashBoxSumAggregateOutputType | null
    _min: CashBoxMinAggregateOutputType | null
    _max: CashBoxMaxAggregateOutputType | null
  }

  type GetCashBoxGroupByPayload<T extends CashBoxGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashBoxGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashBoxGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashBoxGroupByOutputType[P]>
            : GetScalarType<T[P], CashBoxGroupByOutputType[P]>
        }
      >
    >


  export type CashBoxSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userDocumentOpened?: boolean
    openedAt?: boolean
    initialAmount?: boolean
    userDocumentClosed?: boolean
    closedAt?: boolean
    finalAmount?: boolean
    totalSales?: boolean
    notes?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    opened?: boolean | UserDefaultArgs<ExtArgs>
    closed?: boolean | CashBox$closedArgs<ExtArgs>
    cashboxMovements?: boolean | CashBox$cashboxMovementsArgs<ExtArgs>
    payments?: boolean | CashBox$paymentsArgs<ExtArgs>
    _count?: boolean | CashBoxCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashBox"]>



  export type CashBoxSelectScalar = {
    id?: boolean
    userDocumentOpened?: boolean
    openedAt?: boolean
    initialAmount?: boolean
    userDocumentClosed?: boolean
    closedAt?: boolean
    finalAmount?: boolean
    totalSales?: boolean
    notes?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type CashBoxOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userDocumentOpened" | "openedAt" | "initialAmount" | "userDocumentClosed" | "closedAt" | "finalAmount" | "totalSales" | "notes" | "updatedAt" | "updatedBy", ExtArgs["result"]["cashBox"]>
  export type CashBoxInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opened?: boolean | UserDefaultArgs<ExtArgs>
    closed?: boolean | CashBox$closedArgs<ExtArgs>
    cashboxMovements?: boolean | CashBox$cashboxMovementsArgs<ExtArgs>
    payments?: boolean | CashBox$paymentsArgs<ExtArgs>
    _count?: boolean | CashBoxCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CashBoxPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashBox"
    objects: {
      opened: Prisma.$UserPayload<ExtArgs>
      closed: Prisma.$UserPayload<ExtArgs> | null
      cashboxMovements: Prisma.$CashBoxMovementPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userDocumentOpened: string
      openedAt: Date
      initialAmount: Prisma.Decimal
      userDocumentClosed: string | null
      closedAt: Date | null
      finalAmount: Prisma.Decimal | null
      totalSales: Prisma.Decimal | null
      notes: string | null
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["cashBox"]>
    composites: {}
  }

  type CashBoxGetPayload<S extends boolean | null | undefined | CashBoxDefaultArgs> = $Result.GetResult<Prisma.$CashBoxPayload, S>

  type CashBoxCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CashBoxFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CashBoxCountAggregateInputType | true
    }

  export interface CashBoxDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashBox'], meta: { name: 'CashBox' } }
    /**
     * Find zero or one CashBox that matches the filter.
     * @param {CashBoxFindUniqueArgs} args - Arguments to find a CashBox
     * @example
     * // Get one CashBox
     * const cashBox = await prisma.cashBox.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashBoxFindUniqueArgs>(args: SelectSubset<T, CashBoxFindUniqueArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CashBox that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CashBoxFindUniqueOrThrowArgs} args - Arguments to find a CashBox
     * @example
     * // Get one CashBox
     * const cashBox = await prisma.cashBox.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashBoxFindUniqueOrThrowArgs>(args: SelectSubset<T, CashBoxFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashBox that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxFindFirstArgs} args - Arguments to find a CashBox
     * @example
     * // Get one CashBox
     * const cashBox = await prisma.cashBox.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashBoxFindFirstArgs>(args?: SelectSubset<T, CashBoxFindFirstArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashBox that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxFindFirstOrThrowArgs} args - Arguments to find a CashBox
     * @example
     * // Get one CashBox
     * const cashBox = await prisma.cashBox.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashBoxFindFirstOrThrowArgs>(args?: SelectSubset<T, CashBoxFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CashBoxes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashBoxes
     * const cashBoxes = await prisma.cashBox.findMany()
     * 
     * // Get first 10 CashBoxes
     * const cashBoxes = await prisma.cashBox.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cashBoxWithIdOnly = await prisma.cashBox.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CashBoxFindManyArgs>(args?: SelectSubset<T, CashBoxFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CashBox.
     * @param {CashBoxCreateArgs} args - Arguments to create a CashBox.
     * @example
     * // Create one CashBox
     * const CashBox = await prisma.cashBox.create({
     *   data: {
     *     // ... data to create a CashBox
     *   }
     * })
     * 
     */
    create<T extends CashBoxCreateArgs>(args: SelectSubset<T, CashBoxCreateArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CashBoxes.
     * @param {CashBoxCreateManyArgs} args - Arguments to create many CashBoxes.
     * @example
     * // Create many CashBoxes
     * const cashBox = await prisma.cashBox.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashBoxCreateManyArgs>(args?: SelectSubset<T, CashBoxCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CashBox.
     * @param {CashBoxDeleteArgs} args - Arguments to delete one CashBox.
     * @example
     * // Delete one CashBox
     * const CashBox = await prisma.cashBox.delete({
     *   where: {
     *     // ... filter to delete one CashBox
     *   }
     * })
     * 
     */
    delete<T extends CashBoxDeleteArgs>(args: SelectSubset<T, CashBoxDeleteArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CashBox.
     * @param {CashBoxUpdateArgs} args - Arguments to update one CashBox.
     * @example
     * // Update one CashBox
     * const cashBox = await prisma.cashBox.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashBoxUpdateArgs>(args: SelectSubset<T, CashBoxUpdateArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CashBoxes.
     * @param {CashBoxDeleteManyArgs} args - Arguments to filter CashBoxes to delete.
     * @example
     * // Delete a few CashBoxes
     * const { count } = await prisma.cashBox.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashBoxDeleteManyArgs>(args?: SelectSubset<T, CashBoxDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashBoxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashBoxes
     * const cashBox = await prisma.cashBox.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashBoxUpdateManyArgs>(args: SelectSubset<T, CashBoxUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CashBox.
     * @param {CashBoxUpsertArgs} args - Arguments to update or create a CashBox.
     * @example
     * // Update or create a CashBox
     * const cashBox = await prisma.cashBox.upsert({
     *   create: {
     *     // ... data to create a CashBox
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashBox we want to update
     *   }
     * })
     */
    upsert<T extends CashBoxUpsertArgs>(args: SelectSubset<T, CashBoxUpsertArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CashBoxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxCountArgs} args - Arguments to filter CashBoxes to count.
     * @example
     * // Count the number of CashBoxes
     * const count = await prisma.cashBox.count({
     *   where: {
     *     // ... the filter for the CashBoxes we want to count
     *   }
     * })
    **/
    count<T extends CashBoxCountArgs>(
      args?: Subset<T, CashBoxCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashBoxCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashBox.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashBoxAggregateArgs>(args: Subset<T, CashBoxAggregateArgs>): Prisma.PrismaPromise<GetCashBoxAggregateType<T>>

    /**
     * Group by CashBox.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashBoxGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashBoxGroupByArgs['orderBy'] }
        : { orderBy?: CashBoxGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashBoxGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashBoxGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashBox model
   */
  readonly fields: CashBoxFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashBox.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashBoxClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    opened<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    closed<T extends CashBox$closedArgs<ExtArgs> = {}>(args?: Subset<T, CashBox$closedArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    cashboxMovements<T extends CashBox$cashboxMovementsArgs<ExtArgs> = {}>(args?: Subset<T, CashBox$cashboxMovementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends CashBox$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, CashBox$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashBox model
   */
  interface CashBoxFieldRefs {
    readonly id: FieldRef<"CashBox", 'Int'>
    readonly userDocumentOpened: FieldRef<"CashBox", 'String'>
    readonly openedAt: FieldRef<"CashBox", 'DateTime'>
    readonly initialAmount: FieldRef<"CashBox", 'Decimal'>
    readonly userDocumentClosed: FieldRef<"CashBox", 'String'>
    readonly closedAt: FieldRef<"CashBox", 'DateTime'>
    readonly finalAmount: FieldRef<"CashBox", 'Decimal'>
    readonly totalSales: FieldRef<"CashBox", 'Decimal'>
    readonly notes: FieldRef<"CashBox", 'String'>
    readonly updatedAt: FieldRef<"CashBox", 'DateTime'>
    readonly updatedBy: FieldRef<"CashBox", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CashBox findUnique
   */
  export type CashBoxFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * Filter, which CashBox to fetch.
     */
    where: CashBoxWhereUniqueInput
  }

  /**
   * CashBox findUniqueOrThrow
   */
  export type CashBoxFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * Filter, which CashBox to fetch.
     */
    where: CashBoxWhereUniqueInput
  }

  /**
   * CashBox findFirst
   */
  export type CashBoxFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * Filter, which CashBox to fetch.
     */
    where?: CashBoxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxes to fetch.
     */
    orderBy?: CashBoxOrderByWithRelationInput | CashBoxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashBoxes.
     */
    cursor?: CashBoxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashBoxes.
     */
    distinct?: CashBoxScalarFieldEnum | CashBoxScalarFieldEnum[]
  }

  /**
   * CashBox findFirstOrThrow
   */
  export type CashBoxFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * Filter, which CashBox to fetch.
     */
    where?: CashBoxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxes to fetch.
     */
    orderBy?: CashBoxOrderByWithRelationInput | CashBoxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashBoxes.
     */
    cursor?: CashBoxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashBoxes.
     */
    distinct?: CashBoxScalarFieldEnum | CashBoxScalarFieldEnum[]
  }

  /**
   * CashBox findMany
   */
  export type CashBoxFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxes to fetch.
     */
    where?: CashBoxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxes to fetch.
     */
    orderBy?: CashBoxOrderByWithRelationInput | CashBoxOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashBoxes.
     */
    cursor?: CashBoxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxes.
     */
    skip?: number
    distinct?: CashBoxScalarFieldEnum | CashBoxScalarFieldEnum[]
  }

  /**
   * CashBox create
   */
  export type CashBoxCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * The data needed to create a CashBox.
     */
    data: XOR<CashBoxCreateInput, CashBoxUncheckedCreateInput>
  }

  /**
   * CashBox createMany
   */
  export type CashBoxCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashBoxes.
     */
    data: CashBoxCreateManyInput | CashBoxCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CashBox update
   */
  export type CashBoxUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * The data needed to update a CashBox.
     */
    data: XOR<CashBoxUpdateInput, CashBoxUncheckedUpdateInput>
    /**
     * Choose, which CashBox to update.
     */
    where: CashBoxWhereUniqueInput
  }

  /**
   * CashBox updateMany
   */
  export type CashBoxUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashBoxes.
     */
    data: XOR<CashBoxUpdateManyMutationInput, CashBoxUncheckedUpdateManyInput>
    /**
     * Filter which CashBoxes to update
     */
    where?: CashBoxWhereInput
    /**
     * Limit how many CashBoxes to update.
     */
    limit?: number
  }

  /**
   * CashBox upsert
   */
  export type CashBoxUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * The filter to search for the CashBox to update in case it exists.
     */
    where: CashBoxWhereUniqueInput
    /**
     * In case the CashBox found by the `where` argument doesn't exist, create a new CashBox with this data.
     */
    create: XOR<CashBoxCreateInput, CashBoxUncheckedCreateInput>
    /**
     * In case the CashBox was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashBoxUpdateInput, CashBoxUncheckedUpdateInput>
  }

  /**
   * CashBox delete
   */
  export type CashBoxDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
    /**
     * Filter which CashBox to delete.
     */
    where: CashBoxWhereUniqueInput
  }

  /**
   * CashBox deleteMany
   */
  export type CashBoxDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashBoxes to delete
     */
    where?: CashBoxWhereInput
    /**
     * Limit how many CashBoxes to delete.
     */
    limit?: number
  }

  /**
   * CashBox.closed
   */
  export type CashBox$closedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * CashBox.cashboxMovements
   */
  export type CashBox$cashboxMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    where?: CashBoxMovementWhereInput
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    cursor?: CashBoxMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashBoxMovementScalarFieldEnum | CashBoxMovementScalarFieldEnum[]
  }

  /**
   * CashBox.payments
   */
  export type CashBox$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * CashBox without action
   */
  export type CashBoxDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBox
     */
    select?: CashBoxSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBox
     */
    omit?: CashBoxOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxInclude<ExtArgs> | null
  }


  /**
   * Model CashBoxMovementType
   */

  export type AggregateCashBoxMovementType = {
    _count: CashBoxMovementTypeCountAggregateOutputType | null
    _min: CashBoxMovementTypeMinAggregateOutputType | null
    _max: CashBoxMovementTypeMaxAggregateOutputType | null
  }

  export type CashBoxMovementTypeMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CashBoxMovementTypeMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CashBoxMovementTypeCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type CashBoxMovementTypeMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CashBoxMovementTypeMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CashBoxMovementTypeCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type CashBoxMovementTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashBoxMovementType to aggregate.
     */
    where?: CashBoxMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovementTypes to fetch.
     */
    orderBy?: CashBoxMovementTypeOrderByWithRelationInput | CashBoxMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashBoxMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovementTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashBoxMovementTypes
    **/
    _count?: true | CashBoxMovementTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashBoxMovementTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashBoxMovementTypeMaxAggregateInputType
  }

  export type GetCashBoxMovementTypeAggregateType<T extends CashBoxMovementTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateCashBoxMovementType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashBoxMovementType[P]>
      : GetScalarType<T[P], AggregateCashBoxMovementType[P]>
  }




  export type CashBoxMovementTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxMovementTypeWhereInput
    orderBy?: CashBoxMovementTypeOrderByWithAggregationInput | CashBoxMovementTypeOrderByWithAggregationInput[]
    by: CashBoxMovementTypeScalarFieldEnum[] | CashBoxMovementTypeScalarFieldEnum
    having?: CashBoxMovementTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashBoxMovementTypeCountAggregateInputType | true
    _min?: CashBoxMovementTypeMinAggregateInputType
    _max?: CashBoxMovementTypeMaxAggregateInputType
  }

  export type CashBoxMovementTypeGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: CashBoxMovementTypeCountAggregateOutputType | null
    _min: CashBoxMovementTypeMinAggregateOutputType | null
    _max: CashBoxMovementTypeMaxAggregateOutputType | null
  }

  type GetCashBoxMovementTypeGroupByPayload<T extends CashBoxMovementTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashBoxMovementTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashBoxMovementTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashBoxMovementTypeGroupByOutputType[P]>
            : GetScalarType<T[P], CashBoxMovementTypeGroupByOutputType[P]>
        }
      >
    >


  export type CashBoxMovementTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    cashBoxMovement?: boolean | CashBoxMovementType$cashBoxMovementArgs<ExtArgs>
    _count?: boolean | CashBoxMovementTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashBoxMovementType"]>



  export type CashBoxMovementTypeSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type CashBoxMovementTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["cashBoxMovementType"]>
  export type CashBoxMovementTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashBoxMovement?: boolean | CashBoxMovementType$cashBoxMovementArgs<ExtArgs>
    _count?: boolean | CashBoxMovementTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CashBoxMovementTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashBoxMovementType"
    objects: {
      cashBoxMovement: Prisma.$CashBoxMovementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["cashBoxMovementType"]>
    composites: {}
  }

  type CashBoxMovementTypeGetPayload<S extends boolean | null | undefined | CashBoxMovementTypeDefaultArgs> = $Result.GetResult<Prisma.$CashBoxMovementTypePayload, S>

  type CashBoxMovementTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CashBoxMovementTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CashBoxMovementTypeCountAggregateInputType | true
    }

  export interface CashBoxMovementTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashBoxMovementType'], meta: { name: 'CashBoxMovementType' } }
    /**
     * Find zero or one CashBoxMovementType that matches the filter.
     * @param {CashBoxMovementTypeFindUniqueArgs} args - Arguments to find a CashBoxMovementType
     * @example
     * // Get one CashBoxMovementType
     * const cashBoxMovementType = await prisma.cashBoxMovementType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashBoxMovementTypeFindUniqueArgs>(args: SelectSubset<T, CashBoxMovementTypeFindUniqueArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CashBoxMovementType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CashBoxMovementTypeFindUniqueOrThrowArgs} args - Arguments to find a CashBoxMovementType
     * @example
     * // Get one CashBoxMovementType
     * const cashBoxMovementType = await prisma.cashBoxMovementType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashBoxMovementTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, CashBoxMovementTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashBoxMovementType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeFindFirstArgs} args - Arguments to find a CashBoxMovementType
     * @example
     * // Get one CashBoxMovementType
     * const cashBoxMovementType = await prisma.cashBoxMovementType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashBoxMovementTypeFindFirstArgs>(args?: SelectSubset<T, CashBoxMovementTypeFindFirstArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashBoxMovementType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeFindFirstOrThrowArgs} args - Arguments to find a CashBoxMovementType
     * @example
     * // Get one CashBoxMovementType
     * const cashBoxMovementType = await prisma.cashBoxMovementType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashBoxMovementTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, CashBoxMovementTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CashBoxMovementTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashBoxMovementTypes
     * const cashBoxMovementTypes = await prisma.cashBoxMovementType.findMany()
     * 
     * // Get first 10 CashBoxMovementTypes
     * const cashBoxMovementTypes = await prisma.cashBoxMovementType.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const cashBoxMovementTypeWithCodeOnly = await prisma.cashBoxMovementType.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends CashBoxMovementTypeFindManyArgs>(args?: SelectSubset<T, CashBoxMovementTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CashBoxMovementType.
     * @param {CashBoxMovementTypeCreateArgs} args - Arguments to create a CashBoxMovementType.
     * @example
     * // Create one CashBoxMovementType
     * const CashBoxMovementType = await prisma.cashBoxMovementType.create({
     *   data: {
     *     // ... data to create a CashBoxMovementType
     *   }
     * })
     * 
     */
    create<T extends CashBoxMovementTypeCreateArgs>(args: SelectSubset<T, CashBoxMovementTypeCreateArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CashBoxMovementTypes.
     * @param {CashBoxMovementTypeCreateManyArgs} args - Arguments to create many CashBoxMovementTypes.
     * @example
     * // Create many CashBoxMovementTypes
     * const cashBoxMovementType = await prisma.cashBoxMovementType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashBoxMovementTypeCreateManyArgs>(args?: SelectSubset<T, CashBoxMovementTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CashBoxMovementType.
     * @param {CashBoxMovementTypeDeleteArgs} args - Arguments to delete one CashBoxMovementType.
     * @example
     * // Delete one CashBoxMovementType
     * const CashBoxMovementType = await prisma.cashBoxMovementType.delete({
     *   where: {
     *     // ... filter to delete one CashBoxMovementType
     *   }
     * })
     * 
     */
    delete<T extends CashBoxMovementTypeDeleteArgs>(args: SelectSubset<T, CashBoxMovementTypeDeleteArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CashBoxMovementType.
     * @param {CashBoxMovementTypeUpdateArgs} args - Arguments to update one CashBoxMovementType.
     * @example
     * // Update one CashBoxMovementType
     * const cashBoxMovementType = await prisma.cashBoxMovementType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashBoxMovementTypeUpdateArgs>(args: SelectSubset<T, CashBoxMovementTypeUpdateArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CashBoxMovementTypes.
     * @param {CashBoxMovementTypeDeleteManyArgs} args - Arguments to filter CashBoxMovementTypes to delete.
     * @example
     * // Delete a few CashBoxMovementTypes
     * const { count } = await prisma.cashBoxMovementType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashBoxMovementTypeDeleteManyArgs>(args?: SelectSubset<T, CashBoxMovementTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashBoxMovementTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashBoxMovementTypes
     * const cashBoxMovementType = await prisma.cashBoxMovementType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashBoxMovementTypeUpdateManyArgs>(args: SelectSubset<T, CashBoxMovementTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CashBoxMovementType.
     * @param {CashBoxMovementTypeUpsertArgs} args - Arguments to update or create a CashBoxMovementType.
     * @example
     * // Update or create a CashBoxMovementType
     * const cashBoxMovementType = await prisma.cashBoxMovementType.upsert({
     *   create: {
     *     // ... data to create a CashBoxMovementType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashBoxMovementType we want to update
     *   }
     * })
     */
    upsert<T extends CashBoxMovementTypeUpsertArgs>(args: SelectSubset<T, CashBoxMovementTypeUpsertArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CashBoxMovementTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeCountArgs} args - Arguments to filter CashBoxMovementTypes to count.
     * @example
     * // Count the number of CashBoxMovementTypes
     * const count = await prisma.cashBoxMovementType.count({
     *   where: {
     *     // ... the filter for the CashBoxMovementTypes we want to count
     *   }
     * })
    **/
    count<T extends CashBoxMovementTypeCountArgs>(
      args?: Subset<T, CashBoxMovementTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashBoxMovementTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashBoxMovementType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashBoxMovementTypeAggregateArgs>(args: Subset<T, CashBoxMovementTypeAggregateArgs>): Prisma.PrismaPromise<GetCashBoxMovementTypeAggregateType<T>>

    /**
     * Group by CashBoxMovementType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashBoxMovementTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashBoxMovementTypeGroupByArgs['orderBy'] }
        : { orderBy?: CashBoxMovementTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashBoxMovementTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashBoxMovementTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashBoxMovementType model
   */
  readonly fields: CashBoxMovementTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashBoxMovementType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashBoxMovementTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cashBoxMovement<T extends CashBoxMovementType$cashBoxMovementArgs<ExtArgs> = {}>(args?: Subset<T, CashBoxMovementType$cashBoxMovementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashBoxMovementType model
   */
  interface CashBoxMovementTypeFieldRefs {
    readonly code: FieldRef<"CashBoxMovementType", 'String'>
    readonly name: FieldRef<"CashBoxMovementType", 'String'>
    readonly description: FieldRef<"CashBoxMovementType", 'String'>
    readonly color: FieldRef<"CashBoxMovementType", 'String'>
    readonly createdAt: FieldRef<"CashBoxMovementType", 'DateTime'>
    readonly createdBy: FieldRef<"CashBoxMovementType", 'String'>
    readonly updatedAt: FieldRef<"CashBoxMovementType", 'DateTime'>
    readonly updatedBy: FieldRef<"CashBoxMovementType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CashBoxMovementType findUnique
   */
  export type CashBoxMovementTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovementType to fetch.
     */
    where: CashBoxMovementTypeWhereUniqueInput
  }

  /**
   * CashBoxMovementType findUniqueOrThrow
   */
  export type CashBoxMovementTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovementType to fetch.
     */
    where: CashBoxMovementTypeWhereUniqueInput
  }

  /**
   * CashBoxMovementType findFirst
   */
  export type CashBoxMovementTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovementType to fetch.
     */
    where?: CashBoxMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovementTypes to fetch.
     */
    orderBy?: CashBoxMovementTypeOrderByWithRelationInput | CashBoxMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashBoxMovementTypes.
     */
    cursor?: CashBoxMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovementTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashBoxMovementTypes.
     */
    distinct?: CashBoxMovementTypeScalarFieldEnum | CashBoxMovementTypeScalarFieldEnum[]
  }

  /**
   * CashBoxMovementType findFirstOrThrow
   */
  export type CashBoxMovementTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovementType to fetch.
     */
    where?: CashBoxMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovementTypes to fetch.
     */
    orderBy?: CashBoxMovementTypeOrderByWithRelationInput | CashBoxMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashBoxMovementTypes.
     */
    cursor?: CashBoxMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovementTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashBoxMovementTypes.
     */
    distinct?: CashBoxMovementTypeScalarFieldEnum | CashBoxMovementTypeScalarFieldEnum[]
  }

  /**
   * CashBoxMovementType findMany
   */
  export type CashBoxMovementTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovementTypes to fetch.
     */
    where?: CashBoxMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovementTypes to fetch.
     */
    orderBy?: CashBoxMovementTypeOrderByWithRelationInput | CashBoxMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashBoxMovementTypes.
     */
    cursor?: CashBoxMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovementTypes.
     */
    skip?: number
    distinct?: CashBoxMovementTypeScalarFieldEnum | CashBoxMovementTypeScalarFieldEnum[]
  }

  /**
   * CashBoxMovementType create
   */
  export type CashBoxMovementTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a CashBoxMovementType.
     */
    data: XOR<CashBoxMovementTypeCreateInput, CashBoxMovementTypeUncheckedCreateInput>
  }

  /**
   * CashBoxMovementType createMany
   */
  export type CashBoxMovementTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashBoxMovementTypes.
     */
    data: CashBoxMovementTypeCreateManyInput | CashBoxMovementTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CashBoxMovementType update
   */
  export type CashBoxMovementTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a CashBoxMovementType.
     */
    data: XOR<CashBoxMovementTypeUpdateInput, CashBoxMovementTypeUncheckedUpdateInput>
    /**
     * Choose, which CashBoxMovementType to update.
     */
    where: CashBoxMovementTypeWhereUniqueInput
  }

  /**
   * CashBoxMovementType updateMany
   */
  export type CashBoxMovementTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashBoxMovementTypes.
     */
    data: XOR<CashBoxMovementTypeUpdateManyMutationInput, CashBoxMovementTypeUncheckedUpdateManyInput>
    /**
     * Filter which CashBoxMovementTypes to update
     */
    where?: CashBoxMovementTypeWhereInput
    /**
     * Limit how many CashBoxMovementTypes to update.
     */
    limit?: number
  }

  /**
   * CashBoxMovementType upsert
   */
  export type CashBoxMovementTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the CashBoxMovementType to update in case it exists.
     */
    where: CashBoxMovementTypeWhereUniqueInput
    /**
     * In case the CashBoxMovementType found by the `where` argument doesn't exist, create a new CashBoxMovementType with this data.
     */
    create: XOR<CashBoxMovementTypeCreateInput, CashBoxMovementTypeUncheckedCreateInput>
    /**
     * In case the CashBoxMovementType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashBoxMovementTypeUpdateInput, CashBoxMovementTypeUncheckedUpdateInput>
  }

  /**
   * CashBoxMovementType delete
   */
  export type CashBoxMovementTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
    /**
     * Filter which CashBoxMovementType to delete.
     */
    where: CashBoxMovementTypeWhereUniqueInput
  }

  /**
   * CashBoxMovementType deleteMany
   */
  export type CashBoxMovementTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashBoxMovementTypes to delete
     */
    where?: CashBoxMovementTypeWhereInput
    /**
     * Limit how many CashBoxMovementTypes to delete.
     */
    limit?: number
  }

  /**
   * CashBoxMovementType.cashBoxMovement
   */
  export type CashBoxMovementType$cashBoxMovementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    where?: CashBoxMovementWhereInput
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    cursor?: CashBoxMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CashBoxMovementScalarFieldEnum | CashBoxMovementScalarFieldEnum[]
  }

  /**
   * CashBoxMovementType without action
   */
  export type CashBoxMovementTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovementType
     */
    select?: CashBoxMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovementType
     */
    omit?: CashBoxMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementTypeInclude<ExtArgs> | null
  }


  /**
   * Model CashBoxMovement
   */

  export type AggregateCashBoxMovement = {
    _count: CashBoxMovementCountAggregateOutputType | null
    _avg: CashBoxMovementAvgAggregateOutputType | null
    _sum: CashBoxMovementSumAggregateOutputType | null
    _min: CashBoxMovementMinAggregateOutputType | null
    _max: CashBoxMovementMaxAggregateOutputType | null
  }

  export type CashBoxMovementAvgAggregateOutputType = {
    id: number | null
    cashboxId: number | null
    amount: Decimal | null
  }

  export type CashBoxMovementSumAggregateOutputType = {
    id: number | null
    cashboxId: number | null
    amount: Decimal | null
  }

  export type CashBoxMovementMinAggregateOutputType = {
    id: number | null
    cashboxId: number | null
    userDocument: string | null
    cashboxMovementTypeCode: string | null
    amount: Decimal | null
    concept: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CashBoxMovementMaxAggregateOutputType = {
    id: number | null
    cashboxId: number | null
    userDocument: string | null
    cashboxMovementTypeCode: string | null
    amount: Decimal | null
    concept: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type CashBoxMovementCountAggregateOutputType = {
    id: number
    cashboxId: number
    userDocument: number
    cashboxMovementTypeCode: number
    amount: number
    concept: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type CashBoxMovementAvgAggregateInputType = {
    id?: true
    cashboxId?: true
    amount?: true
  }

  export type CashBoxMovementSumAggregateInputType = {
    id?: true
    cashboxId?: true
    amount?: true
  }

  export type CashBoxMovementMinAggregateInputType = {
    id?: true
    cashboxId?: true
    userDocument?: true
    cashboxMovementTypeCode?: true
    amount?: true
    concept?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CashBoxMovementMaxAggregateInputType = {
    id?: true
    cashboxId?: true
    userDocument?: true
    cashboxMovementTypeCode?: true
    amount?: true
    concept?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type CashBoxMovementCountAggregateInputType = {
    id?: true
    cashboxId?: true
    userDocument?: true
    cashboxMovementTypeCode?: true
    amount?: true
    concept?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type CashBoxMovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashBoxMovement to aggregate.
     */
    where?: CashBoxMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovements to fetch.
     */
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CashBoxMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CashBoxMovements
    **/
    _count?: true | CashBoxMovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CashBoxMovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CashBoxMovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CashBoxMovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CashBoxMovementMaxAggregateInputType
  }

  export type GetCashBoxMovementAggregateType<T extends CashBoxMovementAggregateArgs> = {
        [P in keyof T & keyof AggregateCashBoxMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCashBoxMovement[P]>
      : GetScalarType<T[P], AggregateCashBoxMovement[P]>
  }




  export type CashBoxMovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CashBoxMovementWhereInput
    orderBy?: CashBoxMovementOrderByWithAggregationInput | CashBoxMovementOrderByWithAggregationInput[]
    by: CashBoxMovementScalarFieldEnum[] | CashBoxMovementScalarFieldEnum
    having?: CashBoxMovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CashBoxMovementCountAggregateInputType | true
    _avg?: CashBoxMovementAvgAggregateInputType
    _sum?: CashBoxMovementSumAggregateInputType
    _min?: CashBoxMovementMinAggregateInputType
    _max?: CashBoxMovementMaxAggregateInputType
  }

  export type CashBoxMovementGroupByOutputType = {
    id: number
    cashboxId: number
    userDocument: string
    cashboxMovementTypeCode: string
    amount: Decimal
    concept: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: CashBoxMovementCountAggregateOutputType | null
    _avg: CashBoxMovementAvgAggregateOutputType | null
    _sum: CashBoxMovementSumAggregateOutputType | null
    _min: CashBoxMovementMinAggregateOutputType | null
    _max: CashBoxMovementMaxAggregateOutputType | null
  }

  type GetCashBoxMovementGroupByPayload<T extends CashBoxMovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CashBoxMovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CashBoxMovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CashBoxMovementGroupByOutputType[P]>
            : GetScalarType<T[P], CashBoxMovementGroupByOutputType[P]>
        }
      >
    >


  export type CashBoxMovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cashboxId?: boolean
    userDocument?: boolean
    cashboxMovementTypeCode?: boolean
    amount?: boolean
    concept?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    cashbox?: boolean | CashBoxDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    cashboxMovementType?: boolean | CashBoxMovementTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cashBoxMovement"]>



  export type CashBoxMovementSelectScalar = {
    id?: boolean
    cashboxId?: boolean
    userDocument?: boolean
    cashboxMovementTypeCode?: boolean
    amount?: boolean
    concept?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type CashBoxMovementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cashboxId" | "userDocument" | "cashboxMovementTypeCode" | "amount" | "concept" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["cashBoxMovement"]>
  export type CashBoxMovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cashbox?: boolean | CashBoxDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    cashboxMovementType?: boolean | CashBoxMovementTypeDefaultArgs<ExtArgs>
  }

  export type $CashBoxMovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CashBoxMovement"
    objects: {
      cashbox: Prisma.$CashBoxPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      cashboxMovementType: Prisma.$CashBoxMovementTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cashboxId: number
      userDocument: string
      cashboxMovementTypeCode: string
      amount: Prisma.Decimal
      concept: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["cashBoxMovement"]>
    composites: {}
  }

  type CashBoxMovementGetPayload<S extends boolean | null | undefined | CashBoxMovementDefaultArgs> = $Result.GetResult<Prisma.$CashBoxMovementPayload, S>

  type CashBoxMovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CashBoxMovementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CashBoxMovementCountAggregateInputType | true
    }

  export interface CashBoxMovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CashBoxMovement'], meta: { name: 'CashBoxMovement' } }
    /**
     * Find zero or one CashBoxMovement that matches the filter.
     * @param {CashBoxMovementFindUniqueArgs} args - Arguments to find a CashBoxMovement
     * @example
     * // Get one CashBoxMovement
     * const cashBoxMovement = await prisma.cashBoxMovement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CashBoxMovementFindUniqueArgs>(args: SelectSubset<T, CashBoxMovementFindUniqueArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CashBoxMovement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CashBoxMovementFindUniqueOrThrowArgs} args - Arguments to find a CashBoxMovement
     * @example
     * // Get one CashBoxMovement
     * const cashBoxMovement = await prisma.cashBoxMovement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CashBoxMovementFindUniqueOrThrowArgs>(args: SelectSubset<T, CashBoxMovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashBoxMovement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementFindFirstArgs} args - Arguments to find a CashBoxMovement
     * @example
     * // Get one CashBoxMovement
     * const cashBoxMovement = await prisma.cashBoxMovement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CashBoxMovementFindFirstArgs>(args?: SelectSubset<T, CashBoxMovementFindFirstArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CashBoxMovement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementFindFirstOrThrowArgs} args - Arguments to find a CashBoxMovement
     * @example
     * // Get one CashBoxMovement
     * const cashBoxMovement = await prisma.cashBoxMovement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CashBoxMovementFindFirstOrThrowArgs>(args?: SelectSubset<T, CashBoxMovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CashBoxMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CashBoxMovements
     * const cashBoxMovements = await prisma.cashBoxMovement.findMany()
     * 
     * // Get first 10 CashBoxMovements
     * const cashBoxMovements = await prisma.cashBoxMovement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cashBoxMovementWithIdOnly = await prisma.cashBoxMovement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CashBoxMovementFindManyArgs>(args?: SelectSubset<T, CashBoxMovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CashBoxMovement.
     * @param {CashBoxMovementCreateArgs} args - Arguments to create a CashBoxMovement.
     * @example
     * // Create one CashBoxMovement
     * const CashBoxMovement = await prisma.cashBoxMovement.create({
     *   data: {
     *     // ... data to create a CashBoxMovement
     *   }
     * })
     * 
     */
    create<T extends CashBoxMovementCreateArgs>(args: SelectSubset<T, CashBoxMovementCreateArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CashBoxMovements.
     * @param {CashBoxMovementCreateManyArgs} args - Arguments to create many CashBoxMovements.
     * @example
     * // Create many CashBoxMovements
     * const cashBoxMovement = await prisma.cashBoxMovement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CashBoxMovementCreateManyArgs>(args?: SelectSubset<T, CashBoxMovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CashBoxMovement.
     * @param {CashBoxMovementDeleteArgs} args - Arguments to delete one CashBoxMovement.
     * @example
     * // Delete one CashBoxMovement
     * const CashBoxMovement = await prisma.cashBoxMovement.delete({
     *   where: {
     *     // ... filter to delete one CashBoxMovement
     *   }
     * })
     * 
     */
    delete<T extends CashBoxMovementDeleteArgs>(args: SelectSubset<T, CashBoxMovementDeleteArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CashBoxMovement.
     * @param {CashBoxMovementUpdateArgs} args - Arguments to update one CashBoxMovement.
     * @example
     * // Update one CashBoxMovement
     * const cashBoxMovement = await prisma.cashBoxMovement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CashBoxMovementUpdateArgs>(args: SelectSubset<T, CashBoxMovementUpdateArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CashBoxMovements.
     * @param {CashBoxMovementDeleteManyArgs} args - Arguments to filter CashBoxMovements to delete.
     * @example
     * // Delete a few CashBoxMovements
     * const { count } = await prisma.cashBoxMovement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CashBoxMovementDeleteManyArgs>(args?: SelectSubset<T, CashBoxMovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CashBoxMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CashBoxMovements
     * const cashBoxMovement = await prisma.cashBoxMovement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CashBoxMovementUpdateManyArgs>(args: SelectSubset<T, CashBoxMovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CashBoxMovement.
     * @param {CashBoxMovementUpsertArgs} args - Arguments to update or create a CashBoxMovement.
     * @example
     * // Update or create a CashBoxMovement
     * const cashBoxMovement = await prisma.cashBoxMovement.upsert({
     *   create: {
     *     // ... data to create a CashBoxMovement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CashBoxMovement we want to update
     *   }
     * })
     */
    upsert<T extends CashBoxMovementUpsertArgs>(args: SelectSubset<T, CashBoxMovementUpsertArgs<ExtArgs>>): Prisma__CashBoxMovementClient<$Result.GetResult<Prisma.$CashBoxMovementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CashBoxMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementCountArgs} args - Arguments to filter CashBoxMovements to count.
     * @example
     * // Count the number of CashBoxMovements
     * const count = await prisma.cashBoxMovement.count({
     *   where: {
     *     // ... the filter for the CashBoxMovements we want to count
     *   }
     * })
    **/
    count<T extends CashBoxMovementCountArgs>(
      args?: Subset<T, CashBoxMovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CashBoxMovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CashBoxMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CashBoxMovementAggregateArgs>(args: Subset<T, CashBoxMovementAggregateArgs>): Prisma.PrismaPromise<GetCashBoxMovementAggregateType<T>>

    /**
     * Group by CashBoxMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CashBoxMovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CashBoxMovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CashBoxMovementGroupByArgs['orderBy'] }
        : { orderBy?: CashBoxMovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CashBoxMovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCashBoxMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CashBoxMovement model
   */
  readonly fields: CashBoxMovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CashBoxMovement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CashBoxMovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cashbox<T extends CashBoxDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CashBoxDefaultArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cashboxMovementType<T extends CashBoxMovementTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CashBoxMovementTypeDefaultArgs<ExtArgs>>): Prisma__CashBoxMovementTypeClient<$Result.GetResult<Prisma.$CashBoxMovementTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CashBoxMovement model
   */
  interface CashBoxMovementFieldRefs {
    readonly id: FieldRef<"CashBoxMovement", 'Int'>
    readonly cashboxId: FieldRef<"CashBoxMovement", 'Int'>
    readonly userDocument: FieldRef<"CashBoxMovement", 'String'>
    readonly cashboxMovementTypeCode: FieldRef<"CashBoxMovement", 'String'>
    readonly amount: FieldRef<"CashBoxMovement", 'Decimal'>
    readonly concept: FieldRef<"CashBoxMovement", 'String'>
    readonly createdAt: FieldRef<"CashBoxMovement", 'DateTime'>
    readonly createdBy: FieldRef<"CashBoxMovement", 'String'>
    readonly updatedAt: FieldRef<"CashBoxMovement", 'DateTime'>
    readonly updatedBy: FieldRef<"CashBoxMovement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CashBoxMovement findUnique
   */
  export type CashBoxMovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovement to fetch.
     */
    where: CashBoxMovementWhereUniqueInput
  }

  /**
   * CashBoxMovement findUniqueOrThrow
   */
  export type CashBoxMovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovement to fetch.
     */
    where: CashBoxMovementWhereUniqueInput
  }

  /**
   * CashBoxMovement findFirst
   */
  export type CashBoxMovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovement to fetch.
     */
    where?: CashBoxMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovements to fetch.
     */
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashBoxMovements.
     */
    cursor?: CashBoxMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashBoxMovements.
     */
    distinct?: CashBoxMovementScalarFieldEnum | CashBoxMovementScalarFieldEnum[]
  }

  /**
   * CashBoxMovement findFirstOrThrow
   */
  export type CashBoxMovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovement to fetch.
     */
    where?: CashBoxMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovements to fetch.
     */
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CashBoxMovements.
     */
    cursor?: CashBoxMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CashBoxMovements.
     */
    distinct?: CashBoxMovementScalarFieldEnum | CashBoxMovementScalarFieldEnum[]
  }

  /**
   * CashBoxMovement findMany
   */
  export type CashBoxMovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * Filter, which CashBoxMovements to fetch.
     */
    where?: CashBoxMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CashBoxMovements to fetch.
     */
    orderBy?: CashBoxMovementOrderByWithRelationInput | CashBoxMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CashBoxMovements.
     */
    cursor?: CashBoxMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CashBoxMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CashBoxMovements.
     */
    skip?: number
    distinct?: CashBoxMovementScalarFieldEnum | CashBoxMovementScalarFieldEnum[]
  }

  /**
   * CashBoxMovement create
   */
  export type CashBoxMovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * The data needed to create a CashBoxMovement.
     */
    data: XOR<CashBoxMovementCreateInput, CashBoxMovementUncheckedCreateInput>
  }

  /**
   * CashBoxMovement createMany
   */
  export type CashBoxMovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CashBoxMovements.
     */
    data: CashBoxMovementCreateManyInput | CashBoxMovementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CashBoxMovement update
   */
  export type CashBoxMovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * The data needed to update a CashBoxMovement.
     */
    data: XOR<CashBoxMovementUpdateInput, CashBoxMovementUncheckedUpdateInput>
    /**
     * Choose, which CashBoxMovement to update.
     */
    where: CashBoxMovementWhereUniqueInput
  }

  /**
   * CashBoxMovement updateMany
   */
  export type CashBoxMovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CashBoxMovements.
     */
    data: XOR<CashBoxMovementUpdateManyMutationInput, CashBoxMovementUncheckedUpdateManyInput>
    /**
     * Filter which CashBoxMovements to update
     */
    where?: CashBoxMovementWhereInput
    /**
     * Limit how many CashBoxMovements to update.
     */
    limit?: number
  }

  /**
   * CashBoxMovement upsert
   */
  export type CashBoxMovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * The filter to search for the CashBoxMovement to update in case it exists.
     */
    where: CashBoxMovementWhereUniqueInput
    /**
     * In case the CashBoxMovement found by the `where` argument doesn't exist, create a new CashBoxMovement with this data.
     */
    create: XOR<CashBoxMovementCreateInput, CashBoxMovementUncheckedCreateInput>
    /**
     * In case the CashBoxMovement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CashBoxMovementUpdateInput, CashBoxMovementUncheckedUpdateInput>
  }

  /**
   * CashBoxMovement delete
   */
  export type CashBoxMovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
    /**
     * Filter which CashBoxMovement to delete.
     */
    where: CashBoxMovementWhereUniqueInput
  }

  /**
   * CashBoxMovement deleteMany
   */
  export type CashBoxMovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CashBoxMovements to delete
     */
    where?: CashBoxMovementWhereInput
    /**
     * Limit how many CashBoxMovements to delete.
     */
    limit?: number
  }

  /**
   * CashBoxMovement without action
   */
  export type CashBoxMovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CashBoxMovement
     */
    select?: CashBoxMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CashBoxMovement
     */
    omit?: CashBoxMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CashBoxMovementInclude<ExtArgs> | null
  }


  /**
   * Model PaymentMethod
   */

  export type AggregatePaymentMethod = {
    _count: PaymentMethodCountAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  export type PaymentMethodMinAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type PaymentMethodMaxAggregateOutputType = {
    name: string | null
    description: string | null
    color: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type PaymentMethodCountAggregateOutputType = {
    name: number
    description: number
    color: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type PaymentMethodMinAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type PaymentMethodMaxAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type PaymentMethodCountAggregateInputType = {
    name?: true
    description?: true
    color?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type PaymentMethodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethod to aggregate.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentMethods
    **/
    _count?: true | PaymentMethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type GetPaymentMethodAggregateType<T extends PaymentMethodAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentMethod[P]>
      : GetScalarType<T[P], AggregatePaymentMethod[P]>
  }




  export type PaymentMethodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentMethodWhereInput
    orderBy?: PaymentMethodOrderByWithAggregationInput | PaymentMethodOrderByWithAggregationInput[]
    by: PaymentMethodScalarFieldEnum[] | PaymentMethodScalarFieldEnum
    having?: PaymentMethodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentMethodCountAggregateInputType | true
    _min?: PaymentMethodMinAggregateInputType
    _max?: PaymentMethodMaxAggregateInputType
  }

  export type PaymentMethodGroupByOutputType = {
    name: string
    description: string | null
    color: string | null
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: PaymentMethodCountAggregateOutputType | null
    _min: PaymentMethodMinAggregateOutputType | null
    _max: PaymentMethodMaxAggregateOutputType | null
  }

  type GetPaymentMethodGroupByPayload<T extends PaymentMethodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentMethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentMethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentMethodGroupByOutputType[P]>
        }
      >
    >


  export type PaymentMethodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    payments?: boolean | PaymentMethod$paymentsArgs<ExtArgs>
    _count?: boolean | PaymentMethodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentMethod"]>



  export type PaymentMethodSelectScalar = {
    name?: boolean
    description?: boolean
    color?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type PaymentMethodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "description" | "color" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["paymentMethod"]>
  export type PaymentMethodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | PaymentMethod$paymentsArgs<ExtArgs>
    _count?: boolean | PaymentMethodCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PaymentMethodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentMethod"
    objects: {
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      description: string | null
      color: string | null
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["paymentMethod"]>
    composites: {}
  }

  type PaymentMethodGetPayload<S extends boolean | null | undefined | PaymentMethodDefaultArgs> = $Result.GetResult<Prisma.$PaymentMethodPayload, S>

  type PaymentMethodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentMethodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentMethodCountAggregateInputType | true
    }

  export interface PaymentMethodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentMethod'], meta: { name: 'PaymentMethod' } }
    /**
     * Find zero or one PaymentMethod that matches the filter.
     * @param {PaymentMethodFindUniqueArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentMethodFindUniqueArgs>(args: SelectSubset<T, PaymentMethodFindUniqueArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentMethod that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentMethodFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentMethodFindFirstArgs>(args?: SelectSubset<T, PaymentMethodFindFirstArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindFirstOrThrowArgs} args - Arguments to find a PaymentMethod
     * @example
     * // Get one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentMethodFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany()
     * 
     * // Get first 10 PaymentMethods
     * const paymentMethods = await prisma.paymentMethod.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const paymentMethodWithNameOnly = await prisma.paymentMethod.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends PaymentMethodFindManyArgs>(args?: SelectSubset<T, PaymentMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentMethod.
     * @param {PaymentMethodCreateArgs} args - Arguments to create a PaymentMethod.
     * @example
     * // Create one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.create({
     *   data: {
     *     // ... data to create a PaymentMethod
     *   }
     * })
     * 
     */
    create<T extends PaymentMethodCreateArgs>(args: SelectSubset<T, PaymentMethodCreateArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentMethods.
     * @param {PaymentMethodCreateManyArgs} args - Arguments to create many PaymentMethods.
     * @example
     * // Create many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentMethodCreateManyArgs>(args?: SelectSubset<T, PaymentMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentMethod.
     * @param {PaymentMethodDeleteArgs} args - Arguments to delete one PaymentMethod.
     * @example
     * // Delete one PaymentMethod
     * const PaymentMethod = await prisma.paymentMethod.delete({
     *   where: {
     *     // ... filter to delete one PaymentMethod
     *   }
     * })
     * 
     */
    delete<T extends PaymentMethodDeleteArgs>(args: SelectSubset<T, PaymentMethodDeleteArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentMethod.
     * @param {PaymentMethodUpdateArgs} args - Arguments to update one PaymentMethod.
     * @example
     * // Update one PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentMethodUpdateArgs>(args: SelectSubset<T, PaymentMethodUpdateArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentMethods.
     * @param {PaymentMethodDeleteManyArgs} args - Arguments to filter PaymentMethods to delete.
     * @example
     * // Delete a few PaymentMethods
     * const { count } = await prisma.paymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentMethodDeleteManyArgs>(args?: SelectSubset<T, PaymentMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentMethods
     * const paymentMethod = await prisma.paymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentMethodUpdateManyArgs>(args: SelectSubset<T, PaymentMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentMethod.
     * @param {PaymentMethodUpsertArgs} args - Arguments to update or create a PaymentMethod.
     * @example
     * // Update or create a PaymentMethod
     * const paymentMethod = await prisma.paymentMethod.upsert({
     *   create: {
     *     // ... data to create a PaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentMethod we want to update
     *   }
     * })
     */
    upsert<T extends PaymentMethodUpsertArgs>(args: SelectSubset<T, PaymentMethodUpsertArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodCountArgs} args - Arguments to filter PaymentMethods to count.
     * @example
     * // Count the number of PaymentMethods
     * const count = await prisma.paymentMethod.count({
     *   where: {
     *     // ... the filter for the PaymentMethods we want to count
     *   }
     * })
    **/
    count<T extends PaymentMethodCountArgs>(
      args?: Subset<T, PaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentMethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentMethodAggregateArgs>(args: Subset<T, PaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetPaymentMethodAggregateType<T>>

    /**
     * Group by PaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentMethodGroupByArgs['orderBy'] }
        : { orderBy?: PaymentMethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentMethod model
   */
  readonly fields: PaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentMethodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payments<T extends PaymentMethod$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, PaymentMethod$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentMethod model
   */
  interface PaymentMethodFieldRefs {
    readonly name: FieldRef<"PaymentMethod", 'String'>
    readonly description: FieldRef<"PaymentMethod", 'String'>
    readonly color: FieldRef<"PaymentMethod", 'String'>
    readonly isActive: FieldRef<"PaymentMethod", 'Boolean'>
    readonly createdAt: FieldRef<"PaymentMethod", 'DateTime'>
    readonly createdBy: FieldRef<"PaymentMethod", 'String'>
    readonly updatedAt: FieldRef<"PaymentMethod", 'DateTime'>
    readonly updatedBy: FieldRef<"PaymentMethod", 'String'>
    readonly deletedAt: FieldRef<"PaymentMethod", 'DateTime'>
    readonly deletedBy: FieldRef<"PaymentMethod", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PaymentMethod findUnique
   */
  export type PaymentMethodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findUniqueOrThrow
   */
  export type PaymentMethodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod findFirst
   */
  export type PaymentMethodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findFirstOrThrow
   */
  export type PaymentMethodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethod to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentMethods.
     */
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod findMany
   */
  export type PaymentMethodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which PaymentMethods to fetch.
     */
    where?: PaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentMethods to fetch.
     */
    orderBy?: PaymentMethodOrderByWithRelationInput | PaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentMethods.
     */
    cursor?: PaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentMethods.
     */
    skip?: number
    distinct?: PaymentMethodScalarFieldEnum | PaymentMethodScalarFieldEnum[]
  }

  /**
   * PaymentMethod create
   */
  export type PaymentMethodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentMethod.
     */
    data: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
  }

  /**
   * PaymentMethod createMany
   */
  export type PaymentMethodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentMethods.
     */
    data: PaymentMethodCreateManyInput | PaymentMethodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentMethod update
   */
  export type PaymentMethodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentMethod.
     */
    data: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
    /**
     * Choose, which PaymentMethod to update.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod updateMany
   */
  export type PaymentMethodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentMethods.
     */
    data: XOR<PaymentMethodUpdateManyMutationInput, PaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which PaymentMethods to update
     */
    where?: PaymentMethodWhereInput
    /**
     * Limit how many PaymentMethods to update.
     */
    limit?: number
  }

  /**
   * PaymentMethod upsert
   */
  export type PaymentMethodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentMethod to update in case it exists.
     */
    where: PaymentMethodWhereUniqueInput
    /**
     * In case the PaymentMethod found by the `where` argument doesn't exist, create a new PaymentMethod with this data.
     */
    create: XOR<PaymentMethodCreateInput, PaymentMethodUncheckedCreateInput>
    /**
     * In case the PaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentMethodUpdateInput, PaymentMethodUncheckedUpdateInput>
  }

  /**
   * PaymentMethod delete
   */
  export type PaymentMethodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
    /**
     * Filter which PaymentMethod to delete.
     */
    where: PaymentMethodWhereUniqueInput
  }

  /**
   * PaymentMethod deleteMany
   */
  export type PaymentMethodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentMethods to delete
     */
    where?: PaymentMethodWhereInput
    /**
     * Limit how many PaymentMethods to delete.
     */
    limit?: number
  }

  /**
   * PaymentMethod.payments
   */
  export type PaymentMethod$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * PaymentMethod without action
   */
  export type PaymentMethodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentMethod
     */
    select?: PaymentMethodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentMethod
     */
    omit?: PaymentMethodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentMethodInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    cashBoxId: number | null
    totalAmount: Decimal | null
    receivedAmount: Decimal | null
    changeAmount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    cashBoxId: number | null
    totalAmount: Decimal | null
    receivedAmount: Decimal | null
    changeAmount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    orderCode: string | null
    cashBoxId: number | null
    paymentMethodName: string | null
    totalAmount: Decimal | null
    receivedAmount: Decimal | null
    changeAmount: Decimal | null
    transactionNumber: string | null
    notes: string | null
    userDocumentReceive: string | null
    customerDocumentPaid: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    orderCode: string | null
    cashBoxId: number | null
    paymentMethodName: string | null
    totalAmount: Decimal | null
    receivedAmount: Decimal | null
    changeAmount: Decimal | null
    transactionNumber: string | null
    notes: string | null
    userDocumentReceive: string | null
    customerDocumentPaid: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    orderCode: number
    cashBoxId: number
    paymentMethodName: number
    totalAmount: number
    receivedAmount: number
    changeAmount: number
    transactionNumber: number
    notes: number
    userDocumentReceive: number
    customerDocumentPaid: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    cashBoxId?: true
    totalAmount?: true
    receivedAmount?: true
    changeAmount?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    cashBoxId?: true
    totalAmount?: true
    receivedAmount?: true
    changeAmount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    orderCode?: true
    cashBoxId?: true
    paymentMethodName?: true
    totalAmount?: true
    receivedAmount?: true
    changeAmount?: true
    transactionNumber?: true
    notes?: true
    userDocumentReceive?: true
    customerDocumentPaid?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    orderCode?: true
    cashBoxId?: true
    paymentMethodName?: true
    totalAmount?: true
    receivedAmount?: true
    changeAmount?: true
    transactionNumber?: true
    notes?: true
    userDocumentReceive?: true
    customerDocumentPaid?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    orderCode?: true
    cashBoxId?: true
    paymentMethodName?: true
    totalAmount?: true
    receivedAmount?: true
    changeAmount?: true
    transactionNumber?: true
    notes?: true
    userDocumentReceive?: true
    customerDocumentPaid?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal
    receivedAmount: Decimal | null
    changeAmount: Decimal | null
    transactionNumber: string | null
    notes: string | null
    userDocumentReceive: string
    customerDocumentPaid: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderCode?: boolean
    cashBoxId?: boolean
    paymentMethodName?: boolean
    totalAmount?: boolean
    receivedAmount?: boolean
    changeAmount?: boolean
    transactionNumber?: boolean
    notes?: boolean
    userDocumentReceive?: boolean
    customerDocumentPaid?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    cashBox?: boolean | CashBoxDefaultArgs<ExtArgs>
    paymentMethod?: boolean | PaymentMethodDefaultArgs<ExtArgs>
    receive?: boolean | UserDefaultArgs<ExtArgs>
    paid?: boolean | Payment$paidArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>



  export type PaymentSelectScalar = {
    id?: boolean
    orderCode?: boolean
    cashBoxId?: boolean
    paymentMethodName?: boolean
    totalAmount?: boolean
    receivedAmount?: boolean
    changeAmount?: boolean
    transactionNumber?: boolean
    notes?: boolean
    userDocumentReceive?: boolean
    customerDocumentPaid?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderCode" | "cashBoxId" | "paymentMethodName" | "totalAmount" | "receivedAmount" | "changeAmount" | "transactionNumber" | "notes" | "userDocumentReceive" | "customerDocumentPaid" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    cashBox?: boolean | CashBoxDefaultArgs<ExtArgs>
    paymentMethod?: boolean | PaymentMethodDefaultArgs<ExtArgs>
    receive?: boolean | UserDefaultArgs<ExtArgs>
    paid?: boolean | Payment$paidArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      cashBox: Prisma.$CashBoxPayload<ExtArgs>
      paymentMethod: Prisma.$PaymentMethodPayload<ExtArgs>
      receive: Prisma.$UserPayload<ExtArgs>
      paid: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderCode: string
      cashBoxId: number
      paymentMethodName: string
      totalAmount: Prisma.Decimal
      receivedAmount: Prisma.Decimal | null
      changeAmount: Prisma.Decimal | null
      transactionNumber: string | null
      notes: string | null
      userDocumentReceive: string
      customerDocumentPaid: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cashBox<T extends CashBoxDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CashBoxDefaultArgs<ExtArgs>>): Prisma__CashBoxClient<$Result.GetResult<Prisma.$CashBoxPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paymentMethod<T extends PaymentMethodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentMethodDefaultArgs<ExtArgs>>): Prisma__PaymentMethodClient<$Result.GetResult<Prisma.$PaymentMethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receive<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paid<T extends Payment$paidArgs<ExtArgs> = {}>(args?: Subset<T, Payment$paidArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly orderCode: FieldRef<"Payment", 'String'>
    readonly cashBoxId: FieldRef<"Payment", 'Int'>
    readonly paymentMethodName: FieldRef<"Payment", 'String'>
    readonly totalAmount: FieldRef<"Payment", 'Decimal'>
    readonly receivedAmount: FieldRef<"Payment", 'Decimal'>
    readonly changeAmount: FieldRef<"Payment", 'Decimal'>
    readonly transactionNumber: FieldRef<"Payment", 'String'>
    readonly notes: FieldRef<"Payment", 'String'>
    readonly userDocumentReceive: FieldRef<"Payment", 'String'>
    readonly customerDocumentPaid: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly createdBy: FieldRef<"Payment", 'String'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedBy: FieldRef<"Payment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.paid
   */
  export type Payment$paidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model InventoryMovementType
   */

  export type AggregateInventoryMovementType = {
    _count: InventoryMovementTypeCountAggregateOutputType | null
    _min: InventoryMovementTypeMinAggregateOutputType | null
    _max: InventoryMovementTypeMaxAggregateOutputType | null
  }

  export type InventoryMovementTypeMinAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type InventoryMovementTypeMaxAggregateOutputType = {
    code: string | null
    name: string | null
    description: string | null
    color: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
  }

  export type InventoryMovementTypeCountAggregateOutputType = {
    code: number
    name: number
    description: number
    color: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type InventoryMovementTypeMinAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type InventoryMovementTypeMaxAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type InventoryMovementTypeCountAggregateInputType = {
    code?: true
    name?: true
    description?: true
    color?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type InventoryMovementTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryMovementType to aggregate.
     */
    where?: InventoryMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovementTypes to fetch.
     */
    orderBy?: InventoryMovementTypeOrderByWithRelationInput | InventoryMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovementTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryMovementTypes
    **/
    _count?: true | InventoryMovementTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMovementTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMovementTypeMaxAggregateInputType
  }

  export type GetInventoryMovementTypeAggregateType<T extends InventoryMovementTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryMovementType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryMovementType[P]>
      : GetScalarType<T[P], AggregateInventoryMovementType[P]>
  }




  export type InventoryMovementTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryMovementTypeWhereInput
    orderBy?: InventoryMovementTypeOrderByWithAggregationInput | InventoryMovementTypeOrderByWithAggregationInput[]
    by: InventoryMovementTypeScalarFieldEnum[] | InventoryMovementTypeScalarFieldEnum
    having?: InventoryMovementTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryMovementTypeCountAggregateInputType | true
    _min?: InventoryMovementTypeMinAggregateInputType
    _max?: InventoryMovementTypeMaxAggregateInputType
  }

  export type InventoryMovementTypeGroupByOutputType = {
    code: string
    name: string
    description: string | null
    color: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    _count: InventoryMovementTypeCountAggregateOutputType | null
    _min: InventoryMovementTypeMinAggregateOutputType | null
    _max: InventoryMovementTypeMaxAggregateOutputType | null
  }

  type GetInventoryMovementTypeGroupByPayload<T extends InventoryMovementTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryMovementTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryMovementTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryMovementTypeGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryMovementTypeGroupByOutputType[P]>
        }
      >
    >


  export type InventoryMovementTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    movements?: boolean | InventoryMovementType$movementsArgs<ExtArgs>
    _count?: boolean | InventoryMovementTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryMovementType"]>



  export type InventoryMovementTypeSelectScalar = {
    code?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type InventoryMovementTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"code" | "name" | "description" | "color" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy", ExtArgs["result"]["inventoryMovementType"]>
  export type InventoryMovementTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movements?: boolean | InventoryMovementType$movementsArgs<ExtArgs>
    _count?: boolean | InventoryMovementTypeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InventoryMovementTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryMovementType"
    objects: {
      movements: Prisma.$InventoryMovementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      name: string
      description: string | null
      color: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
    }, ExtArgs["result"]["inventoryMovementType"]>
    composites: {}
  }

  type InventoryMovementTypeGetPayload<S extends boolean | null | undefined | InventoryMovementTypeDefaultArgs> = $Result.GetResult<Prisma.$InventoryMovementTypePayload, S>

  type InventoryMovementTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryMovementTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryMovementTypeCountAggregateInputType | true
    }

  export interface InventoryMovementTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryMovementType'], meta: { name: 'InventoryMovementType' } }
    /**
     * Find zero or one InventoryMovementType that matches the filter.
     * @param {InventoryMovementTypeFindUniqueArgs} args - Arguments to find a InventoryMovementType
     * @example
     * // Get one InventoryMovementType
     * const inventoryMovementType = await prisma.inventoryMovementType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryMovementTypeFindUniqueArgs>(args: SelectSubset<T, InventoryMovementTypeFindUniqueArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryMovementType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryMovementTypeFindUniqueOrThrowArgs} args - Arguments to find a InventoryMovementType
     * @example
     * // Get one InventoryMovementType
     * const inventoryMovementType = await prisma.inventoryMovementType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryMovementTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryMovementTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryMovementType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeFindFirstArgs} args - Arguments to find a InventoryMovementType
     * @example
     * // Get one InventoryMovementType
     * const inventoryMovementType = await prisma.inventoryMovementType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryMovementTypeFindFirstArgs>(args?: SelectSubset<T, InventoryMovementTypeFindFirstArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryMovementType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeFindFirstOrThrowArgs} args - Arguments to find a InventoryMovementType
     * @example
     * // Get one InventoryMovementType
     * const inventoryMovementType = await prisma.inventoryMovementType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryMovementTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryMovementTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryMovementTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryMovementTypes
     * const inventoryMovementTypes = await prisma.inventoryMovementType.findMany()
     * 
     * // Get first 10 InventoryMovementTypes
     * const inventoryMovementTypes = await prisma.inventoryMovementType.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const inventoryMovementTypeWithCodeOnly = await prisma.inventoryMovementType.findMany({ select: { code: true } })
     * 
     */
    findMany<T extends InventoryMovementTypeFindManyArgs>(args?: SelectSubset<T, InventoryMovementTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryMovementType.
     * @param {InventoryMovementTypeCreateArgs} args - Arguments to create a InventoryMovementType.
     * @example
     * // Create one InventoryMovementType
     * const InventoryMovementType = await prisma.inventoryMovementType.create({
     *   data: {
     *     // ... data to create a InventoryMovementType
     *   }
     * })
     * 
     */
    create<T extends InventoryMovementTypeCreateArgs>(args: SelectSubset<T, InventoryMovementTypeCreateArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryMovementTypes.
     * @param {InventoryMovementTypeCreateManyArgs} args - Arguments to create many InventoryMovementTypes.
     * @example
     * // Create many InventoryMovementTypes
     * const inventoryMovementType = await prisma.inventoryMovementType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryMovementTypeCreateManyArgs>(args?: SelectSubset<T, InventoryMovementTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryMovementType.
     * @param {InventoryMovementTypeDeleteArgs} args - Arguments to delete one InventoryMovementType.
     * @example
     * // Delete one InventoryMovementType
     * const InventoryMovementType = await prisma.inventoryMovementType.delete({
     *   where: {
     *     // ... filter to delete one InventoryMovementType
     *   }
     * })
     * 
     */
    delete<T extends InventoryMovementTypeDeleteArgs>(args: SelectSubset<T, InventoryMovementTypeDeleteArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryMovementType.
     * @param {InventoryMovementTypeUpdateArgs} args - Arguments to update one InventoryMovementType.
     * @example
     * // Update one InventoryMovementType
     * const inventoryMovementType = await prisma.inventoryMovementType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryMovementTypeUpdateArgs>(args: SelectSubset<T, InventoryMovementTypeUpdateArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryMovementTypes.
     * @param {InventoryMovementTypeDeleteManyArgs} args - Arguments to filter InventoryMovementTypes to delete.
     * @example
     * // Delete a few InventoryMovementTypes
     * const { count } = await prisma.inventoryMovementType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryMovementTypeDeleteManyArgs>(args?: SelectSubset<T, InventoryMovementTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryMovementTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryMovementTypes
     * const inventoryMovementType = await prisma.inventoryMovementType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryMovementTypeUpdateManyArgs>(args: SelectSubset<T, InventoryMovementTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryMovementType.
     * @param {InventoryMovementTypeUpsertArgs} args - Arguments to update or create a InventoryMovementType.
     * @example
     * // Update or create a InventoryMovementType
     * const inventoryMovementType = await prisma.inventoryMovementType.upsert({
     *   create: {
     *     // ... data to create a InventoryMovementType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryMovementType we want to update
     *   }
     * })
     */
    upsert<T extends InventoryMovementTypeUpsertArgs>(args: SelectSubset<T, InventoryMovementTypeUpsertArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryMovementTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeCountArgs} args - Arguments to filter InventoryMovementTypes to count.
     * @example
     * // Count the number of InventoryMovementTypes
     * const count = await prisma.inventoryMovementType.count({
     *   where: {
     *     // ... the filter for the InventoryMovementTypes we want to count
     *   }
     * })
    **/
    count<T extends InventoryMovementTypeCountArgs>(
      args?: Subset<T, InventoryMovementTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryMovementTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryMovementType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryMovementTypeAggregateArgs>(args: Subset<T, InventoryMovementTypeAggregateArgs>): Prisma.PrismaPromise<GetInventoryMovementTypeAggregateType<T>>

    /**
     * Group by InventoryMovementType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryMovementTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryMovementTypeGroupByArgs['orderBy'] }
        : { orderBy?: InventoryMovementTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryMovementTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryMovementTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryMovementType model
   */
  readonly fields: InventoryMovementTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryMovementType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryMovementTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    movements<T extends InventoryMovementType$movementsArgs<ExtArgs> = {}>(args?: Subset<T, InventoryMovementType$movementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryMovementType model
   */
  interface InventoryMovementTypeFieldRefs {
    readonly code: FieldRef<"InventoryMovementType", 'String'>
    readonly name: FieldRef<"InventoryMovementType", 'String'>
    readonly description: FieldRef<"InventoryMovementType", 'String'>
    readonly color: FieldRef<"InventoryMovementType", 'String'>
    readonly createdAt: FieldRef<"InventoryMovementType", 'DateTime'>
    readonly createdBy: FieldRef<"InventoryMovementType", 'String'>
    readonly updatedAt: FieldRef<"InventoryMovementType", 'DateTime'>
    readonly updatedBy: FieldRef<"InventoryMovementType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InventoryMovementType findUnique
   */
  export type InventoryMovementTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovementType to fetch.
     */
    where: InventoryMovementTypeWhereUniqueInput
  }

  /**
   * InventoryMovementType findUniqueOrThrow
   */
  export type InventoryMovementTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovementType to fetch.
     */
    where: InventoryMovementTypeWhereUniqueInput
  }

  /**
   * InventoryMovementType findFirst
   */
  export type InventoryMovementTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovementType to fetch.
     */
    where?: InventoryMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovementTypes to fetch.
     */
    orderBy?: InventoryMovementTypeOrderByWithRelationInput | InventoryMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryMovementTypes.
     */
    cursor?: InventoryMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovementTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryMovementTypes.
     */
    distinct?: InventoryMovementTypeScalarFieldEnum | InventoryMovementTypeScalarFieldEnum[]
  }

  /**
   * InventoryMovementType findFirstOrThrow
   */
  export type InventoryMovementTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovementType to fetch.
     */
    where?: InventoryMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovementTypes to fetch.
     */
    orderBy?: InventoryMovementTypeOrderByWithRelationInput | InventoryMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryMovementTypes.
     */
    cursor?: InventoryMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovementTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryMovementTypes.
     */
    distinct?: InventoryMovementTypeScalarFieldEnum | InventoryMovementTypeScalarFieldEnum[]
  }

  /**
   * InventoryMovementType findMany
   */
  export type InventoryMovementTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovementTypes to fetch.
     */
    where?: InventoryMovementTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovementTypes to fetch.
     */
    orderBy?: InventoryMovementTypeOrderByWithRelationInput | InventoryMovementTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryMovementTypes.
     */
    cursor?: InventoryMovementTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovementTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovementTypes.
     */
    skip?: number
    distinct?: InventoryMovementTypeScalarFieldEnum | InventoryMovementTypeScalarFieldEnum[]
  }

  /**
   * InventoryMovementType create
   */
  export type InventoryMovementTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryMovementType.
     */
    data: XOR<InventoryMovementTypeCreateInput, InventoryMovementTypeUncheckedCreateInput>
  }

  /**
   * InventoryMovementType createMany
   */
  export type InventoryMovementTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryMovementTypes.
     */
    data: InventoryMovementTypeCreateManyInput | InventoryMovementTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryMovementType update
   */
  export type InventoryMovementTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryMovementType.
     */
    data: XOR<InventoryMovementTypeUpdateInput, InventoryMovementTypeUncheckedUpdateInput>
    /**
     * Choose, which InventoryMovementType to update.
     */
    where: InventoryMovementTypeWhereUniqueInput
  }

  /**
   * InventoryMovementType updateMany
   */
  export type InventoryMovementTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryMovementTypes.
     */
    data: XOR<InventoryMovementTypeUpdateManyMutationInput, InventoryMovementTypeUncheckedUpdateManyInput>
    /**
     * Filter which InventoryMovementTypes to update
     */
    where?: InventoryMovementTypeWhereInput
    /**
     * Limit how many InventoryMovementTypes to update.
     */
    limit?: number
  }

  /**
   * InventoryMovementType upsert
   */
  export type InventoryMovementTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryMovementType to update in case it exists.
     */
    where: InventoryMovementTypeWhereUniqueInput
    /**
     * In case the InventoryMovementType found by the `where` argument doesn't exist, create a new InventoryMovementType with this data.
     */
    create: XOR<InventoryMovementTypeCreateInput, InventoryMovementTypeUncheckedCreateInput>
    /**
     * In case the InventoryMovementType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryMovementTypeUpdateInput, InventoryMovementTypeUncheckedUpdateInput>
  }

  /**
   * InventoryMovementType delete
   */
  export type InventoryMovementTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
    /**
     * Filter which InventoryMovementType to delete.
     */
    where: InventoryMovementTypeWhereUniqueInput
  }

  /**
   * InventoryMovementType deleteMany
   */
  export type InventoryMovementTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryMovementTypes to delete
     */
    where?: InventoryMovementTypeWhereInput
    /**
     * Limit how many InventoryMovementTypes to delete.
     */
    limit?: number
  }

  /**
   * InventoryMovementType.movements
   */
  export type InventoryMovementType$movementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    where?: InventoryMovementWhereInput
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    cursor?: InventoryMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryMovementScalarFieldEnum | InventoryMovementScalarFieldEnum[]
  }

  /**
   * InventoryMovementType without action
   */
  export type InventoryMovementTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovementType
     */
    select?: InventoryMovementTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovementType
     */
    omit?: InventoryMovementTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementTypeInclude<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    currentQuantity: number | null
    minimumStock: number | null
  }

  export type InventorySumAggregateOutputType = {
    id: number | null
    productId: number | null
    currentQuantity: number | null
    minimumStock: number | null
  }

  export type InventoryMinAggregateOutputType = {
    id: number | null
    productId: number | null
    currentQuantity: number | null
    minimumStock: number | null
    storageLocation: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    currentQuantity: number | null
    minimumStock: number | null
    storageLocation: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    productId: number
    currentQuantity: number
    minimumStock: number
    storageLocation: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    id?: true
    productId?: true
    currentQuantity?: true
    minimumStock?: true
  }

  export type InventorySumAggregateInputType = {
    id?: true
    productId?: true
    currentQuantity?: true
    minimumStock?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    productId?: true
    currentQuantity?: true
    minimumStock?: true
    storageLocation?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    productId?: true
    currentQuantity?: true
    minimumStock?: true
    storageLocation?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    productId?: true
    currentQuantity?: true
    minimumStock?: true
    storageLocation?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: number
    productId: number
    currentQuantity: number
    minimumStock: number
    storageLocation: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    currentQuantity?: boolean
    minimumStock?: boolean
    storageLocation?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    inventoryMovements?: boolean | Inventory$inventoryMovementsArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>



  export type InventorySelectScalar = {
    id?: boolean
    productId?: boolean
    currentQuantity?: boolean
    minimumStock?: boolean
    storageLocation?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type InventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "currentQuantity" | "minimumStock" | "storageLocation" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["inventory"]>
  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    inventoryMovements?: boolean | Inventory$inventoryMovementsArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      inventoryMovements: Prisma.$InventoryMovementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      currentQuantity: number
      minimumStock: number
      storageLocation: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventoryMovements<T extends Inventory$inventoryMovementsArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$inventoryMovementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'Int'>
    readonly productId: FieldRef<"Inventory", 'Int'>
    readonly currentQuantity: FieldRef<"Inventory", 'Int'>
    readonly minimumStock: FieldRef<"Inventory", 'Int'>
    readonly storageLocation: FieldRef<"Inventory", 'String'>
    readonly createdAt: FieldRef<"Inventory", 'DateTime'>
    readonly createdBy: FieldRef<"Inventory", 'String'>
    readonly updatedAt: FieldRef<"Inventory", 'DateTime'>
    readonly updatedBy: FieldRef<"Inventory", 'String'>
    readonly deletedAt: FieldRef<"Inventory", 'DateTime'>
    readonly deletedBy: FieldRef<"Inventory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to update.
     */
    limit?: number
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to delete.
     */
    limit?: number
  }

  /**
   * Inventory.inventoryMovements
   */
  export type Inventory$inventoryMovementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    where?: InventoryMovementWhereInput
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    cursor?: InventoryMovementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryMovementScalarFieldEnum | InventoryMovementScalarFieldEnum[]
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Model InventoryMovement
   */

  export type AggregateInventoryMovement = {
    _count: InventoryMovementCountAggregateOutputType | null
    _avg: InventoryMovementAvgAggregateOutputType | null
    _sum: InventoryMovementSumAggregateOutputType | null
    _min: InventoryMovementMinAggregateOutputType | null
    _max: InventoryMovementMaxAggregateOutputType | null
  }

  export type InventoryMovementAvgAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    quantityMovement: number | null
  }

  export type InventoryMovementSumAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    quantityMovement: number | null
  }

  export type InventoryMovementMinAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    inventoryMovementTypeCode: string | null
    quantityMovement: number | null
    reasonDescription: string | null
    userDocument: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type InventoryMovementMaxAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    inventoryMovementTypeCode: string | null
    quantityMovement: number | null
    reasonDescription: string | null
    userDocument: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type InventoryMovementCountAggregateOutputType = {
    id: number
    inventoryId: number
    inventoryMovementTypeCode: number
    quantityMovement: number
    reasonDescription: number
    userDocument: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type InventoryMovementAvgAggregateInputType = {
    id?: true
    inventoryId?: true
    quantityMovement?: true
  }

  export type InventoryMovementSumAggregateInputType = {
    id?: true
    inventoryId?: true
    quantityMovement?: true
  }

  export type InventoryMovementMinAggregateInputType = {
    id?: true
    inventoryId?: true
    inventoryMovementTypeCode?: true
    quantityMovement?: true
    reasonDescription?: true
    userDocument?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type InventoryMovementMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    inventoryMovementTypeCode?: true
    quantityMovement?: true
    reasonDescription?: true
    userDocument?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type InventoryMovementCountAggregateInputType = {
    id?: true
    inventoryId?: true
    inventoryMovementTypeCode?: true
    quantityMovement?: true
    reasonDescription?: true
    userDocument?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type InventoryMovementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryMovement to aggregate.
     */
    where?: InventoryMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovements to fetch.
     */
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryMovements
    **/
    _count?: true | InventoryMovementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryMovementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryMovementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMovementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMovementMaxAggregateInputType
  }

  export type GetInventoryMovementAggregateType<T extends InventoryMovementAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryMovement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryMovement[P]>
      : GetScalarType<T[P], AggregateInventoryMovement[P]>
  }




  export type InventoryMovementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryMovementWhereInput
    orderBy?: InventoryMovementOrderByWithAggregationInput | InventoryMovementOrderByWithAggregationInput[]
    by: InventoryMovementScalarFieldEnum[] | InventoryMovementScalarFieldEnum
    having?: InventoryMovementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryMovementCountAggregateInputType | true
    _avg?: InventoryMovementAvgAggregateInputType
    _sum?: InventoryMovementSumAggregateInputType
    _min?: InventoryMovementMinAggregateInputType
    _max?: InventoryMovementMaxAggregateInputType
  }

  export type InventoryMovementGroupByOutputType = {
    id: number
    inventoryId: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: InventoryMovementCountAggregateOutputType | null
    _avg: InventoryMovementAvgAggregateOutputType | null
    _sum: InventoryMovementSumAggregateOutputType | null
    _min: InventoryMovementMinAggregateOutputType | null
    _max: InventoryMovementMaxAggregateOutputType | null
  }

  type GetInventoryMovementGroupByPayload<T extends InventoryMovementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryMovementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryMovementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryMovementGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryMovementGroupByOutputType[P]>
        }
      >
    >


  export type InventoryMovementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    inventoryMovementTypeCode?: boolean
    quantityMovement?: boolean
    reasonDescription?: boolean
    userDocument?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    inventoryMovementType?: boolean | InventoryMovementTypeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryMovement"]>



  export type InventoryMovementSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    inventoryMovementTypeCode?: boolean
    quantityMovement?: boolean
    reasonDescription?: boolean
    userDocument?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type InventoryMovementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "inventoryId" | "inventoryMovementTypeCode" | "quantityMovement" | "reasonDescription" | "userDocument" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["inventoryMovement"]>
  export type InventoryMovementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
    inventoryMovementType?: boolean | InventoryMovementTypeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InventoryMovementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryMovement"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
      inventoryMovementType: Prisma.$InventoryMovementTypePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      inventoryId: number
      inventoryMovementTypeCode: string
      quantityMovement: number
      reasonDescription: string
      userDocument: string
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["inventoryMovement"]>
    composites: {}
  }

  type InventoryMovementGetPayload<S extends boolean | null | undefined | InventoryMovementDefaultArgs> = $Result.GetResult<Prisma.$InventoryMovementPayload, S>

  type InventoryMovementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryMovementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryMovementCountAggregateInputType | true
    }

  export interface InventoryMovementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryMovement'], meta: { name: 'InventoryMovement' } }
    /**
     * Find zero or one InventoryMovement that matches the filter.
     * @param {InventoryMovementFindUniqueArgs} args - Arguments to find a InventoryMovement
     * @example
     * // Get one InventoryMovement
     * const inventoryMovement = await prisma.inventoryMovement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryMovementFindUniqueArgs>(args: SelectSubset<T, InventoryMovementFindUniqueArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InventoryMovement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryMovementFindUniqueOrThrowArgs} args - Arguments to find a InventoryMovement
     * @example
     * // Get one InventoryMovement
     * const inventoryMovement = await prisma.inventoryMovement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryMovementFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryMovementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryMovement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementFindFirstArgs} args - Arguments to find a InventoryMovement
     * @example
     * // Get one InventoryMovement
     * const inventoryMovement = await prisma.inventoryMovement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryMovementFindFirstArgs>(args?: SelectSubset<T, InventoryMovementFindFirstArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InventoryMovement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementFindFirstOrThrowArgs} args - Arguments to find a InventoryMovement
     * @example
     * // Get one InventoryMovement
     * const inventoryMovement = await prisma.inventoryMovement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryMovementFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryMovementFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InventoryMovements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryMovements
     * const inventoryMovements = await prisma.inventoryMovement.findMany()
     * 
     * // Get first 10 InventoryMovements
     * const inventoryMovements = await prisma.inventoryMovement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryMovementWithIdOnly = await prisma.inventoryMovement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryMovementFindManyArgs>(args?: SelectSubset<T, InventoryMovementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InventoryMovement.
     * @param {InventoryMovementCreateArgs} args - Arguments to create a InventoryMovement.
     * @example
     * // Create one InventoryMovement
     * const InventoryMovement = await prisma.inventoryMovement.create({
     *   data: {
     *     // ... data to create a InventoryMovement
     *   }
     * })
     * 
     */
    create<T extends InventoryMovementCreateArgs>(args: SelectSubset<T, InventoryMovementCreateArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InventoryMovements.
     * @param {InventoryMovementCreateManyArgs} args - Arguments to create many InventoryMovements.
     * @example
     * // Create many InventoryMovements
     * const inventoryMovement = await prisma.inventoryMovement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryMovementCreateManyArgs>(args?: SelectSubset<T, InventoryMovementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryMovement.
     * @param {InventoryMovementDeleteArgs} args - Arguments to delete one InventoryMovement.
     * @example
     * // Delete one InventoryMovement
     * const InventoryMovement = await prisma.inventoryMovement.delete({
     *   where: {
     *     // ... filter to delete one InventoryMovement
     *   }
     * })
     * 
     */
    delete<T extends InventoryMovementDeleteArgs>(args: SelectSubset<T, InventoryMovementDeleteArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InventoryMovement.
     * @param {InventoryMovementUpdateArgs} args - Arguments to update one InventoryMovement.
     * @example
     * // Update one InventoryMovement
     * const inventoryMovement = await prisma.inventoryMovement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryMovementUpdateArgs>(args: SelectSubset<T, InventoryMovementUpdateArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InventoryMovements.
     * @param {InventoryMovementDeleteManyArgs} args - Arguments to filter InventoryMovements to delete.
     * @example
     * // Delete a few InventoryMovements
     * const { count } = await prisma.inventoryMovement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryMovementDeleteManyArgs>(args?: SelectSubset<T, InventoryMovementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryMovements
     * const inventoryMovement = await prisma.inventoryMovement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryMovementUpdateManyArgs>(args: SelectSubset<T, InventoryMovementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryMovement.
     * @param {InventoryMovementUpsertArgs} args - Arguments to update or create a InventoryMovement.
     * @example
     * // Update or create a InventoryMovement
     * const inventoryMovement = await prisma.inventoryMovement.upsert({
     *   create: {
     *     // ... data to create a InventoryMovement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryMovement we want to update
     *   }
     * })
     */
    upsert<T extends InventoryMovementUpsertArgs>(args: SelectSubset<T, InventoryMovementUpsertArgs<ExtArgs>>): Prisma__InventoryMovementClient<$Result.GetResult<Prisma.$InventoryMovementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InventoryMovements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementCountArgs} args - Arguments to filter InventoryMovements to count.
     * @example
     * // Count the number of InventoryMovements
     * const count = await prisma.inventoryMovement.count({
     *   where: {
     *     // ... the filter for the InventoryMovements we want to count
     *   }
     * })
    **/
    count<T extends InventoryMovementCountArgs>(
      args?: Subset<T, InventoryMovementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryMovementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryMovementAggregateArgs>(args: Subset<T, InventoryMovementAggregateArgs>): Prisma.PrismaPromise<GetInventoryMovementAggregateType<T>>

    /**
     * Group by InventoryMovement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryMovementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryMovementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryMovementGroupByArgs['orderBy'] }
        : { orderBy?: InventoryMovementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryMovementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryMovementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryMovement model
   */
  readonly fields: InventoryMovementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryMovement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryMovementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventoryMovementType<T extends InventoryMovementTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryMovementTypeDefaultArgs<ExtArgs>>): Prisma__InventoryMovementTypeClient<$Result.GetResult<Prisma.$InventoryMovementTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryMovement model
   */
  interface InventoryMovementFieldRefs {
    readonly id: FieldRef<"InventoryMovement", 'Int'>
    readonly inventoryId: FieldRef<"InventoryMovement", 'Int'>
    readonly inventoryMovementTypeCode: FieldRef<"InventoryMovement", 'String'>
    readonly quantityMovement: FieldRef<"InventoryMovement", 'Int'>
    readonly reasonDescription: FieldRef<"InventoryMovement", 'String'>
    readonly userDocument: FieldRef<"InventoryMovement", 'String'>
    readonly createdAt: FieldRef<"InventoryMovement", 'DateTime'>
    readonly createdBy: FieldRef<"InventoryMovement", 'String'>
    readonly updatedAt: FieldRef<"InventoryMovement", 'DateTime'>
    readonly updatedBy: FieldRef<"InventoryMovement", 'String'>
    readonly deletedAt: FieldRef<"InventoryMovement", 'DateTime'>
    readonly deletedBy: FieldRef<"InventoryMovement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InventoryMovement findUnique
   */
  export type InventoryMovementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovement to fetch.
     */
    where: InventoryMovementWhereUniqueInput
  }

  /**
   * InventoryMovement findUniqueOrThrow
   */
  export type InventoryMovementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovement to fetch.
     */
    where: InventoryMovementWhereUniqueInput
  }

  /**
   * InventoryMovement findFirst
   */
  export type InventoryMovementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovement to fetch.
     */
    where?: InventoryMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovements to fetch.
     */
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryMovements.
     */
    cursor?: InventoryMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryMovements.
     */
    distinct?: InventoryMovementScalarFieldEnum | InventoryMovementScalarFieldEnum[]
  }

  /**
   * InventoryMovement findFirstOrThrow
   */
  export type InventoryMovementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovement to fetch.
     */
    where?: InventoryMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovements to fetch.
     */
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryMovements.
     */
    cursor?: InventoryMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryMovements.
     */
    distinct?: InventoryMovementScalarFieldEnum | InventoryMovementScalarFieldEnum[]
  }

  /**
   * InventoryMovement findMany
   */
  export type InventoryMovementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * Filter, which InventoryMovements to fetch.
     */
    where?: InventoryMovementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryMovements to fetch.
     */
    orderBy?: InventoryMovementOrderByWithRelationInput | InventoryMovementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryMovements.
     */
    cursor?: InventoryMovementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryMovements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryMovements.
     */
    skip?: number
    distinct?: InventoryMovementScalarFieldEnum | InventoryMovementScalarFieldEnum[]
  }

  /**
   * InventoryMovement create
   */
  export type InventoryMovementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryMovement.
     */
    data: XOR<InventoryMovementCreateInput, InventoryMovementUncheckedCreateInput>
  }

  /**
   * InventoryMovement createMany
   */
  export type InventoryMovementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryMovements.
     */
    data: InventoryMovementCreateManyInput | InventoryMovementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryMovement update
   */
  export type InventoryMovementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryMovement.
     */
    data: XOR<InventoryMovementUpdateInput, InventoryMovementUncheckedUpdateInput>
    /**
     * Choose, which InventoryMovement to update.
     */
    where: InventoryMovementWhereUniqueInput
  }

  /**
   * InventoryMovement updateMany
   */
  export type InventoryMovementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryMovements.
     */
    data: XOR<InventoryMovementUpdateManyMutationInput, InventoryMovementUncheckedUpdateManyInput>
    /**
     * Filter which InventoryMovements to update
     */
    where?: InventoryMovementWhereInput
    /**
     * Limit how many InventoryMovements to update.
     */
    limit?: number
  }

  /**
   * InventoryMovement upsert
   */
  export type InventoryMovementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryMovement to update in case it exists.
     */
    where: InventoryMovementWhereUniqueInput
    /**
     * In case the InventoryMovement found by the `where` argument doesn't exist, create a new InventoryMovement with this data.
     */
    create: XOR<InventoryMovementCreateInput, InventoryMovementUncheckedCreateInput>
    /**
     * In case the InventoryMovement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryMovementUpdateInput, InventoryMovementUncheckedUpdateInput>
  }

  /**
   * InventoryMovement delete
   */
  export type InventoryMovementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
    /**
     * Filter which InventoryMovement to delete.
     */
    where: InventoryMovementWhereUniqueInput
  }

  /**
   * InventoryMovement deleteMany
   */
  export type InventoryMovementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryMovements to delete
     */
    where?: InventoryMovementWhereInput
    /**
     * Limit how many InventoryMovements to delete.
     */
    limit?: number
  }

  /**
   * InventoryMovement without action
   */
  export type InventoryMovementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryMovement
     */
    select?: InventoryMovementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InventoryMovement
     */
    omit?: InventoryMovementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryMovementInclude<ExtArgs> | null
  }


  /**
   * Model OrderSequence
   */

  export type AggregateOrderSequence = {
    _count: OrderSequenceCountAggregateOutputType | null
    _avg: OrderSequenceAvgAggregateOutputType | null
    _sum: OrderSequenceSumAggregateOutputType | null
    _min: OrderSequenceMinAggregateOutputType | null
    _max: OrderSequenceMaxAggregateOutputType | null
  }

  export type OrderSequenceAvgAggregateOutputType = {
    id: number | null
    sequenceYear: number | null
    sequenceMonth: number | null
    sequenceDay: number | null
    lastOrderNumber: number | null
  }

  export type OrderSequenceSumAggregateOutputType = {
    id: number | null
    sequenceYear: number | null
    sequenceMonth: number | null
    sequenceDay: number | null
    lastOrderNumber: number | null
  }

  export type OrderSequenceMinAggregateOutputType = {
    id: number | null
    sequenceYear: number | null
    sequenceMonth: number | null
    sequenceDay: number | null
    lastOrderNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderSequenceMaxAggregateOutputType = {
    id: number | null
    sequenceYear: number | null
    sequenceMonth: number | null
    sequenceDay: number | null
    lastOrderNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderSequenceCountAggregateOutputType = {
    id: number
    sequenceYear: number
    sequenceMonth: number
    sequenceDay: number
    lastOrderNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderSequenceAvgAggregateInputType = {
    id?: true
    sequenceYear?: true
    sequenceMonth?: true
    sequenceDay?: true
    lastOrderNumber?: true
  }

  export type OrderSequenceSumAggregateInputType = {
    id?: true
    sequenceYear?: true
    sequenceMonth?: true
    sequenceDay?: true
    lastOrderNumber?: true
  }

  export type OrderSequenceMinAggregateInputType = {
    id?: true
    sequenceYear?: true
    sequenceMonth?: true
    sequenceDay?: true
    lastOrderNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderSequenceMaxAggregateInputType = {
    id?: true
    sequenceYear?: true
    sequenceMonth?: true
    sequenceDay?: true
    lastOrderNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderSequenceCountAggregateInputType = {
    id?: true
    sequenceYear?: true
    sequenceMonth?: true
    sequenceDay?: true
    lastOrderNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderSequenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderSequence to aggregate.
     */
    where?: OrderSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderSequences to fetch.
     */
    orderBy?: OrderSequenceOrderByWithRelationInput | OrderSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderSequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderSequences
    **/
    _count?: true | OrderSequenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderSequenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSequenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderSequenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderSequenceMaxAggregateInputType
  }

  export type GetOrderSequenceAggregateType<T extends OrderSequenceAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderSequence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderSequence[P]>
      : GetScalarType<T[P], AggregateOrderSequence[P]>
  }




  export type OrderSequenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderSequenceWhereInput
    orderBy?: OrderSequenceOrderByWithAggregationInput | OrderSequenceOrderByWithAggregationInput[]
    by: OrderSequenceScalarFieldEnum[] | OrderSequenceScalarFieldEnum
    having?: OrderSequenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderSequenceCountAggregateInputType | true
    _avg?: OrderSequenceAvgAggregateInputType
    _sum?: OrderSequenceSumAggregateInputType
    _min?: OrderSequenceMinAggregateInputType
    _max?: OrderSequenceMaxAggregateInputType
  }

  export type OrderSequenceGroupByOutputType = {
    id: number
    sequenceYear: number
    sequenceMonth: number
    sequenceDay: number
    lastOrderNumber: number
    createdAt: Date
    updatedAt: Date | null
    _count: OrderSequenceCountAggregateOutputType | null
    _avg: OrderSequenceAvgAggregateOutputType | null
    _sum: OrderSequenceSumAggregateOutputType | null
    _min: OrderSequenceMinAggregateOutputType | null
    _max: OrderSequenceMaxAggregateOutputType | null
  }

  type GetOrderSequenceGroupByPayload<T extends OrderSequenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderSequenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderSequenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderSequenceGroupByOutputType[P]>
            : GetScalarType<T[P], OrderSequenceGroupByOutputType[P]>
        }
      >
    >


  export type OrderSequenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sequenceYear?: boolean
    sequenceMonth?: boolean
    sequenceDay?: boolean
    lastOrderNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["orderSequence"]>



  export type OrderSequenceSelectScalar = {
    id?: boolean
    sequenceYear?: boolean
    sequenceMonth?: boolean
    sequenceDay?: boolean
    lastOrderNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderSequenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sequenceYear" | "sequenceMonth" | "sequenceDay" | "lastOrderNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["orderSequence"]>

  export type $OrderSequencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderSequence"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sequenceYear: number
      sequenceMonth: number
      sequenceDay: number
      lastOrderNumber: number
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["orderSequence"]>
    composites: {}
  }

  type OrderSequenceGetPayload<S extends boolean | null | undefined | OrderSequenceDefaultArgs> = $Result.GetResult<Prisma.$OrderSequencePayload, S>

  type OrderSequenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderSequenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderSequenceCountAggregateInputType | true
    }

  export interface OrderSequenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderSequence'], meta: { name: 'OrderSequence' } }
    /**
     * Find zero or one OrderSequence that matches the filter.
     * @param {OrderSequenceFindUniqueArgs} args - Arguments to find a OrderSequence
     * @example
     * // Get one OrderSequence
     * const orderSequence = await prisma.orderSequence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderSequenceFindUniqueArgs>(args: SelectSubset<T, OrderSequenceFindUniqueArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderSequence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderSequenceFindUniqueOrThrowArgs} args - Arguments to find a OrderSequence
     * @example
     * // Get one OrderSequence
     * const orderSequence = await prisma.orderSequence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderSequenceFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderSequenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderSequence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceFindFirstArgs} args - Arguments to find a OrderSequence
     * @example
     * // Get one OrderSequence
     * const orderSequence = await prisma.orderSequence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderSequenceFindFirstArgs>(args?: SelectSubset<T, OrderSequenceFindFirstArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderSequence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceFindFirstOrThrowArgs} args - Arguments to find a OrderSequence
     * @example
     * // Get one OrderSequence
     * const orderSequence = await prisma.orderSequence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderSequenceFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderSequenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderSequences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderSequences
     * const orderSequences = await prisma.orderSequence.findMany()
     * 
     * // Get first 10 OrderSequences
     * const orderSequences = await prisma.orderSequence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderSequenceWithIdOnly = await prisma.orderSequence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderSequenceFindManyArgs>(args?: SelectSubset<T, OrderSequenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderSequence.
     * @param {OrderSequenceCreateArgs} args - Arguments to create a OrderSequence.
     * @example
     * // Create one OrderSequence
     * const OrderSequence = await prisma.orderSequence.create({
     *   data: {
     *     // ... data to create a OrderSequence
     *   }
     * })
     * 
     */
    create<T extends OrderSequenceCreateArgs>(args: SelectSubset<T, OrderSequenceCreateArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderSequences.
     * @param {OrderSequenceCreateManyArgs} args - Arguments to create many OrderSequences.
     * @example
     * // Create many OrderSequences
     * const orderSequence = await prisma.orderSequence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderSequenceCreateManyArgs>(args?: SelectSubset<T, OrderSequenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderSequence.
     * @param {OrderSequenceDeleteArgs} args - Arguments to delete one OrderSequence.
     * @example
     * // Delete one OrderSequence
     * const OrderSequence = await prisma.orderSequence.delete({
     *   where: {
     *     // ... filter to delete one OrderSequence
     *   }
     * })
     * 
     */
    delete<T extends OrderSequenceDeleteArgs>(args: SelectSubset<T, OrderSequenceDeleteArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderSequence.
     * @param {OrderSequenceUpdateArgs} args - Arguments to update one OrderSequence.
     * @example
     * // Update one OrderSequence
     * const orderSequence = await prisma.orderSequence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderSequenceUpdateArgs>(args: SelectSubset<T, OrderSequenceUpdateArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderSequences.
     * @param {OrderSequenceDeleteManyArgs} args - Arguments to filter OrderSequences to delete.
     * @example
     * // Delete a few OrderSequences
     * const { count } = await prisma.orderSequence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderSequenceDeleteManyArgs>(args?: SelectSubset<T, OrderSequenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderSequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderSequences
     * const orderSequence = await prisma.orderSequence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderSequenceUpdateManyArgs>(args: SelectSubset<T, OrderSequenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderSequence.
     * @param {OrderSequenceUpsertArgs} args - Arguments to update or create a OrderSequence.
     * @example
     * // Update or create a OrderSequence
     * const orderSequence = await prisma.orderSequence.upsert({
     *   create: {
     *     // ... data to create a OrderSequence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderSequence we want to update
     *   }
     * })
     */
    upsert<T extends OrderSequenceUpsertArgs>(args: SelectSubset<T, OrderSequenceUpsertArgs<ExtArgs>>): Prisma__OrderSequenceClient<$Result.GetResult<Prisma.$OrderSequencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderSequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceCountArgs} args - Arguments to filter OrderSequences to count.
     * @example
     * // Count the number of OrderSequences
     * const count = await prisma.orderSequence.count({
     *   where: {
     *     // ... the filter for the OrderSequences we want to count
     *   }
     * })
    **/
    count<T extends OrderSequenceCountArgs>(
      args?: Subset<T, OrderSequenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderSequenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderSequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderSequenceAggregateArgs>(args: Subset<T, OrderSequenceAggregateArgs>): Prisma.PrismaPromise<GetOrderSequenceAggregateType<T>>

    /**
     * Group by OrderSequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderSequenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderSequenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderSequenceGroupByArgs['orderBy'] }
        : { orderBy?: OrderSequenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderSequenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderSequenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderSequence model
   */
  readonly fields: OrderSequenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderSequence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderSequenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderSequence model
   */
  interface OrderSequenceFieldRefs {
    readonly id: FieldRef<"OrderSequence", 'Int'>
    readonly sequenceYear: FieldRef<"OrderSequence", 'Int'>
    readonly sequenceMonth: FieldRef<"OrderSequence", 'Int'>
    readonly sequenceDay: FieldRef<"OrderSequence", 'Int'>
    readonly lastOrderNumber: FieldRef<"OrderSequence", 'Int'>
    readonly createdAt: FieldRef<"OrderSequence", 'DateTime'>
    readonly updatedAt: FieldRef<"OrderSequence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OrderSequence findUnique
   */
  export type OrderSequenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * Filter, which OrderSequence to fetch.
     */
    where: OrderSequenceWhereUniqueInput
  }

  /**
   * OrderSequence findUniqueOrThrow
   */
  export type OrderSequenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * Filter, which OrderSequence to fetch.
     */
    where: OrderSequenceWhereUniqueInput
  }

  /**
   * OrderSequence findFirst
   */
  export type OrderSequenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * Filter, which OrderSequence to fetch.
     */
    where?: OrderSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderSequences to fetch.
     */
    orderBy?: OrderSequenceOrderByWithRelationInput | OrderSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderSequences.
     */
    cursor?: OrderSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderSequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderSequences.
     */
    distinct?: OrderSequenceScalarFieldEnum | OrderSequenceScalarFieldEnum[]
  }

  /**
   * OrderSequence findFirstOrThrow
   */
  export type OrderSequenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * Filter, which OrderSequence to fetch.
     */
    where?: OrderSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderSequences to fetch.
     */
    orderBy?: OrderSequenceOrderByWithRelationInput | OrderSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderSequences.
     */
    cursor?: OrderSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderSequences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderSequences.
     */
    distinct?: OrderSequenceScalarFieldEnum | OrderSequenceScalarFieldEnum[]
  }

  /**
   * OrderSequence findMany
   */
  export type OrderSequenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * Filter, which OrderSequences to fetch.
     */
    where?: OrderSequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderSequences to fetch.
     */
    orderBy?: OrderSequenceOrderByWithRelationInput | OrderSequenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderSequences.
     */
    cursor?: OrderSequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderSequences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderSequences.
     */
    skip?: number
    distinct?: OrderSequenceScalarFieldEnum | OrderSequenceScalarFieldEnum[]
  }

  /**
   * OrderSequence create
   */
  export type OrderSequenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * The data needed to create a OrderSequence.
     */
    data: XOR<OrderSequenceCreateInput, OrderSequenceUncheckedCreateInput>
  }

  /**
   * OrderSequence createMany
   */
  export type OrderSequenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderSequences.
     */
    data: OrderSequenceCreateManyInput | OrderSequenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderSequence update
   */
  export type OrderSequenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * The data needed to update a OrderSequence.
     */
    data: XOR<OrderSequenceUpdateInput, OrderSequenceUncheckedUpdateInput>
    /**
     * Choose, which OrderSequence to update.
     */
    where: OrderSequenceWhereUniqueInput
  }

  /**
   * OrderSequence updateMany
   */
  export type OrderSequenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderSequences.
     */
    data: XOR<OrderSequenceUpdateManyMutationInput, OrderSequenceUncheckedUpdateManyInput>
    /**
     * Filter which OrderSequences to update
     */
    where?: OrderSequenceWhereInput
    /**
     * Limit how many OrderSequences to update.
     */
    limit?: number
  }

  /**
   * OrderSequence upsert
   */
  export type OrderSequenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * The filter to search for the OrderSequence to update in case it exists.
     */
    where: OrderSequenceWhereUniqueInput
    /**
     * In case the OrderSequence found by the `where` argument doesn't exist, create a new OrderSequence with this data.
     */
    create: XOR<OrderSequenceCreateInput, OrderSequenceUncheckedCreateInput>
    /**
     * In case the OrderSequence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderSequenceUpdateInput, OrderSequenceUncheckedUpdateInput>
  }

  /**
   * OrderSequence delete
   */
  export type OrderSequenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
    /**
     * Filter which OrderSequence to delete.
     */
    where: OrderSequenceWhereUniqueInput
  }

  /**
   * OrderSequence deleteMany
   */
  export type OrderSequenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderSequences to delete
     */
    where?: OrderSequenceWhereInput
    /**
     * Limit how many OrderSequences to delete.
     */
    limit?: number
  }

  /**
   * OrderSequence without action
   */
  export type OrderSequenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderSequence
     */
    select?: OrderSequenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderSequence
     */
    omit?: OrderSequenceOmit<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userDocument: string | null
    customerDocument: string | null
    token: string | null
    deviceInfo: string | null
    ipAddress: string | null
    isActive: boolean | null
    expiresAt: Date | null
    closedAt: Date | null
    closedBy: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userDocument: string | null
    customerDocument: string | null
    token: string | null
    deviceInfo: string | null
    ipAddress: string | null
    isActive: boolean | null
    expiresAt: Date | null
    closedAt: Date | null
    closedBy: string | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userDocument: number
    customerDocument: number
    token: number
    deviceInfo: number
    ipAddress: number
    isActive: number
    expiresAt: number
    closedAt: number
    closedBy: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userDocument?: true
    customerDocument?: true
    token?: true
    deviceInfo?: true
    ipAddress?: true
    isActive?: true
    expiresAt?: true
    closedAt?: true
    closedBy?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userDocument?: true
    customerDocument?: true
    token?: true
    deviceInfo?: true
    ipAddress?: true
    isActive?: true
    expiresAt?: true
    closedAt?: true
    closedBy?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userDocument?: true
    customerDocument?: true
    token?: true
    deviceInfo?: true
    ipAddress?: true
    isActive?: true
    expiresAt?: true
    closedAt?: true
    closedBy?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userDocument: string | null
    customerDocument: string | null
    token: string
    deviceInfo: string | null
    ipAddress: string | null
    isActive: boolean
    expiresAt: Date
    closedAt: Date | null
    closedBy: string | null
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userDocument?: boolean
    customerDocument?: boolean
    token?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    isActive?: boolean
    expiresAt?: boolean
    closedAt?: boolean
    closedBy?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
    user?: boolean | Session$userArgs<ExtArgs>
    customer?: boolean | Session$customerArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>



  export type SessionSelectScalar = {
    id?: boolean
    userDocument?: boolean
    customerDocument?: boolean
    token?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    isActive?: boolean
    expiresAt?: boolean
    closedAt?: boolean
    closedBy?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userDocument" | "customerDocument" | "token" | "deviceInfo" | "ipAddress" | "isActive" | "expiresAt" | "closedAt" | "closedBy" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Session$userArgs<ExtArgs>
    customer?: boolean | Session$customerArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      customer: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userDocument: string | null
      customerDocument: string | null
      token: string
      deviceInfo: string | null
      ipAddress: string | null
      isActive: boolean
      expiresAt: Date
      closedAt: Date | null
      closedBy: string | null
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Session$userArgs<ExtArgs> = {}>(args?: Subset<T, Session$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    customer<T extends Session$customerArgs<ExtArgs> = {}>(args?: Subset<T, Session$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userDocument: FieldRef<"Session", 'String'>
    readonly customerDocument: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly deviceInfo: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly isActive: FieldRef<"Session", 'Boolean'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly closedAt: FieldRef<"Session", 'DateTime'>
    readonly closedBy: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly createdBy: FieldRef<"Session", 'String'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly updatedBy: FieldRef<"Session", 'String'>
    readonly deletedAt: FieldRef<"Session", 'DateTime'>
    readonly deletedBy: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session.user
   */
  export type Session$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Session.customer
   */
  export type Session$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Log
   */

  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    id: number | null
  }

  export type LogSumAggregateOutputType = {
    id: number | null
  }

  export type LogMinAggregateOutputType = {
    id: number | null
    entityName: string | null
    entityId: string | null
    action: string | null
    message: string | null
    userDocument: string | null
    customerDocument: string | null
    deviceInfo: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type LogMaxAggregateOutputType = {
    id: number | null
    entityName: string | null
    entityId: string | null
    action: string | null
    message: string | null
    userDocument: string | null
    customerDocument: string | null
    deviceInfo: string | null
    ipAddress: string | null
    createdAt: Date | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    entityName: number
    entityId: number
    action: number
    message: number
    userDocument: number
    customerDocument: number
    deviceInfo: number
    ipAddress: number
    createdAt: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    id?: true
  }

  export type LogSumAggregateInputType = {
    id?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    entityName?: true
    entityId?: true
    action?: true
    message?: true
    userDocument?: true
    customerDocument?: true
    deviceInfo?: true
    ipAddress?: true
    createdAt?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    entityName?: true
    entityId?: true
    action?: true
    message?: true
    userDocument?: true
    customerDocument?: true
    deviceInfo?: true
    ipAddress?: true
    createdAt?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    entityName?: true
    entityId?: true
    action?: true
    message?: true
    userDocument?: true
    customerDocument?: true
    deviceInfo?: true
    ipAddress?: true
    createdAt?: true
    _all?: true
  }

  export type LogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Log to aggregate.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogWhereInput
    orderBy?: LogOrderByWithAggregationInput | LogOrderByWithAggregationInput[]
    by: LogScalarFieldEnum[] | LogScalarFieldEnum
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }

  export type LogGroupByOutputType = {
    id: number
    entityName: string
    entityId: string | null
    action: string
    message: string | null
    userDocument: string | null
    customerDocument: string | null
    deviceInfo: string | null
    ipAddress: string | null
    createdAt: Date
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityName?: boolean
    entityId?: boolean
    action?: boolean
    message?: boolean
    userDocument?: boolean
    customerDocument?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    createdAt?: boolean
    user?: boolean | Log$userArgs<ExtArgs>
    customer?: boolean | Log$customerArgs<ExtArgs>
  }, ExtArgs["result"]["log"]>



  export type LogSelectScalar = {
    id?: boolean
    entityName?: boolean
    entityId?: boolean
    action?: boolean
    message?: boolean
    userDocument?: boolean
    customerDocument?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    createdAt?: boolean
  }

  export type LogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityName" | "entityId" | "action" | "message" | "userDocument" | "customerDocument" | "deviceInfo" | "ipAddress" | "createdAt", ExtArgs["result"]["log"]>
  export type LogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Log$userArgs<ExtArgs>
    customer?: boolean | Log$customerArgs<ExtArgs>
  }

  export type $LogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Log"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      customer: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      entityName: string
      entityId: string | null
      action: string
      message: string | null
      userDocument: string | null
      customerDocument: string | null
      deviceInfo: string | null
      ipAddress: string | null
      createdAt: Date
    }, ExtArgs["result"]["log"]>
    composites: {}
  }

  type LogGetPayload<S extends boolean | null | undefined | LogDefaultArgs> = $Result.GetResult<Prisma.$LogPayload, S>

  type LogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LogCountAggregateInputType | true
    }

  export interface LogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Log'], meta: { name: 'Log' } }
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LogFindUniqueArgs>(args: SelectSubset<T, LogFindUniqueArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Log that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LogFindUniqueOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LogFindUniqueOrThrowArgs>(args: SelectSubset<T, LogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LogFindFirstArgs>(args?: SelectSubset<T, LogFindFirstArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstOrThrowArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LogFindFirstOrThrowArgs>(args?: SelectSubset<T, LogFindFirstOrThrowArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LogFindManyArgs>(args?: SelectSubset<T, LogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
     */
    create<T extends LogCreateArgs>(args: SelectSubset<T, LogCreateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Logs.
     * @param {LogCreateManyArgs} args - Arguments to create many Logs.
     * @example
     * // Create many Logs
     * const log = await prisma.log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LogCreateManyArgs>(args?: SelectSubset<T, LogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
     */
    delete<T extends LogDeleteArgs>(args: SelectSubset<T, LogDeleteArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LogUpdateArgs>(args: SelectSubset<T, LogUpdateArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LogDeleteManyArgs>(args?: SelectSubset<T, LogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LogUpdateManyArgs>(args: SelectSubset<T, LogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
     */
    upsert<T extends LogUpsertArgs>(args: SelectSubset<T, LogUpsertArgs<ExtArgs>>): Prisma__LogClient<$Result.GetResult<Prisma.$LogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): Prisma.PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Log model
   */
  readonly fields: LogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Log$userArgs<ExtArgs> = {}>(args?: Subset<T, Log$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    customer<T extends Log$customerArgs<ExtArgs> = {}>(args?: Subset<T, Log$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Log model
   */
  interface LogFieldRefs {
    readonly id: FieldRef<"Log", 'Int'>
    readonly entityName: FieldRef<"Log", 'String'>
    readonly entityId: FieldRef<"Log", 'String'>
    readonly action: FieldRef<"Log", 'String'>
    readonly message: FieldRef<"Log", 'String'>
    readonly userDocument: FieldRef<"Log", 'String'>
    readonly customerDocument: FieldRef<"Log", 'String'>
    readonly deviceInfo: FieldRef<"Log", 'String'>
    readonly ipAddress: FieldRef<"Log", 'String'>
    readonly createdAt: FieldRef<"Log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findUniqueOrThrow
   */
  export type LogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log findFirst
   */
  export type LogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findFirstOrThrow
   */
  export type LogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Log to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log findMany
   */
  export type LogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogOrderByWithRelationInput | LogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogScalarFieldEnum | LogScalarFieldEnum[]
  }

  /**
   * Log create
   */
  export type LogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to create a Log.
     */
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }

  /**
   * Log createMany
   */
  export type LogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogCreateManyInput | LogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Log update
   */
  export type LogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The data needed to update a Log.
     */
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to update.
     */
    limit?: number
  }

  /**
   * Log upsert
   */
  export type LogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * The filter to search for the Log to update in case it exists.
     */
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     */
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }

  /**
   * Log delete
   */
  export type LogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
    /**
     * Filter which Log to delete.
     */
    where: LogWhereUniqueInput
  }

  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogWhereInput
    /**
     * Limit how many Logs to delete.
     */
    limit?: number
  }

  /**
   * Log.user
   */
  export type Log$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Log.customer
   */
  export type Log$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * Log without action
   */
  export type LogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Log
     */
    select?: LogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Log
     */
    omit?: LogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LogInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    imageableId: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    imageableId: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    name: string | null
    altText: string | null
    url: string | null
    imageableId: number | null
    imageableType: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    name: string | null
    altText: string | null
    url: string | null
    imageableId: number | null
    imageableType: string | null
    isActive: boolean | null
    createdAt: Date | null
    createdBy: string | null
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    name: number
    altText: number
    url: number
    imageableId: number
    imageableType: number
    isActive: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    deletedAt: number
    deletedBy: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    imageableId?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    imageableId?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    name?: true
    altText?: true
    url?: true
    imageableId?: true
    imageableType?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    name?: true
    altText?: true
    url?: true
    imageableId?: true
    imageableType?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    name?: true
    altText?: true
    url?: true
    imageableId?: true
    imageableType?: true
    isActive?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    deletedAt?: true
    deletedBy?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    name: string
    altText: string
    url: string
    imageableId: number
    imageableType: string
    isActive: boolean
    createdAt: Date
    createdBy: string
    updatedAt: Date | null
    updatedBy: string | null
    deletedAt: Date | null
    deletedBy: string | null
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    altText?: boolean
    url?: boolean
    imageableId?: boolean
    imageableType?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }, ExtArgs["result"]["image"]>



  export type ImageSelectScalar = {
    id?: boolean
    name?: boolean
    altText?: boolean
    url?: boolean
    imageableId?: boolean
    imageableType?: boolean
    isActive?: boolean
    createdAt?: boolean
    createdBy?: boolean
    updatedAt?: boolean
    updatedBy?: boolean
    deletedAt?: boolean
    deletedBy?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "altText" | "url" | "imageableId" | "imageableType" | "isActive" | "createdAt" | "createdBy" | "updatedAt" | "updatedBy" | "deletedAt" | "deletedBy", ExtArgs["result"]["image"]>

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      altText: string
      url: string
      imageableId: number
      imageableType: string
      isActive: boolean
      createdAt: Date
      createdBy: string
      updatedAt: Date | null
      updatedBy: string | null
      deletedAt: Date | null
      deletedBy: string | null
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly name: FieldRef<"Image", 'String'>
    readonly altText: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
    readonly imageableId: FieldRef<"Image", 'Int'>
    readonly imageableType: FieldRef<"Image", 'String'>
    readonly isActive: FieldRef<"Image", 'Boolean'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly createdBy: FieldRef<"Image", 'String'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
    readonly updatedBy: FieldRef<"Image", 'String'>
    readonly deletedAt: FieldRef<"Image", 'DateTime'>
    readonly deletedBy: FieldRef<"Image", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RestaurantConfigScalarFieldEnum: {
    id: 'id',
    name: 'name',
    activeLogoId: 'activeLogoId',
    currency: 'currency',
    address: 'address',
    phone: 'phone',
    email: 'email',
    taxName: 'taxName',
    taxIncluded: 'taxIncluded',
    taxType: 'taxType',
    taxRate: 'taxRate',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type RestaurantConfigScalarFieldEnum = (typeof RestaurantConfigScalarFieldEnum)[keyof typeof RestaurantConfigScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    name: 'name',
    primaryColor: 'primaryColor',
    secondaryColor: 'secondaryColor',
    accentColor: 'accentColor',
    neutralColor: 'neutralColor',
    isSystem: 'isSystem',
    isPublic: 'isPublic',
    userDocumentCreator: 'userDocumentCreator',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const RestaurantZoneScalarFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type RestaurantZoneScalarFieldEnum = (typeof RestaurantZoneScalarFieldEnum)[keyof typeof RestaurantZoneScalarFieldEnum]


  export const TableStatusScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type TableStatusScalarFieldEnum = (typeof TableStatusScalarFieldEnum)[keyof typeof TableStatusScalarFieldEnum]


  export const TableScalarFieldEnum: {
    id: 'id',
    name: 'name',
    capacity: 'capacity',
    restaurantZoneName: 'restaurantZoneName',
    tableStatusCode: 'tableStatusCode',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type TableScalarFieldEnum = (typeof TableScalarFieldEnum)[keyof typeof TableScalarFieldEnum]


  export const CombineTableScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userDocumentCombiner: 'userDocumentCombiner',
    combinerAt: 'combinerAt',
    isActive: 'isActive',
    userDocumentReleaser: 'userDocumentReleaser',
    releasedAt: 'releasedAt',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type CombineTableScalarFieldEnum = (typeof CombineTableScalarFieldEnum)[keyof typeof CombineTableScalarFieldEnum]


  export const CombineTableItemScalarFieldEnum: {
    id: 'id',
    combineTableId: 'combineTableId',
    tableId: 'tableId',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type CombineTableItemScalarFieldEnum = (typeof CombineTableItemScalarFieldEnum)[keyof typeof CombineTableItemScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const ProductTypeScalarFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type ProductTypeScalarFieldEnum = (typeof ProductTypeScalarFieldEnum)[keyof typeof ProductTypeScalarFieldEnum]


  export const ProductCategoryScalarFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type ProductCategoryScalarFieldEnum = (typeof ProductCategoryScalarFieldEnum)[keyof typeof ProductCategoryScalarFieldEnum]


  export const ProductStatusScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ProductStatusScalarFieldEnum = (typeof ProductStatusScalarFieldEnum)[keyof typeof ProductStatusScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    offerPrice: 'offerPrice',
    productTypeName: 'productTypeName',
    productCategoryName: 'productCategoryName',
    brandName: 'brandName',
    productStatusCode: 'productStatusCode',
    mainImageId: 'mainImageId',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const DocumentTypeScalarFieldEnum: {
    name: 'name',
    description: 'description',
    digitLength: 'digitLength',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type DocumentTypeScalarFieldEnum = (typeof DocumentTypeScalarFieldEnum)[keyof typeof DocumentTypeScalarFieldEnum]


  export const AccountStatusScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type AccountStatusScalarFieldEnum = (typeof AccountStatusScalarFieldEnum)[keyof typeof AccountStatusScalarFieldEnum]


  export const PermissionCategoryScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type PermissionCategoryScalarFieldEnum = (typeof PermissionCategoryScalarFieldEnum)[keyof typeof PermissionCategoryScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    permissionCategoryCode: 'permissionCategoryCode',
    createdAt: 'createdAt',
    createdBy: 'createdBy'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    roleName: 'roleName',
    permissionCode: 'permissionCode',
    createdAt: 'createdAt',
    createdBy: 'createdBy'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    document: 'document',
    username: 'username',
    email: 'email',
    password: 'password',
    pin: 'pin',
    documentTypeName: 'documentTypeName',
    roleName: 'roleName',
    accountStatusCode: 'accountStatusCode',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userDocument: 'userDocument',
    fullName: 'fullName',
    phoneNumber: 'phoneNumber',
    birthDate: 'birthDate',
    hireDate: 'hireDate',
    salary: 'salary',
    emergencyContactName: 'emergencyContactName',
    emergencyContactPhone: 'emergencyContactPhone',
    themeName: 'themeName',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    document: 'document',
    username: 'username',
    email: 'email',
    password: 'password',
    documentTypeName: 'documentTypeName',
    accountStatusCode: 'accountStatusCode',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CustomerProfileScalarFieldEnum: {
    id: 'id',
    customerDocument: 'customerDocument',
    fullName: 'fullName',
    phoneNumber: 'phoneNumber',
    birthDate: 'birthDate',
    themeName: 'themeName',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type CustomerProfileScalarFieldEnum = (typeof CustomerProfileScalarFieldEnum)[keyof typeof CustomerProfileScalarFieldEnum]


  export const CommandStatusScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type CommandStatusScalarFieldEnum = (typeof CommandStatusScalarFieldEnum)[keyof typeof CommandStatusScalarFieldEnum]


  export const CommandScalarFieldEnum: {
    id: 'id',
    tableId: 'tableId',
    combineTableId: 'combineTableId',
    userDocumentOpener: 'userDocumentOpener',
    openedAt: 'openedAt',
    commandStatusCode: 'commandStatusCode',
    notes: 'notes',
    userDocumentCloser: 'userDocumentCloser',
    closedAt: 'closedAt',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type CommandScalarFieldEnum = (typeof CommandScalarFieldEnum)[keyof typeof CommandScalarFieldEnum]


  export const OrderStatusScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type OrderStatusScalarFieldEnum = (typeof OrderStatusScalarFieldEnum)[keyof typeof OrderStatusScalarFieldEnum]


  export const OrderItemStatusScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type OrderItemStatusScalarFieldEnum = (typeof OrderItemStatusScalarFieldEnum)[keyof typeof OrderItemStatusScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    code: 'code',
    commandId: 'commandId',
    userDocumentCreator: 'userDocumentCreator',
    createdAt: 'createdAt',
    customerDocument: 'customerDocument',
    subtotal: 'subtotal',
    discount: 'discount',
    taxAmount: 'taxAmount',
    totalAmount: 'totalAmount',
    orderStatusCode: 'orderStatusCode',
    userDocumentCloser: 'userDocumentCloser',
    closedAt: 'closedAt',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    commandId: 'commandId',
    orderCode: 'orderCode',
    productId: 'productId',
    orderItemStatusCode: 'orderItemStatusCode',
    quantity: 'quantity',
    specialInstructions: 'specialInstructions',
    unitPrice: 'unitPrice',
    discount: 'discount',
    totalPrice: 'totalPrice',
    notes: 'notes',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const CashBoxScalarFieldEnum: {
    id: 'id',
    userDocumentOpened: 'userDocumentOpened',
    openedAt: 'openedAt',
    initialAmount: 'initialAmount',
    userDocumentClosed: 'userDocumentClosed',
    closedAt: 'closedAt',
    finalAmount: 'finalAmount',
    totalSales: 'totalSales',
    notes: 'notes',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type CashBoxScalarFieldEnum = (typeof CashBoxScalarFieldEnum)[keyof typeof CashBoxScalarFieldEnum]


  export const CashBoxMovementTypeScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type CashBoxMovementTypeScalarFieldEnum = (typeof CashBoxMovementTypeScalarFieldEnum)[keyof typeof CashBoxMovementTypeScalarFieldEnum]


  export const CashBoxMovementScalarFieldEnum: {
    id: 'id',
    cashboxId: 'cashboxId',
    userDocument: 'userDocument',
    cashboxMovementTypeCode: 'cashboxMovementTypeCode',
    amount: 'amount',
    concept: 'concept',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type CashBoxMovementScalarFieldEnum = (typeof CashBoxMovementScalarFieldEnum)[keyof typeof CashBoxMovementScalarFieldEnum]


  export const PaymentMethodScalarFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type PaymentMethodScalarFieldEnum = (typeof PaymentMethodScalarFieldEnum)[keyof typeof PaymentMethodScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    orderCode: 'orderCode',
    cashBoxId: 'cashBoxId',
    paymentMethodName: 'paymentMethodName',
    totalAmount: 'totalAmount',
    receivedAmount: 'receivedAmount',
    changeAmount: 'changeAmount',
    transactionNumber: 'transactionNumber',
    notes: 'notes',
    userDocumentReceive: 'userDocumentReceive',
    customerDocumentPaid: 'customerDocumentPaid',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const InventoryMovementTypeScalarFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type InventoryMovementTypeScalarFieldEnum = (typeof InventoryMovementTypeScalarFieldEnum)[keyof typeof InventoryMovementTypeScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    currentQuantity: 'currentQuantity',
    minimumStock: 'minimumStock',
    storageLocation: 'storageLocation',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const InventoryMovementScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    inventoryMovementTypeCode: 'inventoryMovementTypeCode',
    quantityMovement: 'quantityMovement',
    reasonDescription: 'reasonDescription',
    userDocument: 'userDocument',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type InventoryMovementScalarFieldEnum = (typeof InventoryMovementScalarFieldEnum)[keyof typeof InventoryMovementScalarFieldEnum]


  export const OrderSequenceScalarFieldEnum: {
    id: 'id',
    sequenceYear: 'sequenceYear',
    sequenceMonth: 'sequenceMonth',
    sequenceDay: 'sequenceDay',
    lastOrderNumber: 'lastOrderNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderSequenceScalarFieldEnum = (typeof OrderSequenceScalarFieldEnum)[keyof typeof OrderSequenceScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userDocument: 'userDocument',
    customerDocument: 'customerDocument',
    token: 'token',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    closedAt: 'closedAt',
    closedBy: 'closedBy',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    entityName: 'entityName',
    entityId: 'entityId',
    action: 'action',
    message: 'message',
    userDocument: 'userDocument',
    customerDocument: 'customerDocument',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress',
    createdAt: 'createdAt'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    altText: 'altText',
    url: 'url',
    imageableId: 'imageableId',
    imageableType: 'imageableType',
    isActive: 'isActive',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy',
    deletedAt: 'deletedAt',
    deletedBy: 'deletedBy'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const RestaurantConfigOrderByRelevanceFieldEnum: {
    name: 'name',
    currency: 'currency',
    address: 'address',
    phone: 'phone',
    email: 'email',
    taxName: 'taxName',
    taxType: 'taxType',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type RestaurantConfigOrderByRelevanceFieldEnum = (typeof RestaurantConfigOrderByRelevanceFieldEnum)[keyof typeof RestaurantConfigOrderByRelevanceFieldEnum]


  export const ThemeOrderByRelevanceFieldEnum: {
    name: 'name',
    primaryColor: 'primaryColor',
    secondaryColor: 'secondaryColor',
    accentColor: 'accentColor',
    neutralColor: 'neutralColor',
    userDocumentCreator: 'userDocumentCreator',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type ThemeOrderByRelevanceFieldEnum = (typeof ThemeOrderByRelevanceFieldEnum)[keyof typeof ThemeOrderByRelevanceFieldEnum]


  export const RestaurantZoneOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type RestaurantZoneOrderByRelevanceFieldEnum = (typeof RestaurantZoneOrderByRelevanceFieldEnum)[keyof typeof RestaurantZoneOrderByRelevanceFieldEnum]


  export const TableStatusOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type TableStatusOrderByRelevanceFieldEnum = (typeof TableStatusOrderByRelevanceFieldEnum)[keyof typeof TableStatusOrderByRelevanceFieldEnum]


  export const TableOrderByRelevanceFieldEnum: {
    name: 'name',
    restaurantZoneName: 'restaurantZoneName',
    tableStatusCode: 'tableStatusCode',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type TableOrderByRelevanceFieldEnum = (typeof TableOrderByRelevanceFieldEnum)[keyof typeof TableOrderByRelevanceFieldEnum]


  export const CombineTableOrderByRelevanceFieldEnum: {
    name: 'name',
    userDocumentCombiner: 'userDocumentCombiner',
    userDocumentReleaser: 'userDocumentReleaser',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type CombineTableOrderByRelevanceFieldEnum = (typeof CombineTableOrderByRelevanceFieldEnum)[keyof typeof CombineTableOrderByRelevanceFieldEnum]


  export const CombineTableItemOrderByRelevanceFieldEnum: {
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type CombineTableItemOrderByRelevanceFieldEnum = (typeof CombineTableItemOrderByRelevanceFieldEnum)[keyof typeof CombineTableItemOrderByRelevanceFieldEnum]


  export const BrandOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type BrandOrderByRelevanceFieldEnum = (typeof BrandOrderByRelevanceFieldEnum)[keyof typeof BrandOrderByRelevanceFieldEnum]


  export const ProductTypeOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type ProductTypeOrderByRelevanceFieldEnum = (typeof ProductTypeOrderByRelevanceFieldEnum)[keyof typeof ProductTypeOrderByRelevanceFieldEnum]


  export const ProductCategoryOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type ProductCategoryOrderByRelevanceFieldEnum = (typeof ProductCategoryOrderByRelevanceFieldEnum)[keyof typeof ProductCategoryOrderByRelevanceFieldEnum]


  export const ProductStatusOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type ProductStatusOrderByRelevanceFieldEnum = (typeof ProductStatusOrderByRelevanceFieldEnum)[keyof typeof ProductStatusOrderByRelevanceFieldEnum]


  export const ProductOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    productTypeName: 'productTypeName',
    productCategoryName: 'productCategoryName',
    brandName: 'brandName',
    productStatusCode: 'productStatusCode',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type ProductOrderByRelevanceFieldEnum = (typeof ProductOrderByRelevanceFieldEnum)[keyof typeof ProductOrderByRelevanceFieldEnum]


  export const DocumentTypeOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type DocumentTypeOrderByRelevanceFieldEnum = (typeof DocumentTypeOrderByRelevanceFieldEnum)[keyof typeof DocumentTypeOrderByRelevanceFieldEnum]


  export const AccountStatusOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type AccountStatusOrderByRelevanceFieldEnum = (typeof AccountStatusOrderByRelevanceFieldEnum)[keyof typeof AccountStatusOrderByRelevanceFieldEnum]


  export const PermissionCategoryOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type PermissionCategoryOrderByRelevanceFieldEnum = (typeof PermissionCategoryOrderByRelevanceFieldEnum)[keyof typeof PermissionCategoryOrderByRelevanceFieldEnum]


  export const PermissionOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    permissionCategoryCode: 'permissionCategoryCode',
    createdBy: 'createdBy'
  };

  export type PermissionOrderByRelevanceFieldEnum = (typeof PermissionOrderByRelevanceFieldEnum)[keyof typeof PermissionOrderByRelevanceFieldEnum]


  export const RoleOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type RoleOrderByRelevanceFieldEnum = (typeof RoleOrderByRelevanceFieldEnum)[keyof typeof RoleOrderByRelevanceFieldEnum]


  export const RolePermissionOrderByRelevanceFieldEnum: {
    roleName: 'roleName',
    permissionCode: 'permissionCode',
    createdBy: 'createdBy'
  };

  export type RolePermissionOrderByRelevanceFieldEnum = (typeof RolePermissionOrderByRelevanceFieldEnum)[keyof typeof RolePermissionOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    document: 'document',
    username: 'username',
    email: 'email',
    password: 'password',
    pin: 'pin',
    documentTypeName: 'documentTypeName',
    roleName: 'roleName',
    accountStatusCode: 'accountStatusCode',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const userProfileOrderByRelevanceFieldEnum: {
    userDocument: 'userDocument',
    fullName: 'fullName',
    phoneNumber: 'phoneNumber',
    emergencyContactName: 'emergencyContactName',
    emergencyContactPhone: 'emergencyContactPhone',
    themeName: 'themeName',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type userProfileOrderByRelevanceFieldEnum = (typeof userProfileOrderByRelevanceFieldEnum)[keyof typeof userProfileOrderByRelevanceFieldEnum]


  export const CustomerOrderByRelevanceFieldEnum: {
    document: 'document',
    username: 'username',
    email: 'email',
    password: 'password',
    documentTypeName: 'documentTypeName',
    accountStatusCode: 'accountStatusCode',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type CustomerOrderByRelevanceFieldEnum = (typeof CustomerOrderByRelevanceFieldEnum)[keyof typeof CustomerOrderByRelevanceFieldEnum]


  export const CustomerProfileOrderByRelevanceFieldEnum: {
    customerDocument: 'customerDocument',
    fullName: 'fullName',
    phoneNumber: 'phoneNumber',
    themeName: 'themeName',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type CustomerProfileOrderByRelevanceFieldEnum = (typeof CustomerProfileOrderByRelevanceFieldEnum)[keyof typeof CustomerProfileOrderByRelevanceFieldEnum]


  export const CommandStatusOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type CommandStatusOrderByRelevanceFieldEnum = (typeof CommandStatusOrderByRelevanceFieldEnum)[keyof typeof CommandStatusOrderByRelevanceFieldEnum]


  export const CommandOrderByRelevanceFieldEnum: {
    userDocumentOpener: 'userDocumentOpener',
    commandStatusCode: 'commandStatusCode',
    notes: 'notes',
    userDocumentCloser: 'userDocumentCloser',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type CommandOrderByRelevanceFieldEnum = (typeof CommandOrderByRelevanceFieldEnum)[keyof typeof CommandOrderByRelevanceFieldEnum]


  export const OrderStatusOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type OrderStatusOrderByRelevanceFieldEnum = (typeof OrderStatusOrderByRelevanceFieldEnum)[keyof typeof OrderStatusOrderByRelevanceFieldEnum]


  export const OrderItemStatusOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type OrderItemStatusOrderByRelevanceFieldEnum = (typeof OrderItemStatusOrderByRelevanceFieldEnum)[keyof typeof OrderItemStatusOrderByRelevanceFieldEnum]


  export const OrderOrderByRelevanceFieldEnum: {
    code: 'code',
    userDocumentCreator: 'userDocumentCreator',
    customerDocument: 'customerDocument',
    orderStatusCode: 'orderStatusCode',
    userDocumentCloser: 'userDocumentCloser',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type OrderOrderByRelevanceFieldEnum = (typeof OrderOrderByRelevanceFieldEnum)[keyof typeof OrderOrderByRelevanceFieldEnum]


  export const OrderItemOrderByRelevanceFieldEnum: {
    orderCode: 'orderCode',
    orderItemStatusCode: 'orderItemStatusCode',
    specialInstructions: 'specialInstructions',
    notes: 'notes',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type OrderItemOrderByRelevanceFieldEnum = (typeof OrderItemOrderByRelevanceFieldEnum)[keyof typeof OrderItemOrderByRelevanceFieldEnum]


  export const CashBoxOrderByRelevanceFieldEnum: {
    userDocumentOpened: 'userDocumentOpened',
    userDocumentClosed: 'userDocumentClosed',
    notes: 'notes',
    updatedBy: 'updatedBy'
  };

  export type CashBoxOrderByRelevanceFieldEnum = (typeof CashBoxOrderByRelevanceFieldEnum)[keyof typeof CashBoxOrderByRelevanceFieldEnum]


  export const CashBoxMovementTypeOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type CashBoxMovementTypeOrderByRelevanceFieldEnum = (typeof CashBoxMovementTypeOrderByRelevanceFieldEnum)[keyof typeof CashBoxMovementTypeOrderByRelevanceFieldEnum]


  export const CashBoxMovementOrderByRelevanceFieldEnum: {
    userDocument: 'userDocument',
    cashboxMovementTypeCode: 'cashboxMovementTypeCode',
    concept: 'concept',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type CashBoxMovementOrderByRelevanceFieldEnum = (typeof CashBoxMovementOrderByRelevanceFieldEnum)[keyof typeof CashBoxMovementOrderByRelevanceFieldEnum]


  export const PaymentMethodOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type PaymentMethodOrderByRelevanceFieldEnum = (typeof PaymentMethodOrderByRelevanceFieldEnum)[keyof typeof PaymentMethodOrderByRelevanceFieldEnum]


  export const PaymentOrderByRelevanceFieldEnum: {
    orderCode: 'orderCode',
    paymentMethodName: 'paymentMethodName',
    transactionNumber: 'transactionNumber',
    notes: 'notes',
    userDocumentReceive: 'userDocumentReceive',
    customerDocumentPaid: 'customerDocumentPaid',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type PaymentOrderByRelevanceFieldEnum = (typeof PaymentOrderByRelevanceFieldEnum)[keyof typeof PaymentOrderByRelevanceFieldEnum]


  export const InventoryMovementTypeOrderByRelevanceFieldEnum: {
    code: 'code',
    name: 'name',
    description: 'description',
    color: 'color',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type InventoryMovementTypeOrderByRelevanceFieldEnum = (typeof InventoryMovementTypeOrderByRelevanceFieldEnum)[keyof typeof InventoryMovementTypeOrderByRelevanceFieldEnum]


  export const InventoryOrderByRelevanceFieldEnum: {
    storageLocation: 'storageLocation',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type InventoryOrderByRelevanceFieldEnum = (typeof InventoryOrderByRelevanceFieldEnum)[keyof typeof InventoryOrderByRelevanceFieldEnum]


  export const InventoryMovementOrderByRelevanceFieldEnum: {
    inventoryMovementTypeCode: 'inventoryMovementTypeCode',
    reasonDescription: 'reasonDescription',
    userDocument: 'userDocument',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type InventoryMovementOrderByRelevanceFieldEnum = (typeof InventoryMovementOrderByRelevanceFieldEnum)[keyof typeof InventoryMovementOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    userDocument: 'userDocument',
    customerDocument: 'customerDocument',
    token: 'token',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress',
    closedBy: 'closedBy',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const LogOrderByRelevanceFieldEnum: {
    entityName: 'entityName',
    entityId: 'entityId',
    action: 'action',
    message: 'message',
    userDocument: 'userDocument',
    customerDocument: 'customerDocument',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress'
  };

  export type LogOrderByRelevanceFieldEnum = (typeof LogOrderByRelevanceFieldEnum)[keyof typeof LogOrderByRelevanceFieldEnum]


  export const ImageOrderByRelevanceFieldEnum: {
    name: 'name',
    altText: 'altText',
    url: 'url',
    imageableType: 'imageableType',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    deletedBy: 'deletedBy'
  };

  export type ImageOrderByRelevanceFieldEnum = (typeof ImageOrderByRelevanceFieldEnum)[keyof typeof ImageOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type RestaurantConfigWhereInput = {
    AND?: RestaurantConfigWhereInput | RestaurantConfigWhereInput[]
    OR?: RestaurantConfigWhereInput[]
    NOT?: RestaurantConfigWhereInput | RestaurantConfigWhereInput[]
    id?: IntFilter<"RestaurantConfig"> | number
    name?: StringFilter<"RestaurantConfig"> | string
    activeLogoId?: IntNullableFilter<"RestaurantConfig"> | number | null
    currency?: StringFilter<"RestaurantConfig"> | string
    address?: StringNullableFilter<"RestaurantConfig"> | string | null
    phone?: StringNullableFilter<"RestaurantConfig"> | string | null
    email?: StringNullableFilter<"RestaurantConfig"> | string | null
    taxName?: StringNullableFilter<"RestaurantConfig"> | string | null
    taxIncluded?: BoolFilter<"RestaurantConfig"> | boolean
    taxType?: StringNullableFilter<"RestaurantConfig"> | string | null
    taxRate?: DecimalNullableFilter<"RestaurantConfig"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"RestaurantConfig"> | Date | string
    createdBy?: StringFilter<"RestaurantConfig"> | string
    updatedAt?: DateTimeNullableFilter<"RestaurantConfig"> | Date | string | null
    updatedBy?: StringNullableFilter<"RestaurantConfig"> | string | null
  }

  export type RestaurantConfigOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    activeLogoId?: SortOrderInput | SortOrder
    currency?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    taxName?: SortOrderInput | SortOrder
    taxIncluded?: SortOrder
    taxType?: SortOrderInput | SortOrder
    taxRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _relevance?: RestaurantConfigOrderByRelevanceInput
  }

  export type RestaurantConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RestaurantConfigWhereInput | RestaurantConfigWhereInput[]
    OR?: RestaurantConfigWhereInput[]
    NOT?: RestaurantConfigWhereInput | RestaurantConfigWhereInput[]
    name?: StringFilter<"RestaurantConfig"> | string
    activeLogoId?: IntNullableFilter<"RestaurantConfig"> | number | null
    currency?: StringFilter<"RestaurantConfig"> | string
    address?: StringNullableFilter<"RestaurantConfig"> | string | null
    phone?: StringNullableFilter<"RestaurantConfig"> | string | null
    email?: StringNullableFilter<"RestaurantConfig"> | string | null
    taxName?: StringNullableFilter<"RestaurantConfig"> | string | null
    taxIncluded?: BoolFilter<"RestaurantConfig"> | boolean
    taxType?: StringNullableFilter<"RestaurantConfig"> | string | null
    taxRate?: DecimalNullableFilter<"RestaurantConfig"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"RestaurantConfig"> | Date | string
    createdBy?: StringFilter<"RestaurantConfig"> | string
    updatedAt?: DateTimeNullableFilter<"RestaurantConfig"> | Date | string | null
    updatedBy?: StringNullableFilter<"RestaurantConfig"> | string | null
  }, "id">

  export type RestaurantConfigOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    activeLogoId?: SortOrderInput | SortOrder
    currency?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    taxName?: SortOrderInput | SortOrder
    taxIncluded?: SortOrder
    taxType?: SortOrderInput | SortOrder
    taxRate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: RestaurantConfigCountOrderByAggregateInput
    _avg?: RestaurantConfigAvgOrderByAggregateInput
    _max?: RestaurantConfigMaxOrderByAggregateInput
    _min?: RestaurantConfigMinOrderByAggregateInput
    _sum?: RestaurantConfigSumOrderByAggregateInput
  }

  export type RestaurantConfigScalarWhereWithAggregatesInput = {
    AND?: RestaurantConfigScalarWhereWithAggregatesInput | RestaurantConfigScalarWhereWithAggregatesInput[]
    OR?: RestaurantConfigScalarWhereWithAggregatesInput[]
    NOT?: RestaurantConfigScalarWhereWithAggregatesInput | RestaurantConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RestaurantConfig"> | number
    name?: StringWithAggregatesFilter<"RestaurantConfig"> | string
    activeLogoId?: IntNullableWithAggregatesFilter<"RestaurantConfig"> | number | null
    currency?: StringWithAggregatesFilter<"RestaurantConfig"> | string
    address?: StringNullableWithAggregatesFilter<"RestaurantConfig"> | string | null
    phone?: StringNullableWithAggregatesFilter<"RestaurantConfig"> | string | null
    email?: StringNullableWithAggregatesFilter<"RestaurantConfig"> | string | null
    taxName?: StringNullableWithAggregatesFilter<"RestaurantConfig"> | string | null
    taxIncluded?: BoolWithAggregatesFilter<"RestaurantConfig"> | boolean
    taxType?: StringNullableWithAggregatesFilter<"RestaurantConfig"> | string | null
    taxRate?: DecimalNullableWithAggregatesFilter<"RestaurantConfig"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RestaurantConfig"> | Date | string
    createdBy?: StringWithAggregatesFilter<"RestaurantConfig"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"RestaurantConfig"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"RestaurantConfig"> | string | null
  }

  export type ThemeWhereInput = {
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    name?: StringFilter<"Theme"> | string
    primaryColor?: StringFilter<"Theme"> | string
    secondaryColor?: StringFilter<"Theme"> | string
    accentColor?: StringFilter<"Theme"> | string
    neutralColor?: StringFilter<"Theme"> | string
    isSystem?: BoolFilter<"Theme"> | boolean
    isPublic?: BoolFilter<"Theme"> | boolean
    userDocumentCreator?: StringNullableFilter<"Theme"> | string | null
    createdAt?: DateTimeFilter<"Theme"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Theme"> | Date | string | null
    updatedBy?: StringNullableFilter<"Theme"> | string | null
    deletedAt?: DateTimeNullableFilter<"Theme"> | Date | string | null
    deletedBy?: StringNullableFilter<"Theme"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    usersUsingThisTheme?: UserProfileListRelationFilter
    customersUsingThisTheme?: CustomerProfileListRelationFilter
  }

  export type ThemeOrderByWithRelationInput = {
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    accentColor?: SortOrder
    neutralColor?: SortOrder
    isSystem?: SortOrder
    isPublic?: SortOrder
    userDocumentCreator?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    usersUsingThisTheme?: userProfileOrderByRelationAggregateInput
    customersUsingThisTheme?: CustomerProfileOrderByRelationAggregateInput
    _relevance?: ThemeOrderByRelevanceInput
  }

  export type ThemeWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    primaryColor?: StringFilter<"Theme"> | string
    secondaryColor?: StringFilter<"Theme"> | string
    accentColor?: StringFilter<"Theme"> | string
    neutralColor?: StringFilter<"Theme"> | string
    isSystem?: BoolFilter<"Theme"> | boolean
    isPublic?: BoolFilter<"Theme"> | boolean
    userDocumentCreator?: StringNullableFilter<"Theme"> | string | null
    createdAt?: DateTimeFilter<"Theme"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Theme"> | Date | string | null
    updatedBy?: StringNullableFilter<"Theme"> | string | null
    deletedAt?: DateTimeNullableFilter<"Theme"> | Date | string | null
    deletedBy?: StringNullableFilter<"Theme"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    usersUsingThisTheme?: UserProfileListRelationFilter
    customersUsingThisTheme?: CustomerProfileListRelationFilter
  }, "name">

  export type ThemeOrderByWithAggregationInput = {
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    accentColor?: SortOrder
    neutralColor?: SortOrder
    isSystem?: SortOrder
    isPublic?: SortOrder
    userDocumentCreator?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: ThemeCountOrderByAggregateInput
    _max?: ThemeMaxOrderByAggregateInput
    _min?: ThemeMinOrderByAggregateInput
  }

  export type ThemeScalarWhereWithAggregatesInput = {
    AND?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    OR?: ThemeScalarWhereWithAggregatesInput[]
    NOT?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Theme"> | string
    primaryColor?: StringWithAggregatesFilter<"Theme"> | string
    secondaryColor?: StringWithAggregatesFilter<"Theme"> | string
    accentColor?: StringWithAggregatesFilter<"Theme"> | string
    neutralColor?: StringWithAggregatesFilter<"Theme"> | string
    isSystem?: BoolWithAggregatesFilter<"Theme"> | boolean
    isPublic?: BoolWithAggregatesFilter<"Theme"> | boolean
    userDocumentCreator?: StringNullableWithAggregatesFilter<"Theme"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Theme"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Theme"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Theme"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Theme"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Theme"> | string | null
  }

  export type RestaurantZoneWhereInput = {
    AND?: RestaurantZoneWhereInput | RestaurantZoneWhereInput[]
    OR?: RestaurantZoneWhereInput[]
    NOT?: RestaurantZoneWhereInput | RestaurantZoneWhereInput[]
    name?: StringFilter<"RestaurantZone"> | string
    description?: StringNullableFilter<"RestaurantZone"> | string | null
    color?: StringNullableFilter<"RestaurantZone"> | string | null
    isActive?: BoolFilter<"RestaurantZone"> | boolean
    createdAt?: DateTimeFilter<"RestaurantZone"> | Date | string
    createdBy?: StringFilter<"RestaurantZone"> | string
    updatedAt?: DateTimeNullableFilter<"RestaurantZone"> | Date | string | null
    updatedBy?: StringNullableFilter<"RestaurantZone"> | string | null
    deletedAt?: DateTimeNullableFilter<"RestaurantZone"> | Date | string | null
    deletedBy?: StringNullableFilter<"RestaurantZone"> | string | null
    tables?: TableListRelationFilter
  }

  export type RestaurantZoneOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    tables?: TableOrderByRelationAggregateInput
    _relevance?: RestaurantZoneOrderByRelevanceInput
  }

  export type RestaurantZoneWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: RestaurantZoneWhereInput | RestaurantZoneWhereInput[]
    OR?: RestaurantZoneWhereInput[]
    NOT?: RestaurantZoneWhereInput | RestaurantZoneWhereInput[]
    description?: StringNullableFilter<"RestaurantZone"> | string | null
    color?: StringNullableFilter<"RestaurantZone"> | string | null
    isActive?: BoolFilter<"RestaurantZone"> | boolean
    createdAt?: DateTimeFilter<"RestaurantZone"> | Date | string
    createdBy?: StringFilter<"RestaurantZone"> | string
    updatedAt?: DateTimeNullableFilter<"RestaurantZone"> | Date | string | null
    updatedBy?: StringNullableFilter<"RestaurantZone"> | string | null
    deletedAt?: DateTimeNullableFilter<"RestaurantZone"> | Date | string | null
    deletedBy?: StringNullableFilter<"RestaurantZone"> | string | null
    tables?: TableListRelationFilter
  }, "name">

  export type RestaurantZoneOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: RestaurantZoneCountOrderByAggregateInput
    _max?: RestaurantZoneMaxOrderByAggregateInput
    _min?: RestaurantZoneMinOrderByAggregateInput
  }

  export type RestaurantZoneScalarWhereWithAggregatesInput = {
    AND?: RestaurantZoneScalarWhereWithAggregatesInput | RestaurantZoneScalarWhereWithAggregatesInput[]
    OR?: RestaurantZoneScalarWhereWithAggregatesInput[]
    NOT?: RestaurantZoneScalarWhereWithAggregatesInput | RestaurantZoneScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"RestaurantZone"> | string
    description?: StringNullableWithAggregatesFilter<"RestaurantZone"> | string | null
    color?: StringNullableWithAggregatesFilter<"RestaurantZone"> | string | null
    isActive?: BoolWithAggregatesFilter<"RestaurantZone"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RestaurantZone"> | Date | string
    createdBy?: StringWithAggregatesFilter<"RestaurantZone"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"RestaurantZone"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"RestaurantZone"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"RestaurantZone"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"RestaurantZone"> | string | null
  }

  export type TableStatusWhereInput = {
    AND?: TableStatusWhereInput | TableStatusWhereInput[]
    OR?: TableStatusWhereInput[]
    NOT?: TableStatusWhereInput | TableStatusWhereInput[]
    code?: StringFilter<"TableStatus"> | string
    name?: StringFilter<"TableStatus"> | string
    description?: StringNullableFilter<"TableStatus"> | string | null
    color?: StringNullableFilter<"TableStatus"> | string | null
    createdAt?: DateTimeFilter<"TableStatus"> | Date | string
    createdBy?: StringFilter<"TableStatus"> | string
    updatedAt?: DateTimeNullableFilter<"TableStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"TableStatus"> | string | null
    tables?: TableListRelationFilter
  }

  export type TableStatusOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    tables?: TableOrderByRelationAggregateInput
    _relevance?: TableStatusOrderByRelevanceInput
  }

  export type TableStatusWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: TableStatusWhereInput | TableStatusWhereInput[]
    OR?: TableStatusWhereInput[]
    NOT?: TableStatusWhereInput | TableStatusWhereInput[]
    description?: StringNullableFilter<"TableStatus"> | string | null
    color?: StringNullableFilter<"TableStatus"> | string | null
    createdAt?: DateTimeFilter<"TableStatus"> | Date | string
    createdBy?: StringFilter<"TableStatus"> | string
    updatedAt?: DateTimeNullableFilter<"TableStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"TableStatus"> | string | null
    tables?: TableListRelationFilter
  }, "code" | "name">

  export type TableStatusOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: TableStatusCountOrderByAggregateInput
    _max?: TableStatusMaxOrderByAggregateInput
    _min?: TableStatusMinOrderByAggregateInput
  }

  export type TableStatusScalarWhereWithAggregatesInput = {
    AND?: TableStatusScalarWhereWithAggregatesInput | TableStatusScalarWhereWithAggregatesInput[]
    OR?: TableStatusScalarWhereWithAggregatesInput[]
    NOT?: TableStatusScalarWhereWithAggregatesInput | TableStatusScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"TableStatus"> | string
    name?: StringWithAggregatesFilter<"TableStatus"> | string
    description?: StringNullableWithAggregatesFilter<"TableStatus"> | string | null
    color?: StringNullableWithAggregatesFilter<"TableStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TableStatus"> | Date | string
    createdBy?: StringWithAggregatesFilter<"TableStatus"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"TableStatus"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"TableStatus"> | string | null
  }

  export type TableWhereInput = {
    AND?: TableWhereInput | TableWhereInput[]
    OR?: TableWhereInput[]
    NOT?: TableWhereInput | TableWhereInput[]
    id?: IntFilter<"Table"> | number
    name?: StringFilter<"Table"> | string
    capacity?: IntFilter<"Table"> | number
    restaurantZoneName?: StringNullableFilter<"Table"> | string | null
    tableStatusCode?: StringFilter<"Table"> | string
    createdAt?: DateTimeFilter<"Table"> | Date | string
    createdBy?: StringFilter<"Table"> | string
    updatedAt?: DateTimeNullableFilter<"Table"> | Date | string | null
    updatedBy?: StringNullableFilter<"Table"> | string | null
    deletedAt?: DateTimeNullableFilter<"Table"> | Date | string | null
    deletedBy?: StringNullableFilter<"Table"> | string | null
    restaurantZone?: XOR<RestaurantZoneNullableScalarRelationFilter, RestaurantZoneWhereInput> | null
    tableStatus?: XOR<TableStatusScalarRelationFilter, TableStatusWhereInput>
    combineTableItems?: CombineTableItemListRelationFilter
    commands?: CommandListRelationFilter
  }

  export type TableOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    restaurantZoneName?: SortOrderInput | SortOrder
    tableStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    restaurantZone?: RestaurantZoneOrderByWithRelationInput
    tableStatus?: TableStatusOrderByWithRelationInput
    combineTableItems?: CombineTableItemOrderByRelationAggregateInput
    commands?: CommandOrderByRelationAggregateInput
    _relevance?: TableOrderByRelevanceInput
  }

  export type TableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TableWhereInput | TableWhereInput[]
    OR?: TableWhereInput[]
    NOT?: TableWhereInput | TableWhereInput[]
    capacity?: IntFilter<"Table"> | number
    restaurantZoneName?: StringNullableFilter<"Table"> | string | null
    tableStatusCode?: StringFilter<"Table"> | string
    createdAt?: DateTimeFilter<"Table"> | Date | string
    createdBy?: StringFilter<"Table"> | string
    updatedAt?: DateTimeNullableFilter<"Table"> | Date | string | null
    updatedBy?: StringNullableFilter<"Table"> | string | null
    deletedAt?: DateTimeNullableFilter<"Table"> | Date | string | null
    deletedBy?: StringNullableFilter<"Table"> | string | null
    restaurantZone?: XOR<RestaurantZoneNullableScalarRelationFilter, RestaurantZoneWhereInput> | null
    tableStatus?: XOR<TableStatusScalarRelationFilter, TableStatusWhereInput>
    combineTableItems?: CombineTableItemListRelationFilter
    commands?: CommandListRelationFilter
  }, "id" | "name">

  export type TableOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    restaurantZoneName?: SortOrderInput | SortOrder
    tableStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: TableCountOrderByAggregateInput
    _avg?: TableAvgOrderByAggregateInput
    _max?: TableMaxOrderByAggregateInput
    _min?: TableMinOrderByAggregateInput
    _sum?: TableSumOrderByAggregateInput
  }

  export type TableScalarWhereWithAggregatesInput = {
    AND?: TableScalarWhereWithAggregatesInput | TableScalarWhereWithAggregatesInput[]
    OR?: TableScalarWhereWithAggregatesInput[]
    NOT?: TableScalarWhereWithAggregatesInput | TableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Table"> | number
    name?: StringWithAggregatesFilter<"Table"> | string
    capacity?: IntWithAggregatesFilter<"Table"> | number
    restaurantZoneName?: StringNullableWithAggregatesFilter<"Table"> | string | null
    tableStatusCode?: StringWithAggregatesFilter<"Table"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Table"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Table"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Table"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Table"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Table"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Table"> | string | null
  }

  export type CombineTableWhereInput = {
    AND?: CombineTableWhereInput | CombineTableWhereInput[]
    OR?: CombineTableWhereInput[]
    NOT?: CombineTableWhereInput | CombineTableWhereInput[]
    id?: IntFilter<"CombineTable"> | number
    name?: StringFilter<"CombineTable"> | string
    userDocumentCombiner?: StringFilter<"CombineTable"> | string
    combinerAt?: DateTimeFilter<"CombineTable"> | Date | string
    isActive?: BoolFilter<"CombineTable"> | boolean
    userDocumentReleaser?: StringNullableFilter<"CombineTable"> | string | null
    releasedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    updatedBy?: StringNullableFilter<"CombineTable"> | string | null
    deletedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    deletedBy?: StringNullableFilter<"CombineTable"> | string | null
    combiner?: XOR<UserScalarRelationFilter, UserWhereInput>
    releaser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tables?: CombineTableItemListRelationFilter
    commands?: CommandListRelationFilter
  }

  export type CombineTableOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userDocumentCombiner?: SortOrder
    combinerAt?: SortOrder
    isActive?: SortOrder
    userDocumentReleaser?: SortOrderInput | SortOrder
    releasedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    combiner?: UserOrderByWithRelationInput
    releaser?: UserOrderByWithRelationInput
    tables?: CombineTableItemOrderByRelationAggregateInput
    commands?: CommandOrderByRelationAggregateInput
    _relevance?: CombineTableOrderByRelevanceInput
  }

  export type CombineTableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CombineTableWhereInput | CombineTableWhereInput[]
    OR?: CombineTableWhereInput[]
    NOT?: CombineTableWhereInput | CombineTableWhereInput[]
    name?: StringFilter<"CombineTable"> | string
    userDocumentCombiner?: StringFilter<"CombineTable"> | string
    combinerAt?: DateTimeFilter<"CombineTable"> | Date | string
    isActive?: BoolFilter<"CombineTable"> | boolean
    userDocumentReleaser?: StringNullableFilter<"CombineTable"> | string | null
    releasedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    updatedBy?: StringNullableFilter<"CombineTable"> | string | null
    deletedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    deletedBy?: StringNullableFilter<"CombineTable"> | string | null
    combiner?: XOR<UserScalarRelationFilter, UserWhereInput>
    releaser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    tables?: CombineTableItemListRelationFilter
    commands?: CommandListRelationFilter
  }, "id">

  export type CombineTableOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userDocumentCombiner?: SortOrder
    combinerAt?: SortOrder
    isActive?: SortOrder
    userDocumentReleaser?: SortOrderInput | SortOrder
    releasedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: CombineTableCountOrderByAggregateInput
    _avg?: CombineTableAvgOrderByAggregateInput
    _max?: CombineTableMaxOrderByAggregateInput
    _min?: CombineTableMinOrderByAggregateInput
    _sum?: CombineTableSumOrderByAggregateInput
  }

  export type CombineTableScalarWhereWithAggregatesInput = {
    AND?: CombineTableScalarWhereWithAggregatesInput | CombineTableScalarWhereWithAggregatesInput[]
    OR?: CombineTableScalarWhereWithAggregatesInput[]
    NOT?: CombineTableScalarWhereWithAggregatesInput | CombineTableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CombineTable"> | number
    name?: StringWithAggregatesFilter<"CombineTable"> | string
    userDocumentCombiner?: StringWithAggregatesFilter<"CombineTable"> | string
    combinerAt?: DateTimeWithAggregatesFilter<"CombineTable"> | Date | string
    isActive?: BoolWithAggregatesFilter<"CombineTable"> | boolean
    userDocumentReleaser?: StringNullableWithAggregatesFilter<"CombineTable"> | string | null
    releasedAt?: DateTimeNullableWithAggregatesFilter<"CombineTable"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CombineTable"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CombineTable"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"CombineTable"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"CombineTable"> | string | null
  }

  export type CombineTableItemWhereInput = {
    AND?: CombineTableItemWhereInput | CombineTableItemWhereInput[]
    OR?: CombineTableItemWhereInput[]
    NOT?: CombineTableItemWhereInput | CombineTableItemWhereInput[]
    id?: IntFilter<"CombineTableItem"> | number
    combineTableId?: IntFilter<"CombineTableItem"> | number
    tableId?: IntFilter<"CombineTableItem"> | number
    createdAt?: DateTimeFilter<"CombineTableItem"> | Date | string
    createdBy?: StringFilter<"CombineTableItem"> | string
    updatedAt?: DateTimeNullableFilter<"CombineTableItem"> | Date | string | null
    updatedBy?: StringNullableFilter<"CombineTableItem"> | string | null
    deletedAt?: DateTimeNullableFilter<"CombineTableItem"> | Date | string | null
    deletedBy?: StringNullableFilter<"CombineTableItem"> | string | null
    combineTable?: XOR<CombineTableScalarRelationFilter, CombineTableWhereInput>
    table?: XOR<TableScalarRelationFilter, TableWhereInput>
  }

  export type CombineTableItemOrderByWithRelationInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    combineTable?: CombineTableOrderByWithRelationInput
    table?: TableOrderByWithRelationInput
    _relevance?: CombineTableItemOrderByRelevanceInput
  }

  export type CombineTableItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    combineTableId_tableId?: CombineTableItemCombineTableIdTableIdCompoundUniqueInput
    AND?: CombineTableItemWhereInput | CombineTableItemWhereInput[]
    OR?: CombineTableItemWhereInput[]
    NOT?: CombineTableItemWhereInput | CombineTableItemWhereInput[]
    combineTableId?: IntFilter<"CombineTableItem"> | number
    tableId?: IntFilter<"CombineTableItem"> | number
    createdAt?: DateTimeFilter<"CombineTableItem"> | Date | string
    createdBy?: StringFilter<"CombineTableItem"> | string
    updatedAt?: DateTimeNullableFilter<"CombineTableItem"> | Date | string | null
    updatedBy?: StringNullableFilter<"CombineTableItem"> | string | null
    deletedAt?: DateTimeNullableFilter<"CombineTableItem"> | Date | string | null
    deletedBy?: StringNullableFilter<"CombineTableItem"> | string | null
    combineTable?: XOR<CombineTableScalarRelationFilter, CombineTableWhereInput>
    table?: XOR<TableScalarRelationFilter, TableWhereInput>
  }, "id" | "combineTableId_tableId">

  export type CombineTableItemOrderByWithAggregationInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: CombineTableItemCountOrderByAggregateInput
    _avg?: CombineTableItemAvgOrderByAggregateInput
    _max?: CombineTableItemMaxOrderByAggregateInput
    _min?: CombineTableItemMinOrderByAggregateInput
    _sum?: CombineTableItemSumOrderByAggregateInput
  }

  export type CombineTableItemScalarWhereWithAggregatesInput = {
    AND?: CombineTableItemScalarWhereWithAggregatesInput | CombineTableItemScalarWhereWithAggregatesInput[]
    OR?: CombineTableItemScalarWhereWithAggregatesInput[]
    NOT?: CombineTableItemScalarWhereWithAggregatesInput | CombineTableItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CombineTableItem"> | number
    combineTableId?: IntWithAggregatesFilter<"CombineTableItem"> | number
    tableId?: IntWithAggregatesFilter<"CombineTableItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CombineTableItem"> | Date | string
    createdBy?: StringWithAggregatesFilter<"CombineTableItem"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CombineTableItem"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CombineTableItem"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"CombineTableItem"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"CombineTableItem"> | string | null
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    name?: StringFilter<"Brand"> | string
    description?: StringNullableFilter<"Brand"> | string | null
    color?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    createdBy?: StringFilter<"Brand"> | string
    updatedAt?: DateTimeNullableFilter<"Brand"> | Date | string | null
    updatedBy?: StringNullableFilter<"Brand"> | string | null
    deletedAt?: DateTimeNullableFilter<"Brand"> | Date | string | null
    deletedBy?: StringNullableFilter<"Brand"> | string | null
    products?: ProductListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    products?: ProductOrderByRelationAggregateInput
    _relevance?: BrandOrderByRelevanceInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    description?: StringNullableFilter<"Brand"> | string | null
    color?: StringNullableFilter<"Brand"> | string | null
    isActive?: BoolFilter<"Brand"> | boolean
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    createdBy?: StringFilter<"Brand"> | string
    updatedAt?: DateTimeNullableFilter<"Brand"> | Date | string | null
    updatedBy?: StringNullableFilter<"Brand"> | string | null
    deletedAt?: DateTimeNullableFilter<"Brand"> | Date | string | null
    deletedBy?: StringNullableFilter<"Brand"> | string | null
    products?: ProductListRelationFilter
  }, "name">

  export type BrandOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Brand"> | string
    description?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    color?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    isActive?: BoolWithAggregatesFilter<"Brand"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Brand"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Brand"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Brand"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Brand"> | string | null
  }

  export type ProductTypeWhereInput = {
    AND?: ProductTypeWhereInput | ProductTypeWhereInput[]
    OR?: ProductTypeWhereInput[]
    NOT?: ProductTypeWhereInput | ProductTypeWhereInput[]
    name?: StringFilter<"ProductType"> | string
    description?: StringNullableFilter<"ProductType"> | string | null
    color?: StringNullableFilter<"ProductType"> | string | null
    isActive?: BoolFilter<"ProductType"> | boolean
    createdAt?: DateTimeFilter<"ProductType"> | Date | string
    createdBy?: StringFilter<"ProductType"> | string
    updatedAt?: DateTimeNullableFilter<"ProductType"> | Date | string | null
    updatedBy?: StringNullableFilter<"ProductType"> | string | null
    deletedAt?: DateTimeNullableFilter<"ProductType"> | Date | string | null
    deletedBy?: StringNullableFilter<"ProductType"> | string | null
    products?: ProductListRelationFilter
  }

  export type ProductTypeOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    products?: ProductOrderByRelationAggregateInput
    _relevance?: ProductTypeOrderByRelevanceInput
  }

  export type ProductTypeWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: ProductTypeWhereInput | ProductTypeWhereInput[]
    OR?: ProductTypeWhereInput[]
    NOT?: ProductTypeWhereInput | ProductTypeWhereInput[]
    description?: StringNullableFilter<"ProductType"> | string | null
    color?: StringNullableFilter<"ProductType"> | string | null
    isActive?: BoolFilter<"ProductType"> | boolean
    createdAt?: DateTimeFilter<"ProductType"> | Date | string
    createdBy?: StringFilter<"ProductType"> | string
    updatedAt?: DateTimeNullableFilter<"ProductType"> | Date | string | null
    updatedBy?: StringNullableFilter<"ProductType"> | string | null
    deletedAt?: DateTimeNullableFilter<"ProductType"> | Date | string | null
    deletedBy?: StringNullableFilter<"ProductType"> | string | null
    products?: ProductListRelationFilter
  }, "name">

  export type ProductTypeOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: ProductTypeCountOrderByAggregateInput
    _max?: ProductTypeMaxOrderByAggregateInput
    _min?: ProductTypeMinOrderByAggregateInput
  }

  export type ProductTypeScalarWhereWithAggregatesInput = {
    AND?: ProductTypeScalarWhereWithAggregatesInput | ProductTypeScalarWhereWithAggregatesInput[]
    OR?: ProductTypeScalarWhereWithAggregatesInput[]
    NOT?: ProductTypeScalarWhereWithAggregatesInput | ProductTypeScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"ProductType"> | string
    description?: StringNullableWithAggregatesFilter<"ProductType"> | string | null
    color?: StringNullableWithAggregatesFilter<"ProductType"> | string | null
    isActive?: BoolWithAggregatesFilter<"ProductType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ProductType"> | Date | string
    createdBy?: StringWithAggregatesFilter<"ProductType"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"ProductType"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"ProductType"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ProductType"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"ProductType"> | string | null
  }

  export type ProductCategoryWhereInput = {
    AND?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    OR?: ProductCategoryWhereInput[]
    NOT?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    name?: StringFilter<"ProductCategory"> | string
    description?: StringNullableFilter<"ProductCategory"> | string | null
    color?: StringNullableFilter<"ProductCategory"> | string | null
    isActive?: BoolFilter<"ProductCategory"> | boolean
    createdAt?: DateTimeFilter<"ProductCategory"> | Date | string
    createdBy?: StringFilter<"ProductCategory"> | string
    updatedAt?: DateTimeNullableFilter<"ProductCategory"> | Date | string | null
    updatedBy?: StringNullableFilter<"ProductCategory"> | string | null
    deletedAt?: DateTimeNullableFilter<"ProductCategory"> | Date | string | null
    deletedBy?: StringNullableFilter<"ProductCategory"> | string | null
    products?: ProductListRelationFilter
  }

  export type ProductCategoryOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    products?: ProductOrderByRelationAggregateInput
    _relevance?: ProductCategoryOrderByRelevanceInput
  }

  export type ProductCategoryWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    OR?: ProductCategoryWhereInput[]
    NOT?: ProductCategoryWhereInput | ProductCategoryWhereInput[]
    description?: StringNullableFilter<"ProductCategory"> | string | null
    color?: StringNullableFilter<"ProductCategory"> | string | null
    isActive?: BoolFilter<"ProductCategory"> | boolean
    createdAt?: DateTimeFilter<"ProductCategory"> | Date | string
    createdBy?: StringFilter<"ProductCategory"> | string
    updatedAt?: DateTimeNullableFilter<"ProductCategory"> | Date | string | null
    updatedBy?: StringNullableFilter<"ProductCategory"> | string | null
    deletedAt?: DateTimeNullableFilter<"ProductCategory"> | Date | string | null
    deletedBy?: StringNullableFilter<"ProductCategory"> | string | null
    products?: ProductListRelationFilter
  }, "name">

  export type ProductCategoryOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: ProductCategoryCountOrderByAggregateInput
    _max?: ProductCategoryMaxOrderByAggregateInput
    _min?: ProductCategoryMinOrderByAggregateInput
  }

  export type ProductCategoryScalarWhereWithAggregatesInput = {
    AND?: ProductCategoryScalarWhereWithAggregatesInput | ProductCategoryScalarWhereWithAggregatesInput[]
    OR?: ProductCategoryScalarWhereWithAggregatesInput[]
    NOT?: ProductCategoryScalarWhereWithAggregatesInput | ProductCategoryScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"ProductCategory"> | string
    description?: StringNullableWithAggregatesFilter<"ProductCategory"> | string | null
    color?: StringNullableWithAggregatesFilter<"ProductCategory"> | string | null
    isActive?: BoolWithAggregatesFilter<"ProductCategory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ProductCategory"> | Date | string
    createdBy?: StringWithAggregatesFilter<"ProductCategory"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"ProductCategory"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"ProductCategory"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ProductCategory"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"ProductCategory"> | string | null
  }

  export type ProductStatusWhereInput = {
    AND?: ProductStatusWhereInput | ProductStatusWhereInput[]
    OR?: ProductStatusWhereInput[]
    NOT?: ProductStatusWhereInput | ProductStatusWhereInput[]
    code?: StringFilter<"ProductStatus"> | string
    name?: StringFilter<"ProductStatus"> | string
    description?: StringNullableFilter<"ProductStatus"> | string | null
    color?: StringNullableFilter<"ProductStatus"> | string | null
    createdAt?: DateTimeFilter<"ProductStatus"> | Date | string
    createdBy?: StringFilter<"ProductStatus"> | string
    updatedAt?: DateTimeNullableFilter<"ProductStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"ProductStatus"> | string | null
    products?: ProductListRelationFilter
  }

  export type ProductStatusOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    products?: ProductOrderByRelationAggregateInput
    _relevance?: ProductStatusOrderByRelevanceInput
  }

  export type ProductStatusWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: ProductStatusWhereInput | ProductStatusWhereInput[]
    OR?: ProductStatusWhereInput[]
    NOT?: ProductStatusWhereInput | ProductStatusWhereInput[]
    description?: StringNullableFilter<"ProductStatus"> | string | null
    color?: StringNullableFilter<"ProductStatus"> | string | null
    createdAt?: DateTimeFilter<"ProductStatus"> | Date | string
    createdBy?: StringFilter<"ProductStatus"> | string
    updatedAt?: DateTimeNullableFilter<"ProductStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"ProductStatus"> | string | null
    products?: ProductListRelationFilter
  }, "code" | "name">

  export type ProductStatusOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ProductStatusCountOrderByAggregateInput
    _max?: ProductStatusMaxOrderByAggregateInput
    _min?: ProductStatusMinOrderByAggregateInput
  }

  export type ProductStatusScalarWhereWithAggregatesInput = {
    AND?: ProductStatusScalarWhereWithAggregatesInput | ProductStatusScalarWhereWithAggregatesInput[]
    OR?: ProductStatusScalarWhereWithAggregatesInput[]
    NOT?: ProductStatusScalarWhereWithAggregatesInput | ProductStatusScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"ProductStatus"> | string
    name?: StringWithAggregatesFilter<"ProductStatus"> | string
    description?: StringNullableWithAggregatesFilter<"ProductStatus"> | string | null
    color?: StringNullableWithAggregatesFilter<"ProductStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProductStatus"> | Date | string
    createdBy?: StringWithAggregatesFilter<"ProductStatus"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"ProductStatus"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"ProductStatus"> | string | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    offerPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFilter<"Product"> | string
    productCategoryName?: StringFilter<"Product"> | string
    brandName?: StringNullableFilter<"Product"> | string | null
    productStatusCode?: StringFilter<"Product"> | string
    mainImageId?: IntNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    createdBy?: StringFilter<"Product"> | string
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    updatedBy?: StringNullableFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    deletedBy?: StringNullableFilter<"Product"> | string | null
    productType?: XOR<ProductTypeScalarRelationFilter, ProductTypeWhereInput>
    productCategory?: XOR<ProductCategoryScalarRelationFilter, ProductCategoryWhereInput>
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    productStatus?: XOR<ProductStatusScalarRelationFilter, ProductStatusWhereInput>
    inventory?: XOR<InventoryNullableScalarRelationFilter, InventoryWhereInput> | null
    orderItems?: OrderItemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    offerPrice?: SortOrderInput | SortOrder
    productTypeName?: SortOrder
    productCategoryName?: SortOrder
    brandName?: SortOrderInput | SortOrder
    productStatusCode?: SortOrder
    mainImageId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    productType?: ProductTypeOrderByWithRelationInput
    productCategory?: ProductCategoryOrderByWithRelationInput
    brand?: BrandOrderByWithRelationInput
    productStatus?: ProductStatusOrderByWithRelationInput
    inventory?: InventoryOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    _relevance?: ProductOrderByRelevanceInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    offerPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFilter<"Product"> | string
    productCategoryName?: StringFilter<"Product"> | string
    brandName?: StringNullableFilter<"Product"> | string | null
    productStatusCode?: StringFilter<"Product"> | string
    mainImageId?: IntNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    createdBy?: StringFilter<"Product"> | string
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    updatedBy?: StringNullableFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    deletedBy?: StringNullableFilter<"Product"> | string | null
    productType?: XOR<ProductTypeScalarRelationFilter, ProductTypeWhereInput>
    productCategory?: XOR<ProductCategoryScalarRelationFilter, ProductCategoryWhereInput>
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    productStatus?: XOR<ProductStatusScalarRelationFilter, ProductStatusWhereInput>
    inventory?: XOR<InventoryNullableScalarRelationFilter, InventoryWhereInput> | null
    orderItems?: OrderItemListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    offerPrice?: SortOrderInput | SortOrder
    productTypeName?: SortOrder
    productCategoryName?: SortOrder
    brandName?: SortOrderInput | SortOrder
    productStatusCode?: SortOrder
    mainImageId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    price?: DecimalWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string
    offerPrice?: DecimalNullableWithAggregatesFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringWithAggregatesFilter<"Product"> | string
    productCategoryName?: StringWithAggregatesFilter<"Product"> | string
    brandName?: StringNullableWithAggregatesFilter<"Product"> | string | null
    productStatusCode?: StringWithAggregatesFilter<"Product"> | string
    mainImageId?: IntNullableWithAggregatesFilter<"Product"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Product"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Product"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type DocumentTypeWhereInput = {
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    name?: StringFilter<"DocumentType"> | string
    description?: StringNullableFilter<"DocumentType"> | string | null
    digitLength?: IntFilter<"DocumentType"> | number
    color?: StringNullableFilter<"DocumentType"> | string | null
    isActive?: BoolFilter<"DocumentType"> | boolean
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    createdBy?: StringFilter<"DocumentType"> | string
    updatedAt?: DateTimeNullableFilter<"DocumentType"> | Date | string | null
    updatedBy?: StringNullableFilter<"DocumentType"> | string | null
    deletedAt?: DateTimeNullableFilter<"DocumentType"> | Date | string | null
    deletedBy?: StringNullableFilter<"DocumentType"> | string | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
  }

  export type DocumentTypeOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    digitLength?: SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    _relevance?: DocumentTypeOrderByRelevanceInput
  }

  export type DocumentTypeWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    OR?: DocumentTypeWhereInput[]
    NOT?: DocumentTypeWhereInput | DocumentTypeWhereInput[]
    description?: StringNullableFilter<"DocumentType"> | string | null
    digitLength?: IntFilter<"DocumentType"> | number
    color?: StringNullableFilter<"DocumentType"> | string | null
    isActive?: BoolFilter<"DocumentType"> | boolean
    createdAt?: DateTimeFilter<"DocumentType"> | Date | string
    createdBy?: StringFilter<"DocumentType"> | string
    updatedAt?: DateTimeNullableFilter<"DocumentType"> | Date | string | null
    updatedBy?: StringNullableFilter<"DocumentType"> | string | null
    deletedAt?: DateTimeNullableFilter<"DocumentType"> | Date | string | null
    deletedBy?: StringNullableFilter<"DocumentType"> | string | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
  }, "name">

  export type DocumentTypeOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    digitLength?: SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: DocumentTypeCountOrderByAggregateInput
    _avg?: DocumentTypeAvgOrderByAggregateInput
    _max?: DocumentTypeMaxOrderByAggregateInput
    _min?: DocumentTypeMinOrderByAggregateInput
    _sum?: DocumentTypeSumOrderByAggregateInput
  }

  export type DocumentTypeScalarWhereWithAggregatesInput = {
    AND?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    OR?: DocumentTypeScalarWhereWithAggregatesInput[]
    NOT?: DocumentTypeScalarWhereWithAggregatesInput | DocumentTypeScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"DocumentType"> | string
    description?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    digitLength?: IntWithAggregatesFilter<"DocumentType"> | number
    color?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    isActive?: BoolWithAggregatesFilter<"DocumentType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DocumentType"> | Date | string
    createdBy?: StringWithAggregatesFilter<"DocumentType"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"DocumentType"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"DocumentType"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"DocumentType"> | string | null
  }

  export type AccountStatusWhereInput = {
    AND?: AccountStatusWhereInput | AccountStatusWhereInput[]
    OR?: AccountStatusWhereInput[]
    NOT?: AccountStatusWhereInput | AccountStatusWhereInput[]
    code?: StringFilter<"AccountStatus"> | string
    name?: StringFilter<"AccountStatus"> | string
    description?: StringNullableFilter<"AccountStatus"> | string | null
    color?: StringNullableFilter<"AccountStatus"> | string | null
    createdAt?: DateTimeFilter<"AccountStatus"> | Date | string
    createdBy?: StringFilter<"AccountStatus"> | string
    updatedAt?: DateTimeNullableFilter<"AccountStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"AccountStatus"> | string | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
  }

  export type AccountStatusOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    customers?: CustomerOrderByRelationAggregateInput
    _relevance?: AccountStatusOrderByRelevanceInput
  }

  export type AccountStatusWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: AccountStatusWhereInput | AccountStatusWhereInput[]
    OR?: AccountStatusWhereInput[]
    NOT?: AccountStatusWhereInput | AccountStatusWhereInput[]
    name?: StringFilter<"AccountStatus"> | string
    description?: StringNullableFilter<"AccountStatus"> | string | null
    color?: StringNullableFilter<"AccountStatus"> | string | null
    createdAt?: DateTimeFilter<"AccountStatus"> | Date | string
    createdBy?: StringFilter<"AccountStatus"> | string
    updatedAt?: DateTimeNullableFilter<"AccountStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"AccountStatus"> | string | null
    users?: UserListRelationFilter
    customers?: CustomerListRelationFilter
  }, "code">

  export type AccountStatusOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: AccountStatusCountOrderByAggregateInput
    _max?: AccountStatusMaxOrderByAggregateInput
    _min?: AccountStatusMinOrderByAggregateInput
  }

  export type AccountStatusScalarWhereWithAggregatesInput = {
    AND?: AccountStatusScalarWhereWithAggregatesInput | AccountStatusScalarWhereWithAggregatesInput[]
    OR?: AccountStatusScalarWhereWithAggregatesInput[]
    NOT?: AccountStatusScalarWhereWithAggregatesInput | AccountStatusScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"AccountStatus"> | string
    name?: StringWithAggregatesFilter<"AccountStatus"> | string
    description?: StringNullableWithAggregatesFilter<"AccountStatus"> | string | null
    color?: StringNullableWithAggregatesFilter<"AccountStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountStatus"> | Date | string
    createdBy?: StringWithAggregatesFilter<"AccountStatus"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"AccountStatus"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"AccountStatus"> | string | null
  }

  export type PermissionCategoryWhereInput = {
    AND?: PermissionCategoryWhereInput | PermissionCategoryWhereInput[]
    OR?: PermissionCategoryWhereInput[]
    NOT?: PermissionCategoryWhereInput | PermissionCategoryWhereInput[]
    code?: StringFilter<"PermissionCategory"> | string
    name?: StringFilter<"PermissionCategory"> | string
    description?: StringNullableFilter<"PermissionCategory"> | string | null
    color?: StringNullableFilter<"PermissionCategory"> | string | null
    createdAt?: DateTimeFilter<"PermissionCategory"> | Date | string
    createdBy?: StringFilter<"PermissionCategory"> | string
    updatedAt?: DateTimeNullableFilter<"PermissionCategory"> | Date | string | null
    updatedBy?: StringNullableFilter<"PermissionCategory"> | string | null
    permissions?: PermissionListRelationFilter
  }

  export type PermissionCategoryOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    permissions?: PermissionOrderByRelationAggregateInput
    _relevance?: PermissionCategoryOrderByRelevanceInput
  }

  export type PermissionCategoryWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: PermissionCategoryWhereInput | PermissionCategoryWhereInput[]
    OR?: PermissionCategoryWhereInput[]
    NOT?: PermissionCategoryWhereInput | PermissionCategoryWhereInput[]
    name?: StringFilter<"PermissionCategory"> | string
    description?: StringNullableFilter<"PermissionCategory"> | string | null
    color?: StringNullableFilter<"PermissionCategory"> | string | null
    createdAt?: DateTimeFilter<"PermissionCategory"> | Date | string
    createdBy?: StringFilter<"PermissionCategory"> | string
    updatedAt?: DateTimeNullableFilter<"PermissionCategory"> | Date | string | null
    updatedBy?: StringNullableFilter<"PermissionCategory"> | string | null
    permissions?: PermissionListRelationFilter
  }, "code">

  export type PermissionCategoryOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: PermissionCategoryCountOrderByAggregateInput
    _max?: PermissionCategoryMaxOrderByAggregateInput
    _min?: PermissionCategoryMinOrderByAggregateInput
  }

  export type PermissionCategoryScalarWhereWithAggregatesInput = {
    AND?: PermissionCategoryScalarWhereWithAggregatesInput | PermissionCategoryScalarWhereWithAggregatesInput[]
    OR?: PermissionCategoryScalarWhereWithAggregatesInput[]
    NOT?: PermissionCategoryScalarWhereWithAggregatesInput | PermissionCategoryScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"PermissionCategory"> | string
    name?: StringWithAggregatesFilter<"PermissionCategory"> | string
    description?: StringNullableWithAggregatesFilter<"PermissionCategory"> | string | null
    color?: StringNullableWithAggregatesFilter<"PermissionCategory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PermissionCategory"> | Date | string
    createdBy?: StringWithAggregatesFilter<"PermissionCategory"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"PermissionCategory"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"PermissionCategory"> | string | null
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    code?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    permissionCategoryCode?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    createdBy?: StringFilter<"Permission"> | string
    permissioncategory?: XOR<PermissionCategoryScalarRelationFilter, PermissionCategoryWhereInput>
    rolePermissions?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    permissionCategoryCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    permissioncategory?: PermissionCategoryOrderByWithRelationInput
    rolePermissions?: RolePermissionOrderByRelationAggregateInput
    _relevance?: PermissionOrderByRelevanceInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    description?: StringNullableFilter<"Permission"> | string | null
    permissionCategoryCode?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    createdBy?: StringFilter<"Permission"> | string
    permissioncategory?: XOR<PermissionCategoryScalarRelationFilter, PermissionCategoryWhereInput>
    rolePermissions?: RolePermissionListRelationFilter
  }, "code" | "name">

  export type PermissionOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    permissionCategoryCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    permissionCategoryCode?: StringWithAggregatesFilter<"Permission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Permission"> | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    color?: StringNullableFilter<"Role"> | string | null
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    createdBy?: StringFilter<"Role"> | string
    updatedAt?: DateTimeNullableFilter<"Role"> | Date | string | null
    updatedBy?: StringNullableFilter<"Role"> | string | null
    deletedAt?: DateTimeNullableFilter<"Role"> | Date | string | null
    deletedBy?: StringNullableFilter<"Role"> | string | null
    permissions?: RolePermissionListRelationFilter
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    permissions?: RolePermissionOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    _relevance?: RoleOrderByRelevanceInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    color?: StringNullableFilter<"Role"> | string | null
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    createdBy?: StringFilter<"Role"> | string
    updatedAt?: DateTimeNullableFilter<"Role"> | Date | string | null
    updatedBy?: StringNullableFilter<"Role"> | string | null
    deletedAt?: DateTimeNullableFilter<"Role"> | Date | string | null
    deletedBy?: StringNullableFilter<"Role"> | string | null
    permissions?: RolePermissionListRelationFilter
    users?: UserListRelationFilter
  }, "name">

  export type RoleOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    color?: StringNullableWithAggregatesFilter<"Role"> | string | null
    isActive?: BoolWithAggregatesFilter<"Role"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Role"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Role"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Role"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Role"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Role"> | string | null
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: IntFilter<"RolePermission"> | number
    roleName?: StringFilter<"RolePermission"> | string
    permissionCode?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    createdBy?: StringFilter<"RolePermission"> | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleName?: SortOrder
    permissionCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
    _relevance?: RolePermissionOrderByRelevanceInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    roleName_permissionCode?: RolePermissionRoleNamePermissionCodeCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleName?: StringFilter<"RolePermission"> | string
    permissionCode?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    createdBy?: StringFilter<"RolePermission"> | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "id" | "roleName_permissionCode">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleName?: SortOrder
    permissionCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _avg?: RolePermissionAvgOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
    _sum?: RolePermissionSumOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RolePermission"> | number
    roleName?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionCode?: StringWithAggregatesFilter<"RolePermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
    createdBy?: StringWithAggregatesFilter<"RolePermission"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    document?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    pin?: StringNullableFilter<"User"> | string | null
    documentTypeName?: StringFilter<"User"> | string
    roleName?: StringFilter<"User"> | string
    accountStatusCode?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: StringFilter<"User"> | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedBy?: StringNullableFilter<"User"> | string | null
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    deletedBy?: StringNullableFilter<"User"> | string | null
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    accountStatus?: XOR<AccountStatusScalarRelationFilter, AccountStatusWhereInput>
    createdThemes?: ThemeListRelationFilter
    combinedTables?: CombineTableListRelationFilter
    releasedTables?: CombineTableListRelationFilter
    userProfile?: XOR<UserProfileNullableScalarRelationFilter, userProfileWhereInput> | null
    commandOpener?: CommandListRelationFilter
    commandCloser?: CommandListRelationFilter
    orderCreator?: OrderListRelationFilter
    orderCloser?: OrderListRelationFilter
    openedCashBoxes?: CashBoxListRelationFilter
    closedCashBoxes?: CashBoxListRelationFilter
    cashBoxMovements?: CashBoxMovementListRelationFilter
    paymentsReceived?: PaymentListRelationFilter
    inventoryMovements?: InventoryMovementListRelationFilter
    sessions?: SessionListRelationFilter
    logs?: LogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pin?: SortOrderInput | SortOrder
    documentTypeName?: SortOrder
    roleName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    documentType?: DocumentTypeOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
    accountStatus?: AccountStatusOrderByWithRelationInput
    createdThemes?: ThemeOrderByRelationAggregateInput
    combinedTables?: CombineTableOrderByRelationAggregateInput
    releasedTables?: CombineTableOrderByRelationAggregateInput
    userProfile?: userProfileOrderByWithRelationInput
    commandOpener?: CommandOrderByRelationAggregateInput
    commandCloser?: CommandOrderByRelationAggregateInput
    orderCreator?: OrderOrderByRelationAggregateInput
    orderCloser?: OrderOrderByRelationAggregateInput
    openedCashBoxes?: CashBoxOrderByRelationAggregateInput
    closedCashBoxes?: CashBoxOrderByRelationAggregateInput
    cashBoxMovements?: CashBoxMovementOrderByRelationAggregateInput
    paymentsReceived?: PaymentOrderByRelationAggregateInput
    inventoryMovements?: InventoryMovementOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    document?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    pin?: StringNullableFilter<"User"> | string | null
    documentTypeName?: StringFilter<"User"> | string
    roleName?: StringFilter<"User"> | string
    accountStatusCode?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: StringFilter<"User"> | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedBy?: StringNullableFilter<"User"> | string | null
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    deletedBy?: StringNullableFilter<"User"> | string | null
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    accountStatus?: XOR<AccountStatusScalarRelationFilter, AccountStatusWhereInput>
    createdThemes?: ThemeListRelationFilter
    combinedTables?: CombineTableListRelationFilter
    releasedTables?: CombineTableListRelationFilter
    userProfile?: XOR<UserProfileNullableScalarRelationFilter, userProfileWhereInput> | null
    commandOpener?: CommandListRelationFilter
    commandCloser?: CommandListRelationFilter
    orderCreator?: OrderListRelationFilter
    orderCloser?: OrderListRelationFilter
    openedCashBoxes?: CashBoxListRelationFilter
    closedCashBoxes?: CashBoxListRelationFilter
    cashBoxMovements?: CashBoxMovementListRelationFilter
    paymentsReceived?: PaymentListRelationFilter
    inventoryMovements?: InventoryMovementListRelationFilter
    sessions?: SessionListRelationFilter
    logs?: LogListRelationFilter
  }, "document" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pin?: SortOrderInput | SortOrder
    documentTypeName?: SortOrder
    roleName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    document?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    pin?: StringNullableWithAggregatesFilter<"User"> | string | null
    documentTypeName?: StringWithAggregatesFilter<"User"> | string
    roleName?: StringWithAggregatesFilter<"User"> | string
    accountStatusCode?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdBy?: StringWithAggregatesFilter<"User"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"User"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type userProfileWhereInput = {
    AND?: userProfileWhereInput | userProfileWhereInput[]
    OR?: userProfileWhereInput[]
    NOT?: userProfileWhereInput | userProfileWhereInput[]
    id?: IntFilter<"userProfile"> | number
    userDocument?: StringFilter<"userProfile"> | string
    fullName?: StringFilter<"userProfile"> | string
    phoneNumber?: StringNullableFilter<"userProfile"> | string | null
    birthDate?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    hireDate?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    salary?: DecimalNullableFilter<"userProfile"> | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: StringNullableFilter<"userProfile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"userProfile"> | string | null
    themeName?: StringNullableFilter<"userProfile"> | string | null
    createdAt?: DateTimeFilter<"userProfile"> | Date | string
    createdBy?: StringFilter<"userProfile"> | string
    updatedAt?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    updatedBy?: StringNullableFilter<"userProfile"> | string | null
    deletedAt?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    deletedBy?: StringNullableFilter<"userProfile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    theme?: XOR<ThemeNullableScalarRelationFilter, ThemeWhereInput> | null
  }

  export type userProfileOrderByWithRelationInput = {
    id?: SortOrder
    userDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    hireDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    themeName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    theme?: ThemeOrderByWithRelationInput
    _relevance?: userProfileOrderByRelevanceInput
  }

  export type userProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userDocument?: string
    phoneNumber?: string
    AND?: userProfileWhereInput | userProfileWhereInput[]
    OR?: userProfileWhereInput[]
    NOT?: userProfileWhereInput | userProfileWhereInput[]
    fullName?: StringFilter<"userProfile"> | string
    birthDate?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    hireDate?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    salary?: DecimalNullableFilter<"userProfile"> | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: StringNullableFilter<"userProfile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"userProfile"> | string | null
    themeName?: StringNullableFilter<"userProfile"> | string | null
    createdAt?: DateTimeFilter<"userProfile"> | Date | string
    createdBy?: StringFilter<"userProfile"> | string
    updatedAt?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    updatedBy?: StringNullableFilter<"userProfile"> | string | null
    deletedAt?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    deletedBy?: StringNullableFilter<"userProfile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    theme?: XOR<ThemeNullableScalarRelationFilter, ThemeWhereInput> | null
  }, "id" | "userDocument" | "phoneNumber">

  export type userProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    hireDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    themeName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: userProfileCountOrderByAggregateInput
    _avg?: userProfileAvgOrderByAggregateInput
    _max?: userProfileMaxOrderByAggregateInput
    _min?: userProfileMinOrderByAggregateInput
    _sum?: userProfileSumOrderByAggregateInput
  }

  export type userProfileScalarWhereWithAggregatesInput = {
    AND?: userProfileScalarWhereWithAggregatesInput | userProfileScalarWhereWithAggregatesInput[]
    OR?: userProfileScalarWhereWithAggregatesInput[]
    NOT?: userProfileScalarWhereWithAggregatesInput | userProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"userProfile"> | number
    userDocument?: StringWithAggregatesFilter<"userProfile"> | string
    fullName?: StringWithAggregatesFilter<"userProfile"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"userProfile"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"userProfile"> | Date | string | null
    hireDate?: DateTimeNullableWithAggregatesFilter<"userProfile"> | Date | string | null
    salary?: DecimalNullableWithAggregatesFilter<"userProfile"> | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: StringNullableWithAggregatesFilter<"userProfile"> | string | null
    emergencyContactPhone?: StringNullableWithAggregatesFilter<"userProfile"> | string | null
    themeName?: StringNullableWithAggregatesFilter<"userProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"userProfile"> | Date | string
    createdBy?: StringWithAggregatesFilter<"userProfile"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"userProfile"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"userProfile"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"userProfile"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"userProfile"> | string | null
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    document?: StringFilter<"Customer"> | string
    username?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    password?: StringNullableFilter<"Customer"> | string | null
    documentTypeName?: StringFilter<"Customer"> | string
    accountStatusCode?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    createdBy?: StringFilter<"Customer"> | string
    updatedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    updatedBy?: StringNullableFilter<"Customer"> | string | null
    deletedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    deletedBy?: StringNullableFilter<"Customer"> | string | null
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    accountStatus?: XOR<AccountStatusScalarRelationFilter, AccountStatusWhereInput>
    profile?: XOR<CustomerProfileNullableScalarRelationFilter, CustomerProfileWhereInput> | null
    orders?: OrderListRelationFilter
    payments?: PaymentListRelationFilter
    sessions?: SessionListRelationFilter
    logs?: LogListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    document?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    documentTypeName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    documentType?: DocumentTypeOrderByWithRelationInput
    accountStatus?: AccountStatusOrderByWithRelationInput
    profile?: CustomerProfileOrderByWithRelationInput
    orders?: OrderOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    logs?: LogOrderByRelationAggregateInput
    _relevance?: CustomerOrderByRelevanceInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    document?: string
    username?: string
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    password?: StringNullableFilter<"Customer"> | string | null
    documentTypeName?: StringFilter<"Customer"> | string
    accountStatusCode?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    createdBy?: StringFilter<"Customer"> | string
    updatedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    updatedBy?: StringNullableFilter<"Customer"> | string | null
    deletedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    deletedBy?: StringNullableFilter<"Customer"> | string | null
    documentType?: XOR<DocumentTypeScalarRelationFilter, DocumentTypeWhereInput>
    accountStatus?: XOR<AccountStatusScalarRelationFilter, AccountStatusWhereInput>
    profile?: XOR<CustomerProfileNullableScalarRelationFilter, CustomerProfileWhereInput> | null
    orders?: OrderListRelationFilter
    payments?: PaymentListRelationFilter
    sessions?: SessionListRelationFilter
    logs?: LogListRelationFilter
  }, "document" | "username" | "email">

  export type CustomerOrderByWithAggregationInput = {
    document?: SortOrder
    username?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    documentTypeName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    document?: StringWithAggregatesFilter<"Customer"> | string
    username?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    password?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    documentTypeName?: StringWithAggregatesFilter<"Customer"> | string
    accountStatusCode?: StringWithAggregatesFilter<"Customer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Customer"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Customer"> | string | null
  }

  export type CustomerProfileWhereInput = {
    AND?: CustomerProfileWhereInput | CustomerProfileWhereInput[]
    OR?: CustomerProfileWhereInput[]
    NOT?: CustomerProfileWhereInput | CustomerProfileWhereInput[]
    id?: IntFilter<"CustomerProfile"> | number
    customerDocument?: StringFilter<"CustomerProfile"> | string
    fullName?: StringFilter<"CustomerProfile"> | string
    phoneNumber?: StringNullableFilter<"CustomerProfile"> | string | null
    birthDate?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    themeName?: StringNullableFilter<"CustomerProfile"> | string | null
    createdAt?: DateTimeFilter<"CustomerProfile"> | Date | string
    createdBy?: StringFilter<"CustomerProfile"> | string
    updatedAt?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    updatedBy?: StringNullableFilter<"CustomerProfile"> | string | null
    deletedAt?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    deletedBy?: StringNullableFilter<"CustomerProfile"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    theme?: XOR<ThemeNullableScalarRelationFilter, ThemeWhereInput> | null
  }

  export type CustomerProfileOrderByWithRelationInput = {
    id?: SortOrder
    customerDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    themeName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    customer?: CustomerOrderByWithRelationInput
    theme?: ThemeOrderByWithRelationInput
    _relevance?: CustomerProfileOrderByRelevanceInput
  }

  export type CustomerProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    customerDocument?: string
    phoneNumber?: string
    AND?: CustomerProfileWhereInput | CustomerProfileWhereInput[]
    OR?: CustomerProfileWhereInput[]
    NOT?: CustomerProfileWhereInput | CustomerProfileWhereInput[]
    fullName?: StringFilter<"CustomerProfile"> | string
    birthDate?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    themeName?: StringNullableFilter<"CustomerProfile"> | string | null
    createdAt?: DateTimeFilter<"CustomerProfile"> | Date | string
    createdBy?: StringFilter<"CustomerProfile"> | string
    updatedAt?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    updatedBy?: StringNullableFilter<"CustomerProfile"> | string | null
    deletedAt?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    deletedBy?: StringNullableFilter<"CustomerProfile"> | string | null
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    theme?: XOR<ThemeNullableScalarRelationFilter, ThemeWhereInput> | null
  }, "id" | "customerDocument" | "phoneNumber">

  export type CustomerProfileOrderByWithAggregationInput = {
    id?: SortOrder
    customerDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    themeName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: CustomerProfileCountOrderByAggregateInput
    _avg?: CustomerProfileAvgOrderByAggregateInput
    _max?: CustomerProfileMaxOrderByAggregateInput
    _min?: CustomerProfileMinOrderByAggregateInput
    _sum?: CustomerProfileSumOrderByAggregateInput
  }

  export type CustomerProfileScalarWhereWithAggregatesInput = {
    AND?: CustomerProfileScalarWhereWithAggregatesInput | CustomerProfileScalarWhereWithAggregatesInput[]
    OR?: CustomerProfileScalarWhereWithAggregatesInput[]
    NOT?: CustomerProfileScalarWhereWithAggregatesInput | CustomerProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CustomerProfile"> | number
    customerDocument?: StringWithAggregatesFilter<"CustomerProfile"> | string
    fullName?: StringWithAggregatesFilter<"CustomerProfile"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"CustomerProfile"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"CustomerProfile"> | Date | string | null
    themeName?: StringNullableWithAggregatesFilter<"CustomerProfile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerProfile"> | Date | string
    createdBy?: StringWithAggregatesFilter<"CustomerProfile"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CustomerProfile"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CustomerProfile"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"CustomerProfile"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"CustomerProfile"> | string | null
  }

  export type CommandStatusWhereInput = {
    AND?: CommandStatusWhereInput | CommandStatusWhereInput[]
    OR?: CommandStatusWhereInput[]
    NOT?: CommandStatusWhereInput | CommandStatusWhereInput[]
    code?: StringFilter<"CommandStatus"> | string
    name?: StringFilter<"CommandStatus"> | string
    description?: StringNullableFilter<"CommandStatus"> | string | null
    color?: StringNullableFilter<"CommandStatus"> | string | null
    createdAt?: DateTimeFilter<"CommandStatus"> | Date | string
    createdBy?: StringFilter<"CommandStatus"> | string
    updatedAt?: DateTimeNullableFilter<"CommandStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"CommandStatus"> | string | null
    commands?: CommandListRelationFilter
  }

  export type CommandStatusOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    commands?: CommandOrderByRelationAggregateInput
    _relevance?: CommandStatusOrderByRelevanceInput
  }

  export type CommandStatusWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: CommandStatusWhereInput | CommandStatusWhereInput[]
    OR?: CommandStatusWhereInput[]
    NOT?: CommandStatusWhereInput | CommandStatusWhereInput[]
    description?: StringNullableFilter<"CommandStatus"> | string | null
    color?: StringNullableFilter<"CommandStatus"> | string | null
    createdAt?: DateTimeFilter<"CommandStatus"> | Date | string
    createdBy?: StringFilter<"CommandStatus"> | string
    updatedAt?: DateTimeNullableFilter<"CommandStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"CommandStatus"> | string | null
    commands?: CommandListRelationFilter
  }, "code" | "name">

  export type CommandStatusOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: CommandStatusCountOrderByAggregateInput
    _max?: CommandStatusMaxOrderByAggregateInput
    _min?: CommandStatusMinOrderByAggregateInput
  }

  export type CommandStatusScalarWhereWithAggregatesInput = {
    AND?: CommandStatusScalarWhereWithAggregatesInput | CommandStatusScalarWhereWithAggregatesInput[]
    OR?: CommandStatusScalarWhereWithAggregatesInput[]
    NOT?: CommandStatusScalarWhereWithAggregatesInput | CommandStatusScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"CommandStatus"> | string
    name?: StringWithAggregatesFilter<"CommandStatus"> | string
    description?: StringNullableWithAggregatesFilter<"CommandStatus"> | string | null
    color?: StringNullableWithAggregatesFilter<"CommandStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CommandStatus"> | Date | string
    createdBy?: StringWithAggregatesFilter<"CommandStatus"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CommandStatus"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CommandStatus"> | string | null
  }

  export type CommandWhereInput = {
    AND?: CommandWhereInput | CommandWhereInput[]
    OR?: CommandWhereInput[]
    NOT?: CommandWhereInput | CommandWhereInput[]
    id?: IntFilter<"Command"> | number
    tableId?: IntNullableFilter<"Command"> | number | null
    combineTableId?: IntNullableFilter<"Command"> | number | null
    userDocumentOpener?: StringFilter<"Command"> | string
    openedAt?: DateTimeFilter<"Command"> | Date | string
    commandStatusCode?: StringFilter<"Command"> | string
    notes?: StringNullableFilter<"Command"> | string | null
    userDocumentCloser?: StringNullableFilter<"Command"> | string | null
    closedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    updatedBy?: StringNullableFilter<"Command"> | string | null
    deletedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    deletedBy?: StringNullableFilter<"Command"> | string | null
    table?: XOR<TableNullableScalarRelationFilter, TableWhereInput> | null
    combineTable?: XOR<CombineTableNullableScalarRelationFilter, CombineTableWhereInput> | null
    opener?: XOR<UserScalarRelationFilter, UserWhereInput>
    commandStatus?: XOR<CommandStatusScalarRelationFilter, CommandStatusWhereInput>
    closer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    orders?: OrderListRelationFilter
    orderItems?: OrderItemListRelationFilter
  }

  export type CommandOrderByWithRelationInput = {
    id?: SortOrder
    tableId?: SortOrderInput | SortOrder
    combineTableId?: SortOrderInput | SortOrder
    userDocumentOpener?: SortOrder
    openedAt?: SortOrder
    commandStatusCode?: SortOrder
    notes?: SortOrderInput | SortOrder
    userDocumentCloser?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    table?: TableOrderByWithRelationInput
    combineTable?: CombineTableOrderByWithRelationInput
    opener?: UserOrderByWithRelationInput
    commandStatus?: CommandStatusOrderByWithRelationInput
    closer?: UserOrderByWithRelationInput
    orders?: OrderOrderByRelationAggregateInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    _relevance?: CommandOrderByRelevanceInput
  }

  export type CommandWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommandWhereInput | CommandWhereInput[]
    OR?: CommandWhereInput[]
    NOT?: CommandWhereInput | CommandWhereInput[]
    tableId?: IntNullableFilter<"Command"> | number | null
    combineTableId?: IntNullableFilter<"Command"> | number | null
    userDocumentOpener?: StringFilter<"Command"> | string
    openedAt?: DateTimeFilter<"Command"> | Date | string
    commandStatusCode?: StringFilter<"Command"> | string
    notes?: StringNullableFilter<"Command"> | string | null
    userDocumentCloser?: StringNullableFilter<"Command"> | string | null
    closedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    updatedBy?: StringNullableFilter<"Command"> | string | null
    deletedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    deletedBy?: StringNullableFilter<"Command"> | string | null
    table?: XOR<TableNullableScalarRelationFilter, TableWhereInput> | null
    combineTable?: XOR<CombineTableNullableScalarRelationFilter, CombineTableWhereInput> | null
    opener?: XOR<UserScalarRelationFilter, UserWhereInput>
    commandStatus?: XOR<CommandStatusScalarRelationFilter, CommandStatusWhereInput>
    closer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    orders?: OrderListRelationFilter
    orderItems?: OrderItemListRelationFilter
  }, "id">

  export type CommandOrderByWithAggregationInput = {
    id?: SortOrder
    tableId?: SortOrderInput | SortOrder
    combineTableId?: SortOrderInput | SortOrder
    userDocumentOpener?: SortOrder
    openedAt?: SortOrder
    commandStatusCode?: SortOrder
    notes?: SortOrderInput | SortOrder
    userDocumentCloser?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: CommandCountOrderByAggregateInput
    _avg?: CommandAvgOrderByAggregateInput
    _max?: CommandMaxOrderByAggregateInput
    _min?: CommandMinOrderByAggregateInput
    _sum?: CommandSumOrderByAggregateInput
  }

  export type CommandScalarWhereWithAggregatesInput = {
    AND?: CommandScalarWhereWithAggregatesInput | CommandScalarWhereWithAggregatesInput[]
    OR?: CommandScalarWhereWithAggregatesInput[]
    NOT?: CommandScalarWhereWithAggregatesInput | CommandScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Command"> | number
    tableId?: IntNullableWithAggregatesFilter<"Command"> | number | null
    combineTableId?: IntNullableWithAggregatesFilter<"Command"> | number | null
    userDocumentOpener?: StringWithAggregatesFilter<"Command"> | string
    openedAt?: DateTimeWithAggregatesFilter<"Command"> | Date | string
    commandStatusCode?: StringWithAggregatesFilter<"Command"> | string
    notes?: StringNullableWithAggregatesFilter<"Command"> | string | null
    userDocumentCloser?: StringNullableWithAggregatesFilter<"Command"> | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"Command"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Command"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Command"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Command"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Command"> | string | null
  }

  export type OrderStatusWhereInput = {
    AND?: OrderStatusWhereInput | OrderStatusWhereInput[]
    OR?: OrderStatusWhereInput[]
    NOT?: OrderStatusWhereInput | OrderStatusWhereInput[]
    code?: StringFilter<"OrderStatus"> | string
    name?: StringFilter<"OrderStatus"> | string
    description?: StringNullableFilter<"OrderStatus"> | string | null
    color?: StringNullableFilter<"OrderStatus"> | string | null
    createdAt?: DateTimeFilter<"OrderStatus"> | Date | string
    createdBy?: StringFilter<"OrderStatus"> | string
    updatedAt?: DateTimeNullableFilter<"OrderStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderStatus"> | string | null
    orders?: OrderListRelationFilter
  }

  export type OrderStatusOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    orders?: OrderOrderByRelationAggregateInput
    _relevance?: OrderStatusOrderByRelevanceInput
  }

  export type OrderStatusWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: OrderStatusWhereInput | OrderStatusWhereInput[]
    OR?: OrderStatusWhereInput[]
    NOT?: OrderStatusWhereInput | OrderStatusWhereInput[]
    description?: StringNullableFilter<"OrderStatus"> | string | null
    color?: StringNullableFilter<"OrderStatus"> | string | null
    createdAt?: DateTimeFilter<"OrderStatus"> | Date | string
    createdBy?: StringFilter<"OrderStatus"> | string
    updatedAt?: DateTimeNullableFilter<"OrderStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderStatus"> | string | null
    orders?: OrderListRelationFilter
  }, "code" | "name">

  export type OrderStatusOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: OrderStatusCountOrderByAggregateInput
    _max?: OrderStatusMaxOrderByAggregateInput
    _min?: OrderStatusMinOrderByAggregateInput
  }

  export type OrderStatusScalarWhereWithAggregatesInput = {
    AND?: OrderStatusScalarWhereWithAggregatesInput | OrderStatusScalarWhereWithAggregatesInput[]
    OR?: OrderStatusScalarWhereWithAggregatesInput[]
    NOT?: OrderStatusScalarWhereWithAggregatesInput | OrderStatusScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"OrderStatus"> | string
    name?: StringWithAggregatesFilter<"OrderStatus"> | string
    description?: StringNullableWithAggregatesFilter<"OrderStatus"> | string | null
    color?: StringNullableWithAggregatesFilter<"OrderStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OrderStatus"> | Date | string
    createdBy?: StringWithAggregatesFilter<"OrderStatus"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OrderStatus"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"OrderStatus"> | string | null
  }

  export type OrderItemStatusWhereInput = {
    AND?: OrderItemStatusWhereInput | OrderItemStatusWhereInput[]
    OR?: OrderItemStatusWhereInput[]
    NOT?: OrderItemStatusWhereInput | OrderItemStatusWhereInput[]
    code?: StringFilter<"OrderItemStatus"> | string
    name?: StringFilter<"OrderItemStatus"> | string
    description?: StringNullableFilter<"OrderItemStatus"> | string | null
    color?: StringNullableFilter<"OrderItemStatus"> | string | null
    createdAt?: DateTimeFilter<"OrderItemStatus"> | Date | string
    createdBy?: StringFilter<"OrderItemStatus"> | string
    updatedAt?: DateTimeNullableFilter<"OrderItemStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderItemStatus"> | string | null
    orderItems?: OrderItemListRelationFilter
  }

  export type OrderItemStatusOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    orderItems?: OrderItemOrderByRelationAggregateInput
    _relevance?: OrderItemStatusOrderByRelevanceInput
  }

  export type OrderItemStatusWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: OrderItemStatusWhereInput | OrderItemStatusWhereInput[]
    OR?: OrderItemStatusWhereInput[]
    NOT?: OrderItemStatusWhereInput | OrderItemStatusWhereInput[]
    description?: StringNullableFilter<"OrderItemStatus"> | string | null
    color?: StringNullableFilter<"OrderItemStatus"> | string | null
    createdAt?: DateTimeFilter<"OrderItemStatus"> | Date | string
    createdBy?: StringFilter<"OrderItemStatus"> | string
    updatedAt?: DateTimeNullableFilter<"OrderItemStatus"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderItemStatus"> | string | null
    orderItems?: OrderItemListRelationFilter
  }, "code" | "name">

  export type OrderItemStatusOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: OrderItemStatusCountOrderByAggregateInput
    _max?: OrderItemStatusMaxOrderByAggregateInput
    _min?: OrderItemStatusMinOrderByAggregateInput
  }

  export type OrderItemStatusScalarWhereWithAggregatesInput = {
    AND?: OrderItemStatusScalarWhereWithAggregatesInput | OrderItemStatusScalarWhereWithAggregatesInput[]
    OR?: OrderItemStatusScalarWhereWithAggregatesInput[]
    NOT?: OrderItemStatusScalarWhereWithAggregatesInput | OrderItemStatusScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"OrderItemStatus"> | string
    name?: StringWithAggregatesFilter<"OrderItemStatus"> | string
    description?: StringNullableWithAggregatesFilter<"OrderItemStatus"> | string | null
    color?: StringNullableWithAggregatesFilter<"OrderItemStatus"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OrderItemStatus"> | Date | string
    createdBy?: StringWithAggregatesFilter<"OrderItemStatus"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OrderItemStatus"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"OrderItemStatus"> | string | null
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    code?: StringFilter<"Order"> | string
    commandId?: IntFilter<"Order"> | number
    userDocumentCreator?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    customerDocument?: StringFilter<"Order"> | string
    subtotal?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFilter<"Order"> | string
    userDocumentCloser?: StringNullableFilter<"Order"> | string | null
    closedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedBy?: StringNullableFilter<"Order"> | string | null
    deletedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    deletedBy?: StringNullableFilter<"Order"> | string | null
    command?: XOR<CommandScalarRelationFilter, CommandWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    orderStatus?: XOR<OrderStatusScalarRelationFilter, OrderStatusWhereInput>
    closer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    orderItems?: OrderItemListRelationFilter
    payment?: XOR<PaymentNullableScalarRelationFilter, PaymentWhereInput> | null
  }

  export type OrderOrderByWithRelationInput = {
    code?: SortOrder
    commandId?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    customerDocument?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
    orderStatusCode?: SortOrder
    userDocumentCloser?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    command?: CommandOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
    orderStatus?: OrderStatusOrderByWithRelationInput
    closer?: UserOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    payment?: PaymentOrderByWithRelationInput
    _relevance?: OrderOrderByRelevanceInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    commandId?: IntFilter<"Order"> | number
    userDocumentCreator?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    customerDocument?: StringFilter<"Order"> | string
    subtotal?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFilter<"Order"> | string
    userDocumentCloser?: StringNullableFilter<"Order"> | string | null
    closedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedBy?: StringNullableFilter<"Order"> | string | null
    deletedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    deletedBy?: StringNullableFilter<"Order"> | string | null
    command?: XOR<CommandScalarRelationFilter, CommandWhereInput>
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    orderStatus?: XOR<OrderStatusScalarRelationFilter, OrderStatusWhereInput>
    closer?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    orderItems?: OrderItemListRelationFilter
    payment?: XOR<PaymentNullableScalarRelationFilter, PaymentWhereInput> | null
  }, "code">

  export type OrderOrderByWithAggregationInput = {
    code?: SortOrder
    commandId?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    customerDocument?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
    orderStatusCode?: SortOrder
    userDocumentCloser?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"Order"> | string
    commandId?: IntWithAggregatesFilter<"Order"> | number
    userDocumentCreator?: StringWithAggregatesFilter<"Order"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    customerDocument?: StringWithAggregatesFilter<"Order"> | string
    subtotal?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalWithAggregatesFilter<"Order"> | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringWithAggregatesFilter<"Order"> | string
    userDocumentCloser?: StringNullableWithAggregatesFilter<"Order"> | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Order"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Order"> | string | null
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    commandId?: IntFilter<"OrderItem"> | number
    orderCode?: StringNullableFilter<"OrderItem"> | string | null
    productId?: IntFilter<"OrderItem"> | number
    orderItemStatusCode?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    specialInstructions?: StringNullableFilter<"OrderItem"> | string | null
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"OrderItem"> | string | null
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    createdBy?: StringFilter<"OrderItem"> | string
    updatedAt?: DateTimeNullableFilter<"OrderItem"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderItem"> | string | null
    deletedAt?: DateTimeNullableFilter<"OrderItem"> | Date | string | null
    deletedBy?: StringNullableFilter<"OrderItem"> | string | null
    command?: XOR<CommandScalarRelationFilter, CommandWhereInput>
    order?: XOR<OrderNullableScalarRelationFilter, OrderWhereInput> | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    orderItemStatus?: XOR<OrderItemStatusScalarRelationFilter, OrderItemStatusWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    commandId?: SortOrder
    orderCode?: SortOrderInput | SortOrder
    productId?: SortOrder
    orderItemStatusCode?: SortOrder
    quantity?: SortOrder
    specialInstructions?: SortOrderInput | SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    command?: CommandOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    orderItemStatus?: OrderItemStatusOrderByWithRelationInput
    _relevance?: OrderItemOrderByRelevanceInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    commandId?: IntFilter<"OrderItem"> | number
    orderCode?: StringNullableFilter<"OrderItem"> | string | null
    productId?: IntFilter<"OrderItem"> | number
    orderItemStatusCode?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    specialInstructions?: StringNullableFilter<"OrderItem"> | string | null
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"OrderItem"> | string | null
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    createdBy?: StringFilter<"OrderItem"> | string
    updatedAt?: DateTimeNullableFilter<"OrderItem"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderItem"> | string | null
    deletedAt?: DateTimeNullableFilter<"OrderItem"> | Date | string | null
    deletedBy?: StringNullableFilter<"OrderItem"> | string | null
    command?: XOR<CommandScalarRelationFilter, CommandWhereInput>
    order?: XOR<OrderNullableScalarRelationFilter, OrderWhereInput> | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    orderItemStatus?: XOR<OrderItemStatusScalarRelationFilter, OrderItemStatusWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    commandId?: SortOrder
    orderCode?: SortOrderInput | SortOrder
    productId?: SortOrder
    orderItemStatusCode?: SortOrder
    quantity?: SortOrder
    specialInstructions?: SortOrderInput | SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderItem"> | number
    commandId?: IntWithAggregatesFilter<"OrderItem"> | number
    orderCode?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    productId?: IntWithAggregatesFilter<"OrderItem"> | number
    orderItemStatusCode?: StringWithAggregatesFilter<"OrderItem"> | string
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    specialInstructions?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    unitPrice?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalWithAggregatesFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"OrderItem"> | Date | string
    createdBy?: StringWithAggregatesFilter<"OrderItem"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OrderItem"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"OrderItem"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
  }

  export type CashBoxWhereInput = {
    AND?: CashBoxWhereInput | CashBoxWhereInput[]
    OR?: CashBoxWhereInput[]
    NOT?: CashBoxWhereInput | CashBoxWhereInput[]
    id?: IntFilter<"CashBox"> | number
    userDocumentOpened?: StringFilter<"CashBox"> | string
    openedAt?: DateTimeFilter<"CashBox"> | Date | string
    initialAmount?: DecimalFilter<"CashBox"> | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: StringNullableFilter<"CashBox"> | string | null
    closedAt?: DateTimeNullableFilter<"CashBox"> | Date | string | null
    finalAmount?: DecimalNullableFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    totalSales?: DecimalNullableFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"CashBox"> | string | null
    updatedAt?: DateTimeNullableFilter<"CashBox"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBox"> | string | null
    opened?: XOR<UserScalarRelationFilter, UserWhereInput>
    closed?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cashboxMovements?: CashBoxMovementListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type CashBoxOrderByWithRelationInput = {
    id?: SortOrder
    userDocumentOpened?: SortOrder
    openedAt?: SortOrder
    initialAmount?: SortOrder
    userDocumentClosed?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    finalAmount?: SortOrderInput | SortOrder
    totalSales?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    opened?: UserOrderByWithRelationInput
    closed?: UserOrderByWithRelationInput
    cashboxMovements?: CashBoxMovementOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    _relevance?: CashBoxOrderByRelevanceInput
  }

  export type CashBoxWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CashBoxWhereInput | CashBoxWhereInput[]
    OR?: CashBoxWhereInput[]
    NOT?: CashBoxWhereInput | CashBoxWhereInput[]
    userDocumentOpened?: StringFilter<"CashBox"> | string
    openedAt?: DateTimeFilter<"CashBox"> | Date | string
    initialAmount?: DecimalFilter<"CashBox"> | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: StringNullableFilter<"CashBox"> | string | null
    closedAt?: DateTimeNullableFilter<"CashBox"> | Date | string | null
    finalAmount?: DecimalNullableFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    totalSales?: DecimalNullableFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"CashBox"> | string | null
    updatedAt?: DateTimeNullableFilter<"CashBox"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBox"> | string | null
    opened?: XOR<UserScalarRelationFilter, UserWhereInput>
    closed?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cashboxMovements?: CashBoxMovementListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id">

  export type CashBoxOrderByWithAggregationInput = {
    id?: SortOrder
    userDocumentOpened?: SortOrder
    openedAt?: SortOrder
    initialAmount?: SortOrder
    userDocumentClosed?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    finalAmount?: SortOrderInput | SortOrder
    totalSales?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: CashBoxCountOrderByAggregateInput
    _avg?: CashBoxAvgOrderByAggregateInput
    _max?: CashBoxMaxOrderByAggregateInput
    _min?: CashBoxMinOrderByAggregateInput
    _sum?: CashBoxSumOrderByAggregateInput
  }

  export type CashBoxScalarWhereWithAggregatesInput = {
    AND?: CashBoxScalarWhereWithAggregatesInput | CashBoxScalarWhereWithAggregatesInput[]
    OR?: CashBoxScalarWhereWithAggregatesInput[]
    NOT?: CashBoxScalarWhereWithAggregatesInput | CashBoxScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CashBox"> | number
    userDocumentOpened?: StringWithAggregatesFilter<"CashBox"> | string
    openedAt?: DateTimeWithAggregatesFilter<"CashBox"> | Date | string
    initialAmount?: DecimalWithAggregatesFilter<"CashBox"> | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: StringNullableWithAggregatesFilter<"CashBox"> | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"CashBox"> | Date | string | null
    finalAmount?: DecimalNullableWithAggregatesFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    totalSales?: DecimalNullableWithAggregatesFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableWithAggregatesFilter<"CashBox"> | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CashBox"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CashBox"> | string | null
  }

  export type CashBoxMovementTypeWhereInput = {
    AND?: CashBoxMovementTypeWhereInput | CashBoxMovementTypeWhereInput[]
    OR?: CashBoxMovementTypeWhereInput[]
    NOT?: CashBoxMovementTypeWhereInput | CashBoxMovementTypeWhereInput[]
    code?: StringFilter<"CashBoxMovementType"> | string
    name?: StringFilter<"CashBoxMovementType"> | string
    description?: StringNullableFilter<"CashBoxMovementType"> | string | null
    color?: StringNullableFilter<"CashBoxMovementType"> | string | null
    createdAt?: DateTimeFilter<"CashBoxMovementType"> | Date | string
    createdBy?: StringFilter<"CashBoxMovementType"> | string
    updatedAt?: DateTimeNullableFilter<"CashBoxMovementType"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBoxMovementType"> | string | null
    cashBoxMovement?: CashBoxMovementListRelationFilter
  }

  export type CashBoxMovementTypeOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    cashBoxMovement?: CashBoxMovementOrderByRelationAggregateInput
    _relevance?: CashBoxMovementTypeOrderByRelevanceInput
  }

  export type CashBoxMovementTypeWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: CashBoxMovementTypeWhereInput | CashBoxMovementTypeWhereInput[]
    OR?: CashBoxMovementTypeWhereInput[]
    NOT?: CashBoxMovementTypeWhereInput | CashBoxMovementTypeWhereInput[]
    description?: StringNullableFilter<"CashBoxMovementType"> | string | null
    color?: StringNullableFilter<"CashBoxMovementType"> | string | null
    createdAt?: DateTimeFilter<"CashBoxMovementType"> | Date | string
    createdBy?: StringFilter<"CashBoxMovementType"> | string
    updatedAt?: DateTimeNullableFilter<"CashBoxMovementType"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBoxMovementType"> | string | null
    cashBoxMovement?: CashBoxMovementListRelationFilter
  }, "code" | "name">

  export type CashBoxMovementTypeOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: CashBoxMovementTypeCountOrderByAggregateInput
    _max?: CashBoxMovementTypeMaxOrderByAggregateInput
    _min?: CashBoxMovementTypeMinOrderByAggregateInput
  }

  export type CashBoxMovementTypeScalarWhereWithAggregatesInput = {
    AND?: CashBoxMovementTypeScalarWhereWithAggregatesInput | CashBoxMovementTypeScalarWhereWithAggregatesInput[]
    OR?: CashBoxMovementTypeScalarWhereWithAggregatesInput[]
    NOT?: CashBoxMovementTypeScalarWhereWithAggregatesInput | CashBoxMovementTypeScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"CashBoxMovementType"> | string
    name?: StringWithAggregatesFilter<"CashBoxMovementType"> | string
    description?: StringNullableWithAggregatesFilter<"CashBoxMovementType"> | string | null
    color?: StringNullableWithAggregatesFilter<"CashBoxMovementType"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CashBoxMovementType"> | Date | string
    createdBy?: StringWithAggregatesFilter<"CashBoxMovementType"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CashBoxMovementType"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CashBoxMovementType"> | string | null
  }

  export type CashBoxMovementWhereInput = {
    AND?: CashBoxMovementWhereInput | CashBoxMovementWhereInput[]
    OR?: CashBoxMovementWhereInput[]
    NOT?: CashBoxMovementWhereInput | CashBoxMovementWhereInput[]
    id?: IntFilter<"CashBoxMovement"> | number
    cashboxId?: IntFilter<"CashBoxMovement"> | number
    userDocument?: StringFilter<"CashBoxMovement"> | string
    cashboxMovementTypeCode?: StringFilter<"CashBoxMovement"> | string
    amount?: DecimalFilter<"CashBoxMovement"> | Decimal | DecimalJsLike | number | string
    concept?: StringNullableFilter<"CashBoxMovement"> | string | null
    createdAt?: DateTimeFilter<"CashBoxMovement"> | Date | string
    createdBy?: StringFilter<"CashBoxMovement"> | string
    updatedAt?: DateTimeNullableFilter<"CashBoxMovement"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBoxMovement"> | string | null
    cashbox?: XOR<CashBoxScalarRelationFilter, CashBoxWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cashboxMovementType?: XOR<CashBoxMovementTypeScalarRelationFilter, CashBoxMovementTypeWhereInput>
  }

  export type CashBoxMovementOrderByWithRelationInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    userDocument?: SortOrder
    cashboxMovementTypeCode?: SortOrder
    amount?: SortOrder
    concept?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    cashbox?: CashBoxOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    cashboxMovementType?: CashBoxMovementTypeOrderByWithRelationInput
    _relevance?: CashBoxMovementOrderByRelevanceInput
  }

  export type CashBoxMovementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CashBoxMovementWhereInput | CashBoxMovementWhereInput[]
    OR?: CashBoxMovementWhereInput[]
    NOT?: CashBoxMovementWhereInput | CashBoxMovementWhereInput[]
    cashboxId?: IntFilter<"CashBoxMovement"> | number
    userDocument?: StringFilter<"CashBoxMovement"> | string
    cashboxMovementTypeCode?: StringFilter<"CashBoxMovement"> | string
    amount?: DecimalFilter<"CashBoxMovement"> | Decimal | DecimalJsLike | number | string
    concept?: StringNullableFilter<"CashBoxMovement"> | string | null
    createdAt?: DateTimeFilter<"CashBoxMovement"> | Date | string
    createdBy?: StringFilter<"CashBoxMovement"> | string
    updatedAt?: DateTimeNullableFilter<"CashBoxMovement"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBoxMovement"> | string | null
    cashbox?: XOR<CashBoxScalarRelationFilter, CashBoxWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cashboxMovementType?: XOR<CashBoxMovementTypeScalarRelationFilter, CashBoxMovementTypeWhereInput>
  }, "id">

  export type CashBoxMovementOrderByWithAggregationInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    userDocument?: SortOrder
    cashboxMovementTypeCode?: SortOrder
    amount?: SortOrder
    concept?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: CashBoxMovementCountOrderByAggregateInput
    _avg?: CashBoxMovementAvgOrderByAggregateInput
    _max?: CashBoxMovementMaxOrderByAggregateInput
    _min?: CashBoxMovementMinOrderByAggregateInput
    _sum?: CashBoxMovementSumOrderByAggregateInput
  }

  export type CashBoxMovementScalarWhereWithAggregatesInput = {
    AND?: CashBoxMovementScalarWhereWithAggregatesInput | CashBoxMovementScalarWhereWithAggregatesInput[]
    OR?: CashBoxMovementScalarWhereWithAggregatesInput[]
    NOT?: CashBoxMovementScalarWhereWithAggregatesInput | CashBoxMovementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CashBoxMovement"> | number
    cashboxId?: IntWithAggregatesFilter<"CashBoxMovement"> | number
    userDocument?: StringWithAggregatesFilter<"CashBoxMovement"> | string
    cashboxMovementTypeCode?: StringWithAggregatesFilter<"CashBoxMovement"> | string
    amount?: DecimalWithAggregatesFilter<"CashBoxMovement"> | Decimal | DecimalJsLike | number | string
    concept?: StringNullableWithAggregatesFilter<"CashBoxMovement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CashBoxMovement"> | Date | string
    createdBy?: StringWithAggregatesFilter<"CashBoxMovement"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"CashBoxMovement"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"CashBoxMovement"> | string | null
  }

  export type PaymentMethodWhereInput = {
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    name?: StringFilter<"PaymentMethod"> | string
    description?: StringNullableFilter<"PaymentMethod"> | string | null
    color?: StringNullableFilter<"PaymentMethod"> | string | null
    isActive?: BoolFilter<"PaymentMethod"> | boolean
    createdAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    createdBy?: StringFilter<"PaymentMethod"> | string
    updatedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    updatedBy?: StringNullableFilter<"PaymentMethod"> | string | null
    deletedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    deletedBy?: StringNullableFilter<"PaymentMethod"> | string | null
    payments?: PaymentListRelationFilter
  }

  export type PaymentMethodOrderByWithRelationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    payments?: PaymentOrderByRelationAggregateInput
    _relevance?: PaymentMethodOrderByRelevanceInput
  }

  export type PaymentMethodWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    OR?: PaymentMethodWhereInput[]
    NOT?: PaymentMethodWhereInput | PaymentMethodWhereInput[]
    description?: StringNullableFilter<"PaymentMethod"> | string | null
    color?: StringNullableFilter<"PaymentMethod"> | string | null
    isActive?: BoolFilter<"PaymentMethod"> | boolean
    createdAt?: DateTimeFilter<"PaymentMethod"> | Date | string
    createdBy?: StringFilter<"PaymentMethod"> | string
    updatedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    updatedBy?: StringNullableFilter<"PaymentMethod"> | string | null
    deletedAt?: DateTimeNullableFilter<"PaymentMethod"> | Date | string | null
    deletedBy?: StringNullableFilter<"PaymentMethod"> | string | null
    payments?: PaymentListRelationFilter
  }, "name">

  export type PaymentMethodOrderByWithAggregationInput = {
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: PaymentMethodCountOrderByAggregateInput
    _max?: PaymentMethodMaxOrderByAggregateInput
    _min?: PaymentMethodMinOrderByAggregateInput
  }

  export type PaymentMethodScalarWhereWithAggregatesInput = {
    AND?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    OR?: PaymentMethodScalarWhereWithAggregatesInput[]
    NOT?: PaymentMethodScalarWhereWithAggregatesInput | PaymentMethodScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"PaymentMethod"> | string
    description?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
    color?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
    isActive?: BoolWithAggregatesFilter<"PaymentMethod"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PaymentMethod"> | Date | string
    createdBy?: StringWithAggregatesFilter<"PaymentMethod"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"PaymentMethod"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"PaymentMethod"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"PaymentMethod"> | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    orderCode?: StringFilter<"Payment"> | string
    cashBoxId?: IntFilter<"Payment"> | number
    paymentMethodName?: StringFilter<"Payment"> | string
    totalAmount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    receivedAmount?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    changeAmount?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: StringNullableFilter<"Payment"> | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    userDocumentReceive?: StringFilter<"Payment"> | string
    customerDocumentPaid?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    createdBy?: StringFilter<"Payment"> | string
    updatedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    updatedBy?: StringNullableFilter<"Payment"> | string | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    cashBox?: XOR<CashBoxScalarRelationFilter, CashBoxWhereInput>
    paymentMethod?: XOR<PaymentMethodScalarRelationFilter, PaymentMethodWhereInput>
    receive?: XOR<UserScalarRelationFilter, UserWhereInput>
    paid?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    orderCode?: SortOrder
    cashBoxId?: SortOrder
    paymentMethodName?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrderInput | SortOrder
    changeAmount?: SortOrderInput | SortOrder
    transactionNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userDocumentReceive?: SortOrder
    customerDocumentPaid?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    order?: OrderOrderByWithRelationInput
    cashBox?: CashBoxOrderByWithRelationInput
    paymentMethod?: PaymentMethodOrderByWithRelationInput
    receive?: UserOrderByWithRelationInput
    paid?: CustomerOrderByWithRelationInput
    _relevance?: PaymentOrderByRelevanceInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderCode?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    cashBoxId?: IntFilter<"Payment"> | number
    paymentMethodName?: StringFilter<"Payment"> | string
    totalAmount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    receivedAmount?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    changeAmount?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: StringNullableFilter<"Payment"> | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    userDocumentReceive?: StringFilter<"Payment"> | string
    customerDocumentPaid?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    createdBy?: StringFilter<"Payment"> | string
    updatedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    updatedBy?: StringNullableFilter<"Payment"> | string | null
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    cashBox?: XOR<CashBoxScalarRelationFilter, CashBoxWhereInput>
    paymentMethod?: XOR<PaymentMethodScalarRelationFilter, PaymentMethodWhereInput>
    receive?: XOR<UserScalarRelationFilter, UserWhereInput>
    paid?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }, "id" | "orderCode">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    orderCode?: SortOrder
    cashBoxId?: SortOrder
    paymentMethodName?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrderInput | SortOrder
    changeAmount?: SortOrderInput | SortOrder
    transactionNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userDocumentReceive?: SortOrder
    customerDocumentPaid?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    orderCode?: StringWithAggregatesFilter<"Payment"> | string
    cashBoxId?: IntWithAggregatesFilter<"Payment"> | number
    paymentMethodName?: StringWithAggregatesFilter<"Payment"> | string
    totalAmount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    receivedAmount?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    changeAmount?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    userDocumentReceive?: StringWithAggregatesFilter<"Payment"> | string
    customerDocumentPaid?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Payment"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Payment"> | string | null
  }

  export type InventoryMovementTypeWhereInput = {
    AND?: InventoryMovementTypeWhereInput | InventoryMovementTypeWhereInput[]
    OR?: InventoryMovementTypeWhereInput[]
    NOT?: InventoryMovementTypeWhereInput | InventoryMovementTypeWhereInput[]
    code?: StringFilter<"InventoryMovementType"> | string
    name?: StringFilter<"InventoryMovementType"> | string
    description?: StringNullableFilter<"InventoryMovementType"> | string | null
    color?: StringNullableFilter<"InventoryMovementType"> | string | null
    createdAt?: DateTimeFilter<"InventoryMovementType"> | Date | string
    createdBy?: StringFilter<"InventoryMovementType"> | string
    updatedAt?: DateTimeNullableFilter<"InventoryMovementType"> | Date | string | null
    updatedBy?: StringNullableFilter<"InventoryMovementType"> | string | null
    movements?: InventoryMovementListRelationFilter
  }

  export type InventoryMovementTypeOrderByWithRelationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    movements?: InventoryMovementOrderByRelationAggregateInput
    _relevance?: InventoryMovementTypeOrderByRelevanceInput
  }

  export type InventoryMovementTypeWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    name?: string
    AND?: InventoryMovementTypeWhereInput | InventoryMovementTypeWhereInput[]
    OR?: InventoryMovementTypeWhereInput[]
    NOT?: InventoryMovementTypeWhereInput | InventoryMovementTypeWhereInput[]
    description?: StringNullableFilter<"InventoryMovementType"> | string | null
    color?: StringNullableFilter<"InventoryMovementType"> | string | null
    createdAt?: DateTimeFilter<"InventoryMovementType"> | Date | string
    createdBy?: StringFilter<"InventoryMovementType"> | string
    updatedAt?: DateTimeNullableFilter<"InventoryMovementType"> | Date | string | null
    updatedBy?: StringNullableFilter<"InventoryMovementType"> | string | null
    movements?: InventoryMovementListRelationFilter
  }, "code" | "name">

  export type InventoryMovementTypeOrderByWithAggregationInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: InventoryMovementTypeCountOrderByAggregateInput
    _max?: InventoryMovementTypeMaxOrderByAggregateInput
    _min?: InventoryMovementTypeMinOrderByAggregateInput
  }

  export type InventoryMovementTypeScalarWhereWithAggregatesInput = {
    AND?: InventoryMovementTypeScalarWhereWithAggregatesInput | InventoryMovementTypeScalarWhereWithAggregatesInput[]
    OR?: InventoryMovementTypeScalarWhereWithAggregatesInput[]
    NOT?: InventoryMovementTypeScalarWhereWithAggregatesInput | InventoryMovementTypeScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"InventoryMovementType"> | string
    name?: StringWithAggregatesFilter<"InventoryMovementType"> | string
    description?: StringNullableWithAggregatesFilter<"InventoryMovementType"> | string | null
    color?: StringNullableWithAggregatesFilter<"InventoryMovementType"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InventoryMovementType"> | Date | string
    createdBy?: StringWithAggregatesFilter<"InventoryMovementType"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"InventoryMovementType"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"InventoryMovementType"> | string | null
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: IntFilter<"Inventory"> | number
    productId?: IntFilter<"Inventory"> | number
    currentQuantity?: IntFilter<"Inventory"> | number
    minimumStock?: IntFilter<"Inventory"> | number
    storageLocation?: StringNullableFilter<"Inventory"> | string | null
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    createdBy?: StringFilter<"Inventory"> | string
    updatedAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    updatedBy?: StringNullableFilter<"Inventory"> | string | null
    deletedAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    deletedBy?: StringNullableFilter<"Inventory"> | string | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    inventoryMovements?: InventoryMovementListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
    storageLocation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    inventoryMovements?: InventoryMovementOrderByRelationAggregateInput
    _relevance?: InventoryOrderByRelevanceInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productId?: number
    productId_storageLocation?: InventoryProductIdStorageLocationCompoundUniqueInput
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    currentQuantity?: IntFilter<"Inventory"> | number
    minimumStock?: IntFilter<"Inventory"> | number
    storageLocation?: StringNullableFilter<"Inventory"> | string | null
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    createdBy?: StringFilter<"Inventory"> | string
    updatedAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    updatedBy?: StringNullableFilter<"Inventory"> | string | null
    deletedAt?: DateTimeNullableFilter<"Inventory"> | Date | string | null
    deletedBy?: StringNullableFilter<"Inventory"> | string | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    inventoryMovements?: InventoryMovementListRelationFilter
  }, "id" | "productId" | "productId_storageLocation">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
    storageLocation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Inventory"> | number
    productId?: IntWithAggregatesFilter<"Inventory"> | number
    currentQuantity?: IntWithAggregatesFilter<"Inventory"> | number
    minimumStock?: IntWithAggregatesFilter<"Inventory"> | number
    storageLocation?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Inventory"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Inventory"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Inventory"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Inventory"> | string | null
  }

  export type InventoryMovementWhereInput = {
    AND?: InventoryMovementWhereInput | InventoryMovementWhereInput[]
    OR?: InventoryMovementWhereInput[]
    NOT?: InventoryMovementWhereInput | InventoryMovementWhereInput[]
    id?: IntFilter<"InventoryMovement"> | number
    inventoryId?: IntFilter<"InventoryMovement"> | number
    inventoryMovementTypeCode?: StringFilter<"InventoryMovement"> | string
    quantityMovement?: IntFilter<"InventoryMovement"> | number
    reasonDescription?: StringFilter<"InventoryMovement"> | string
    userDocument?: StringFilter<"InventoryMovement"> | string
    createdAt?: DateTimeFilter<"InventoryMovement"> | Date | string
    createdBy?: StringFilter<"InventoryMovement"> | string
    updatedAt?: DateTimeNullableFilter<"InventoryMovement"> | Date | string | null
    updatedBy?: StringNullableFilter<"InventoryMovement"> | string | null
    deletedAt?: DateTimeNullableFilter<"InventoryMovement"> | Date | string | null
    deletedBy?: StringNullableFilter<"InventoryMovement"> | string | null
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
    inventoryMovementType?: XOR<InventoryMovementTypeScalarRelationFilter, InventoryMovementTypeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InventoryMovementOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    inventoryMovementTypeCode?: SortOrder
    quantityMovement?: SortOrder
    reasonDescription?: SortOrder
    userDocument?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    inventory?: InventoryOrderByWithRelationInput
    inventoryMovementType?: InventoryMovementTypeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: InventoryMovementOrderByRelevanceInput
  }

  export type InventoryMovementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InventoryMovementWhereInput | InventoryMovementWhereInput[]
    OR?: InventoryMovementWhereInput[]
    NOT?: InventoryMovementWhereInput | InventoryMovementWhereInput[]
    inventoryId?: IntFilter<"InventoryMovement"> | number
    inventoryMovementTypeCode?: StringFilter<"InventoryMovement"> | string
    quantityMovement?: IntFilter<"InventoryMovement"> | number
    reasonDescription?: StringFilter<"InventoryMovement"> | string
    userDocument?: StringFilter<"InventoryMovement"> | string
    createdAt?: DateTimeFilter<"InventoryMovement"> | Date | string
    createdBy?: StringFilter<"InventoryMovement"> | string
    updatedAt?: DateTimeNullableFilter<"InventoryMovement"> | Date | string | null
    updatedBy?: StringNullableFilter<"InventoryMovement"> | string | null
    deletedAt?: DateTimeNullableFilter<"InventoryMovement"> | Date | string | null
    deletedBy?: StringNullableFilter<"InventoryMovement"> | string | null
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
    inventoryMovementType?: XOR<InventoryMovementTypeScalarRelationFilter, InventoryMovementTypeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InventoryMovementOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    inventoryMovementTypeCode?: SortOrder
    quantityMovement?: SortOrder
    reasonDescription?: SortOrder
    userDocument?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: InventoryMovementCountOrderByAggregateInput
    _avg?: InventoryMovementAvgOrderByAggregateInput
    _max?: InventoryMovementMaxOrderByAggregateInput
    _min?: InventoryMovementMinOrderByAggregateInput
    _sum?: InventoryMovementSumOrderByAggregateInput
  }

  export type InventoryMovementScalarWhereWithAggregatesInput = {
    AND?: InventoryMovementScalarWhereWithAggregatesInput | InventoryMovementScalarWhereWithAggregatesInput[]
    OR?: InventoryMovementScalarWhereWithAggregatesInput[]
    NOT?: InventoryMovementScalarWhereWithAggregatesInput | InventoryMovementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InventoryMovement"> | number
    inventoryId?: IntWithAggregatesFilter<"InventoryMovement"> | number
    inventoryMovementTypeCode?: StringWithAggregatesFilter<"InventoryMovement"> | string
    quantityMovement?: IntWithAggregatesFilter<"InventoryMovement"> | number
    reasonDescription?: StringWithAggregatesFilter<"InventoryMovement"> | string
    userDocument?: StringWithAggregatesFilter<"InventoryMovement"> | string
    createdAt?: DateTimeWithAggregatesFilter<"InventoryMovement"> | Date | string
    createdBy?: StringWithAggregatesFilter<"InventoryMovement"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"InventoryMovement"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"InventoryMovement"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"InventoryMovement"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"InventoryMovement"> | string | null
  }

  export type OrderSequenceWhereInput = {
    AND?: OrderSequenceWhereInput | OrderSequenceWhereInput[]
    OR?: OrderSequenceWhereInput[]
    NOT?: OrderSequenceWhereInput | OrderSequenceWhereInput[]
    id?: IntFilter<"OrderSequence"> | number
    sequenceYear?: IntFilter<"OrderSequence"> | number
    sequenceMonth?: IntFilter<"OrderSequence"> | number
    sequenceDay?: IntFilter<"OrderSequence"> | number
    lastOrderNumber?: IntFilter<"OrderSequence"> | number
    createdAt?: DateTimeFilter<"OrderSequence"> | Date | string
    updatedAt?: DateTimeNullableFilter<"OrderSequence"> | Date | string | null
  }

  export type OrderSequenceOrderByWithRelationInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type OrderSequenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sequenceYear_sequenceMonth_sequenceDay?: OrderSequenceSequenceYearSequenceMonthSequenceDayCompoundUniqueInput
    AND?: OrderSequenceWhereInput | OrderSequenceWhereInput[]
    OR?: OrderSequenceWhereInput[]
    NOT?: OrderSequenceWhereInput | OrderSequenceWhereInput[]
    sequenceYear?: IntFilter<"OrderSequence"> | number
    sequenceMonth?: IntFilter<"OrderSequence"> | number
    sequenceDay?: IntFilter<"OrderSequence"> | number
    lastOrderNumber?: IntFilter<"OrderSequence"> | number
    createdAt?: DateTimeFilter<"OrderSequence"> | Date | string
    updatedAt?: DateTimeNullableFilter<"OrderSequence"> | Date | string | null
  }, "id" | "sequenceYear_sequenceMonth_sequenceDay">

  export type OrderSequenceOrderByWithAggregationInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: OrderSequenceCountOrderByAggregateInput
    _avg?: OrderSequenceAvgOrderByAggregateInput
    _max?: OrderSequenceMaxOrderByAggregateInput
    _min?: OrderSequenceMinOrderByAggregateInput
    _sum?: OrderSequenceSumOrderByAggregateInput
  }

  export type OrderSequenceScalarWhereWithAggregatesInput = {
    AND?: OrderSequenceScalarWhereWithAggregatesInput | OrderSequenceScalarWhereWithAggregatesInput[]
    OR?: OrderSequenceScalarWhereWithAggregatesInput[]
    NOT?: OrderSequenceScalarWhereWithAggregatesInput | OrderSequenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderSequence"> | number
    sequenceYear?: IntWithAggregatesFilter<"OrderSequence"> | number
    sequenceMonth?: IntWithAggregatesFilter<"OrderSequence"> | number
    sequenceDay?: IntWithAggregatesFilter<"OrderSequence"> | number
    lastOrderNumber?: IntWithAggregatesFilter<"OrderSequence"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OrderSequence"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OrderSequence"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userDocument?: StringNullableFilter<"Session"> | string | null
    customerDocument?: StringNullableFilter<"Session"> | string | null
    token?: StringFilter<"Session"> | string
    deviceInfo?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    isActive?: BoolFilter<"Session"> | boolean
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    closedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    closedBy?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    createdBy?: StringFilter<"Session"> | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    updatedBy?: StringNullableFilter<"Session"> | string | null
    deletedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    deletedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userDocument?: SortOrderInput | SortOrder
    customerDocument?: SortOrderInput | SortOrder
    token?: SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    closedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userDocument?: StringNullableFilter<"Session"> | string | null
    customerDocument?: StringNullableFilter<"Session"> | string | null
    deviceInfo?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    isActive?: BoolFilter<"Session"> | boolean
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    closedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    closedBy?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    createdBy?: StringFilter<"Session"> | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    updatedBy?: StringNullableFilter<"Session"> | string | null
    deletedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    deletedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userDocument?: SortOrderInput | SortOrder
    customerDocument?: SortOrderInput | SortOrder
    token?: SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    closedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userDocument?: StringNullableWithAggregatesFilter<"Session"> | string | null
    customerDocument?: StringNullableWithAggregatesFilter<"Session"> | string | null
    token?: StringWithAggregatesFilter<"Session"> | string
    deviceInfo?: StringNullableWithAggregatesFilter<"Session"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    isActive?: BoolWithAggregatesFilter<"Session"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    closedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    closedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Session"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type LogWhereInput = {
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    id?: IntFilter<"Log"> | number
    entityName?: StringFilter<"Log"> | string
    entityId?: StringNullableFilter<"Log"> | string | null
    action?: StringFilter<"Log"> | string
    message?: StringNullableFilter<"Log"> | string | null
    userDocument?: StringNullableFilter<"Log"> | string | null
    customerDocument?: StringNullableFilter<"Log"> | string | null
    deviceInfo?: StringNullableFilter<"Log"> | string | null
    ipAddress?: StringNullableFilter<"Log"> | string | null
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrderInput | SortOrder
    action?: SortOrder
    message?: SortOrderInput | SortOrder
    userDocument?: SortOrderInput | SortOrder
    customerDocument?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
    _relevance?: LogOrderByRelevanceInput
  }

  export type LogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogWhereInput | LogWhereInput[]
    OR?: LogWhereInput[]
    NOT?: LogWhereInput | LogWhereInput[]
    entityName?: StringFilter<"Log"> | string
    entityId?: StringNullableFilter<"Log"> | string | null
    action?: StringFilter<"Log"> | string
    message?: StringNullableFilter<"Log"> | string | null
    userDocument?: StringNullableFilter<"Log"> | string | null
    customerDocument?: StringNullableFilter<"Log"> | string | null
    deviceInfo?: StringNullableFilter<"Log"> | string | null
    ipAddress?: StringNullableFilter<"Log"> | string | null
    createdAt?: DateTimeFilter<"Log"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }, "id">

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrderInput | SortOrder
    action?: SortOrder
    message?: SortOrderInput | SortOrder
    userDocument?: SortOrderInput | SortOrder
    customerDocument?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    OR?: LogScalarWhereWithAggregatesInput[]
    NOT?: LogScalarWhereWithAggregatesInput | LogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Log"> | number
    entityName?: StringWithAggregatesFilter<"Log"> | string
    entityId?: StringNullableWithAggregatesFilter<"Log"> | string | null
    action?: StringWithAggregatesFilter<"Log"> | string
    message?: StringNullableWithAggregatesFilter<"Log"> | string | null
    userDocument?: StringNullableWithAggregatesFilter<"Log"> | string | null
    customerDocument?: StringNullableWithAggregatesFilter<"Log"> | string | null
    deviceInfo?: StringNullableWithAggregatesFilter<"Log"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"Log"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Log"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    name?: StringFilter<"Image"> | string
    altText?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    imageableId?: IntFilter<"Image"> | number
    imageableType?: StringFilter<"Image"> | string
    isActive?: BoolFilter<"Image"> | boolean
    createdAt?: DateTimeFilter<"Image"> | Date | string
    createdBy?: StringFilter<"Image"> | string
    updatedAt?: DateTimeNullableFilter<"Image"> | Date | string | null
    updatedBy?: StringNullableFilter<"Image"> | string | null
    deletedAt?: DateTimeNullableFilter<"Image"> | Date | string | null
    deletedBy?: StringNullableFilter<"Image"> | string | null
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    altText?: SortOrder
    url?: SortOrder
    imageableId?: SortOrder
    imageableType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _relevance?: ImageOrderByRelevanceInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    name?: StringFilter<"Image"> | string
    altText?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    imageableId?: IntFilter<"Image"> | number
    imageableType?: StringFilter<"Image"> | string
    isActive?: BoolFilter<"Image"> | boolean
    createdAt?: DateTimeFilter<"Image"> | Date | string
    createdBy?: StringFilter<"Image"> | string
    updatedAt?: DateTimeNullableFilter<"Image"> | Date | string | null
    updatedBy?: StringNullableFilter<"Image"> | string | null
    deletedAt?: DateTimeNullableFilter<"Image"> | Date | string | null
    deletedBy?: StringNullableFilter<"Image"> | string | null
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    altText?: SortOrder
    url?: SortOrder
    imageableId?: SortOrder
    imageableType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    name?: StringWithAggregatesFilter<"Image"> | string
    altText?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
    imageableId?: IntWithAggregatesFilter<"Image"> | number
    imageableType?: StringWithAggregatesFilter<"Image"> | string
    isActive?: BoolWithAggregatesFilter<"Image"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    createdBy?: StringWithAggregatesFilter<"Image"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Image"> | Date | string | null
    updatedBy?: StringNullableWithAggregatesFilter<"Image"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Image"> | Date | string | null
    deletedBy?: StringNullableWithAggregatesFilter<"Image"> | string | null
  }

  export type RestaurantConfigCreateInput = {
    name: string
    activeLogoId?: number | null
    currency?: string
    address?: string | null
    phone?: string | null
    email?: string | null
    taxName?: string | null
    taxIncluded?: boolean
    taxType?: string | null
    taxRate?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type RestaurantConfigUncheckedCreateInput = {
    id?: number
    name: string
    activeLogoId?: number | null
    currency?: string
    address?: string | null
    phone?: string | null
    email?: string | null
    taxName?: string | null
    taxIncluded?: boolean
    taxType?: string | null
    taxRate?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type RestaurantConfigUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    activeLogoId?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    taxName?: NullableStringFieldUpdateOperationsInput | string | null
    taxIncluded?: BoolFieldUpdateOperationsInput | boolean
    taxType?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activeLogoId?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    taxName?: NullableStringFieldUpdateOperationsInput | string | null
    taxIncluded?: BoolFieldUpdateOperationsInput | boolean
    taxType?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantConfigCreateManyInput = {
    id?: number
    name: string
    activeLogoId?: number | null
    currency?: string
    address?: string | null
    phone?: string | null
    email?: string | null
    taxName?: string | null
    taxIncluded?: boolean
    taxType?: string | null
    taxRate?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type RestaurantConfigUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    activeLogoId?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    taxName?: NullableStringFieldUpdateOperationsInput | string | null
    taxIncluded?: BoolFieldUpdateOperationsInput | boolean
    taxType?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activeLogoId?: NullableIntFieldUpdateOperationsInput | number | null
    currency?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    taxName?: NullableStringFieldUpdateOperationsInput | string | null
    taxIncluded?: BoolFieldUpdateOperationsInput | boolean
    taxType?: NullableStringFieldUpdateOperationsInput | string | null
    taxRate?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeCreateInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user?: UserCreateNestedOneWithoutCreatedThemesInput
    usersUsingThisTheme?: userProfileCreateNestedManyWithoutThemeInput
    customersUsingThisTheme?: CustomerProfileCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    userDocumentCreator?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    usersUsingThisTheme?: userProfileUncheckedCreateNestedManyWithoutThemeInput
    customersUsingThisTheme?: CustomerProfileUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutCreatedThemesNestedInput
    usersUsingThisTheme?: userProfileUpdateManyWithoutThemeNestedInput
    customersUsingThisTheme?: CustomerProfileUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userDocumentCreator?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    usersUsingThisTheme?: userProfileUncheckedUpdateManyWithoutThemeNestedInput
    customersUsingThisTheme?: CustomerProfileUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ThemeCreateManyInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    userDocumentCreator?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ThemeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userDocumentCreator?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantZoneCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tables?: TableCreateNestedManyWithoutRestaurantZoneInput
  }

  export type RestaurantZoneUncheckedCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tables?: TableUncheckedCreateNestedManyWithoutRestaurantZoneInput
  }

  export type RestaurantZoneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: TableUpdateManyWithoutRestaurantZoneNestedInput
  }

  export type RestaurantZoneUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: TableUncheckedUpdateManyWithoutRestaurantZoneNestedInput
  }

  export type RestaurantZoneCreateManyInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type RestaurantZoneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantZoneUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableStatusCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    tables?: TableCreateNestedManyWithoutTableStatusInput
  }

  export type TableStatusUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    tables?: TableUncheckedCreateNestedManyWithoutTableStatusInput
  }

  export type TableStatusUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: TableUpdateManyWithoutTableStatusNestedInput
  }

  export type TableStatusUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: TableUncheckedUpdateManyWithoutTableStatusNestedInput
  }

  export type TableStatusCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type TableStatusUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableStatusUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableCreateInput = {
    name: string
    capacity?: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    restaurantZone?: RestaurantZoneCreateNestedOneWithoutTablesInput
    tableStatus?: TableStatusCreateNestedOneWithoutTablesInput
    combineTableItems?: CombineTableItemCreateNestedManyWithoutTableInput
    commands?: CommandCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateInput = {
    id?: number
    name: string
    capacity?: number
    restaurantZoneName?: string | null
    tableStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTableItems?: CombineTableItemUncheckedCreateNestedManyWithoutTableInput
    commands?: CommandUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    restaurantZone?: RestaurantZoneUpdateOneWithoutTablesNestedInput
    tableStatus?: TableStatusUpdateOneRequiredWithoutTablesNestedInput
    combineTableItems?: CombineTableItemUpdateManyWithoutTableNestedInput
    commands?: CommandUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantZoneName?: NullableStringFieldUpdateOperationsInput | string | null
    tableStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTableItems?: CombineTableItemUncheckedUpdateManyWithoutTableNestedInput
    commands?: CommandUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableCreateManyInput = {
    id?: number
    name: string
    capacity?: number
    restaurantZoneName?: string | null
    tableStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type TableUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantZoneName?: NullableStringFieldUpdateOperationsInput | string | null
    tableStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableCreateInput = {
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combiner: UserCreateNestedOneWithoutCombinedTablesInput
    releaser?: UserCreateNestedOneWithoutReleasedTablesInput
    tables?: CombineTableItemCreateNestedManyWithoutCombineTableInput
    commands?: CommandCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableUncheckedCreateInput = {
    id?: number
    name: string
    userDocumentCombiner: string
    combinerAt?: Date | string
    isActive?: boolean
    userDocumentReleaser?: string | null
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tables?: CombineTableItemUncheckedCreateNestedManyWithoutCombineTableInput
    commands?: CommandUncheckedCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combiner?: UserUpdateOneRequiredWithoutCombinedTablesNestedInput
    releaser?: UserUpdateOneWithoutReleasedTablesNestedInput
    tables?: CombineTableItemUpdateManyWithoutCombineTableNestedInput
    commands?: CommandUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userDocumentCombiner?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userDocumentReleaser?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: CombineTableItemUncheckedUpdateManyWithoutCombineTableNestedInput
    commands?: CommandUncheckedUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableCreateManyInput = {
    id?: number
    name: string
    userDocumentCombiner: string
    combinerAt?: Date | string
    isActive?: boolean
    userDocumentReleaser?: string | null
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userDocumentCombiner?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userDocumentReleaser?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemCreateInput = {
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTable: CombineTableCreateNestedOneWithoutTablesInput
    table: TableCreateNestedOneWithoutCombineTableItemsInput
  }

  export type CombineTableItemUncheckedCreateInput = {
    id?: number
    combineTableId: number
    tableId: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableItemUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTable?: CombineTableUpdateOneRequiredWithoutTablesNestedInput
    table?: TableUpdateOneRequiredWithoutCombineTableItemsNestedInput
  }

  export type CombineTableItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    combineTableId?: IntFieldUpdateOperationsInput | number
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemCreateManyInput = {
    id?: number
    combineTableId: number
    tableId: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableItemUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    combineTableId?: IntFieldUpdateOperationsInput | number
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    products?: ProductCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type BrandUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypeCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    products?: ProductCreateNestedManyWithoutProductTypeInput
  }

  export type ProductTypeUncheckedCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutProductTypeInput
  }

  export type ProductTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUpdateManyWithoutProductTypeNestedInput
  }

  export type ProductTypeUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutProductTypeNestedInput
  }

  export type ProductTypeCreateManyInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypeUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCategoryCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    products?: ProductCreateNestedManyWithoutProductCategoryInput
  }

  export type ProductCategoryUncheckedCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutProductCategoryInput
  }

  export type ProductCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUpdateManyWithoutProductCategoryNestedInput
  }

  export type ProductCategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutProductCategoryNestedInput
  }

  export type ProductCategoryCreateManyInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductStatusCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    products?: ProductCreateNestedManyWithoutProductStatusInput
  }

  export type ProductStatusUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    products?: ProductUncheckedCreateNestedManyWithoutProductStatusInput
  }

  export type ProductStatusUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUpdateManyWithoutProductStatusNestedInput
  }

  export type ProductStatusUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    products?: ProductUncheckedUpdateManyWithoutProductStatusNestedInput
  }

  export type ProductStatusCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type ProductStatusUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductStatusUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productType: ProductTypeCreateNestedOneWithoutProductsInput
    productCategory: ProductCategoryCreateNestedOneWithoutProductsInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    productStatus?: ProductStatusCreateNestedOneWithoutProductsInput
    inventory?: InventoryCreateNestedOneWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory?: InventoryUncheckedCreateNestedOneWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: ProductTypeUpdateOneRequiredWithoutProductsNestedInput
    productCategory?: ProductCategoryUpdateOneRequiredWithoutProductsNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    productStatus?: ProductStatusUpdateOneRequiredWithoutProductsNestedInput
    inventory?: InventoryUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentTypeCreateInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    users?: UserCreateNestedManyWithoutDocumentTypeInput
    customers?: CustomerCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDocumentTypeInput
    customers?: CustomerUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutDocumentTypeNestedInput
    customers?: CustomerUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDocumentTypeNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeCreateManyInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type DocumentTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentTypeUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountStatusCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    users?: UserCreateNestedManyWithoutAccountStatusInput
    customers?: CustomerCreateNestedManyWithoutAccountStatusInput
  }

  export type AccountStatusUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    users?: UserUncheckedCreateNestedManyWithoutAccountStatusInput
    customers?: CustomerUncheckedCreateNestedManyWithoutAccountStatusInput
  }

  export type AccountStatusUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutAccountStatusNestedInput
    customers?: CustomerUpdateManyWithoutAccountStatusNestedInput
  }

  export type AccountStatusUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutAccountStatusNestedInput
    customers?: CustomerUncheckedUpdateManyWithoutAccountStatusNestedInput
  }

  export type AccountStatusCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type AccountStatusUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountStatusUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCategoryCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    permissions?: PermissionCreateNestedManyWithoutPermissioncategoryInput
  }

  export type PermissionCategoryUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    permissions?: PermissionUncheckedCreateNestedManyWithoutPermissioncategoryInput
  }

  export type PermissionCategoryUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: PermissionUpdateManyWithoutPermissioncategoryNestedInput
  }

  export type PermissionCategoryUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: PermissionUncheckedUpdateManyWithoutPermissioncategoryNestedInput
  }

  export type PermissionCategoryCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PermissionCategoryUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCategoryUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCreateInput = {
    code: string
    name: string
    description?: string | null
    createdAt?: Date | string
    createdBy: string
    permissioncategory: PermissionCategoryCreateNestedOneWithoutPermissionsInput
    rolePermissions?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    permissionCategoryCode: string
    createdAt?: Date | string
    createdBy: string
    rolePermissions?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    permissioncategory?: PermissionCategoryUpdateOneRequiredWithoutPermissionsNestedInput
    rolePermissions?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    permissionCategoryCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    rolePermissions?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    code: string
    name: string
    description?: string | null
    permissionCategoryCode: string
    createdAt?: Date | string
    createdBy: string
  }

  export type PermissionUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    permissionCategoryCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RoleCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolePermissionCreateInput = {
    createdAt?: Date | string
    createdBy: string
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: number
    roleName: string
    permissionCode: string
    createdAt?: Date | string
    createdBy: string
  }

  export type RolePermissionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
    permissionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyInput = {
    id?: number
    roleName: string
    permissionCode: string
    createdAt?: Date | string
    createdBy: string
  }

  export type RolePermissionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
    permissionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type UserUpdateManyMutationInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userProfileCreateInput = {
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user: UserCreateNestedOneWithoutUserProfileInput
    theme?: ThemeCreateNestedOneWithoutUsersUsingThisThemeInput
  }

  export type userProfileUncheckedCreateInput = {
    id?: number
    userDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    themeName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type userProfileUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutUserProfileNestedInput
    theme?: ThemeUpdateOneWithoutUsersUsingThisThemeNestedInput
  }

  export type userProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    themeName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userProfileCreateManyInput = {
    id?: number
    userDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    themeName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type userProfileUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    themeName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerCreateInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerUpdateManyMutationInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerUncheckedUpdateManyInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerProfileCreateInput = {
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    customer: CustomerCreateNestedOneWithoutProfileInput
    theme?: ThemeCreateNestedOneWithoutCustomersUsingThisThemeInput
  }

  export type CustomerProfileUncheckedCreateInput = {
    id?: number
    customerDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    themeName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerProfileUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutProfileNestedInput
    theme?: ThemeUpdateOneWithoutCustomersUsingThisThemeNestedInput
  }

  export type CustomerProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerProfileCreateManyInput = {
    id?: number
    customerDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    themeName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerProfileUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandStatusCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    commands?: CommandCreateNestedManyWithoutCommandStatusInput
  }

  export type CommandStatusUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    commands?: CommandUncheckedCreateNestedManyWithoutCommandStatusInput
  }

  export type CommandStatusUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    commands?: CommandUpdateManyWithoutCommandStatusNestedInput
  }

  export type CommandStatusUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    commands?: CommandUncheckedUpdateManyWithoutCommandStatusNestedInput
  }

  export type CommandStatusCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CommandStatusUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandStatusUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandCreateInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orders?: OrderCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandUpdateInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type CommandCreateManyInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CommandUpdateManyMutationInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderStatusCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    orders?: OrderCreateNestedManyWithoutOrderStatusInput
  }

  export type OrderStatusUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutOrderStatusInput
  }

  export type OrderStatusUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUpdateManyWithoutOrderStatusNestedInput
  }

  export type OrderStatusUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutOrderStatusNestedInput
  }

  export type OrderStatusCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type OrderStatusUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderStatusUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemStatusCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    orderItems?: OrderItemCreateNestedManyWithoutOrderItemStatusInput
  }

  export type OrderItemStatusUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderItemStatusInput
  }

  export type OrderItemStatusUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUpdateManyWithoutOrderItemStatusNestedInput
  }

  export type OrderItemStatusUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderItemStatusNestedInput
  }

  export type OrderItemStatusCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type OrderItemStatusUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemStatusUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderCreateInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateInput = {
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrderItemsInput
    order?: OrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
    orderItemStatus?: OrderItemStatusCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    commandId: number
    orderCode?: string | null
    productId: number
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrderItemsNestedInput
    order?: OrderUpdateOneWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    orderItemStatus?: OrderItemStatusUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyInput = {
    id?: number
    commandId: number
    orderCode?: string | null
    productId: number
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxCreateInput = {
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    opened: UserCreateNestedOneWithoutOpenedCashBoxesInput
    closed?: UserCreateNestedOneWithoutClosedCashBoxesInput
    cashboxMovements?: CashBoxMovementCreateNestedManyWithoutCashboxInput
    payments?: PaymentCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxUncheckedCreateInput = {
    id?: number
    userDocumentOpened: string
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    userDocumentClosed?: string | null
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashboxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutCashboxInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxUpdateInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    opened?: UserUpdateOneRequiredWithoutOpenedCashBoxesNestedInput
    closed?: UserUpdateOneWithoutClosedCashBoxesNestedInput
    cashboxMovements?: CashBoxMovementUpdateManyWithoutCashboxNestedInput
    payments?: PaymentUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocumentOpened?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashboxMovements?: CashBoxMovementUncheckedUpdateManyWithoutCashboxNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxCreateManyInput = {
    id?: number
    userDocumentOpened: string
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    userDocumentClosed?: string | null
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxUpdateManyMutationInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocumentOpened?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementTypeCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashBoxMovement?: CashBoxMovementCreateNestedManyWithoutCashboxMovementTypeInput
  }

  export type CashBoxMovementTypeUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashBoxMovement?: CashBoxMovementUncheckedCreateNestedManyWithoutCashboxMovementTypeInput
  }

  export type CashBoxMovementTypeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashBoxMovement?: CashBoxMovementUpdateManyWithoutCashboxMovementTypeNestedInput
  }

  export type CashBoxMovementTypeUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashBoxMovement?: CashBoxMovementUncheckedUpdateManyWithoutCashboxMovementTypeNestedInput
  }

  export type CashBoxMovementTypeCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementTypeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementTypeUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashbox: CashBoxCreateNestedOneWithoutCashboxMovementsInput
    user: UserCreateNestedOneWithoutCashBoxMovementsInput
    cashboxMovementType: CashBoxMovementTypeCreateNestedOneWithoutCashBoxMovementInput
  }

  export type CashBoxMovementUncheckedCreateInput = {
    id?: number
    cashboxId: number
    userDocument: string
    cashboxMovementTypeCode: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashbox?: CashBoxUpdateOneRequiredWithoutCashboxMovementsNestedInput
    user?: UserUpdateOneRequiredWithoutCashBoxMovementsNestedInput
    cashboxMovementType?: CashBoxMovementTypeUpdateOneRequiredWithoutCashBoxMovementNestedInput
  }

  export type CashBoxMovementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashboxId?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    cashboxMovementTypeCode?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementCreateManyInput = {
    id?: number
    cashboxId: number
    userDocument: string
    cashboxMovementTypeCode: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashboxId?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    cashboxMovementTypeCode?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentMethodCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    payments?: PaymentCreateNestedManyWithoutPaymentMethodInput
  }

  export type PaymentMethodUncheckedCreateInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutPaymentMethodInput
  }

  export type PaymentMethodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUpdateManyWithoutPaymentMethodNestedInput
  }

  export type PaymentMethodUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutPaymentMethodNestedInput
  }

  export type PaymentMethodCreateManyInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type PaymentMethodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentMethodUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    order: OrderCreateNestedOneWithoutPaymentInput
    cashBox: CashBoxCreateNestedOneWithoutPaymentsInput
    paymentMethod: PaymentMethodCreateNestedOneWithoutPaymentsInput
    receive: UserCreateNestedOneWithoutPaymentsReceivedInput
    paid?: CustomerCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentUpdateInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
    cashBox?: CashBoxUpdateOneRequiredWithoutPaymentsNestedInput
    paymentMethod?: PaymentMethodUpdateOneRequiredWithoutPaymentsNestedInput
    receive?: UserUpdateOneRequiredWithoutPaymentsReceivedNestedInput
    paid?: CustomerUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateManyInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentUpdateManyMutationInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementTypeCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    movements?: InventoryMovementCreateNestedManyWithoutInventoryMovementTypeInput
  }

  export type InventoryMovementTypeUncheckedCreateInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    movements?: InventoryMovementUncheckedCreateNestedManyWithoutInventoryMovementTypeInput
  }

  export type InventoryMovementTypeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    movements?: InventoryMovementUpdateManyWithoutInventoryMovementTypeNestedInput
  }

  export type InventoryMovementTypeUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    movements?: InventoryMovementUncheckedUpdateManyWithoutInventoryMovementTypeNestedInput
  }

  export type InventoryMovementTypeCreateManyInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type InventoryMovementTypeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementTypeUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryCreateInput = {
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    product: ProductCreateNestedOneWithoutInventoryInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: number
    productId: number
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUpdateInput = {
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutInventoryNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryCreateManyInput = {
    id?: number
    productId: number
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryUpdateManyMutationInput = {
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementCreateInput = {
    quantityMovement: number
    reasonDescription: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory: InventoryCreateNestedOneWithoutInventoryMovementsInput
    inventoryMovementType: InventoryMovementTypeCreateNestedOneWithoutMovementsInput
    user: UserCreateNestedOneWithoutInventoryMovementsInput
  }

  export type InventoryMovementUncheckedCreateInput = {
    id?: number
    inventoryId: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementUpdateInput = {
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutInventoryMovementsNestedInput
    inventoryMovementType?: InventoryMovementTypeUpdateOneRequiredWithoutMovementsNestedInput
    user?: UserUpdateOneRequiredWithoutInventoryMovementsNestedInput
  }

  export type InventoryMovementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    inventoryMovementTypeCode?: StringFieldUpdateOperationsInput | string
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    userDocument?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementCreateManyInput = {
    id?: number
    inventoryId: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementUpdateManyMutationInput = {
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    inventoryMovementTypeCode?: StringFieldUpdateOperationsInput | string
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    userDocument?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderSequenceCreateInput = {
    sequenceYear: number
    sequenceMonth: number
    sequenceDay: number
    lastOrderNumber?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrderSequenceUncheckedCreateInput = {
    id?: number
    sequenceYear: number
    sequenceMonth: number
    sequenceDay: number
    lastOrderNumber?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrderSequenceUpdateInput = {
    sequenceYear?: IntFieldUpdateOperationsInput | number
    sequenceMonth?: IntFieldUpdateOperationsInput | number
    sequenceDay?: IntFieldUpdateOperationsInput | number
    lastOrderNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderSequenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sequenceYear?: IntFieldUpdateOperationsInput | number
    sequenceMonth?: IntFieldUpdateOperationsInput | number
    sequenceDay?: IntFieldUpdateOperationsInput | number
    lastOrderNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderSequenceCreateManyInput = {
    id?: number
    sequenceYear: number
    sequenceMonth: number
    sequenceDay: number
    lastOrderNumber?: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrderSequenceUpdateManyMutationInput = {
    sequenceYear?: IntFieldUpdateOperationsInput | number
    sequenceMonth?: IntFieldUpdateOperationsInput | number
    sequenceDay?: IntFieldUpdateOperationsInput | number
    lastOrderNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderSequenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sequenceYear?: IntFieldUpdateOperationsInput | number
    sequenceMonth?: IntFieldUpdateOperationsInput | number
    sequenceDay?: IntFieldUpdateOperationsInput | number
    lastOrderNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user?: UserCreateNestedOneWithoutSessionsInput
    customer?: CustomerCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userDocument?: string | null
    customerDocument?: string | null
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutSessionsNestedInput
    customer?: CustomerUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id?: string
    userDocument?: string | null
    customerDocument?: string | null
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogCreateInput = {
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLogsInput
    customer?: CustomerCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateInput = {
    id?: number
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    userDocument?: string | null
    customerDocument?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type LogUpdateInput = {
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogsNestedInput
    customer?: CustomerUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogCreateManyInput = {
    id?: number
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    userDocument?: string | null
    customerDocument?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type LogUpdateManyMutationInput = {
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    name: string
    altText: string
    url: string
    imageableId: number
    imageableType: string
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    name: string
    altText: string
    url: string
    imageableId: number
    imageableType: string
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ImageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    imageableId?: IntFieldUpdateOperationsInput | number
    imageableType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    imageableId?: IntFieldUpdateOperationsInput | number
    imageableType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImageCreateManyInput = {
    id?: number
    name: string
    altText: string
    url: string
    imageableId: number
    imageableType: string
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ImageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    imageableId?: IntFieldUpdateOperationsInput | number
    imageableType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    altText?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    imageableId?: IntFieldUpdateOperationsInput | number
    imageableType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RestaurantConfigOrderByRelevanceInput = {
    fields: RestaurantConfigOrderByRelevanceFieldEnum | RestaurantConfigOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RestaurantConfigCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    activeLogoId?: SortOrder
    currency?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    taxName?: SortOrder
    taxIncluded?: SortOrder
    taxType?: SortOrder
    taxRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type RestaurantConfigAvgOrderByAggregateInput = {
    id?: SortOrder
    activeLogoId?: SortOrder
    taxRate?: SortOrder
  }

  export type RestaurantConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    activeLogoId?: SortOrder
    currency?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    taxName?: SortOrder
    taxIncluded?: SortOrder
    taxType?: SortOrder
    taxRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type RestaurantConfigMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    activeLogoId?: SortOrder
    currency?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    taxName?: SortOrder
    taxIncluded?: SortOrder
    taxType?: SortOrder
    taxRate?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type RestaurantConfigSumOrderByAggregateInput = {
    id?: SortOrder
    activeLogoId?: SortOrder
    taxRate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserProfileListRelationFilter = {
    every?: userProfileWhereInput
    some?: userProfileWhereInput
    none?: userProfileWhereInput
  }

  export type CustomerProfileListRelationFilter = {
    every?: CustomerProfileWhereInput
    some?: CustomerProfileWhereInput
    none?: CustomerProfileWhereInput
  }

  export type userProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThemeOrderByRelevanceInput = {
    fields: ThemeOrderByRelevanceFieldEnum | ThemeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ThemeCountOrderByAggregateInput = {
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    accentColor?: SortOrder
    neutralColor?: SortOrder
    isSystem?: SortOrder
    isPublic?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ThemeMaxOrderByAggregateInput = {
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    accentColor?: SortOrder
    neutralColor?: SortOrder
    isSystem?: SortOrder
    isPublic?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ThemeMinOrderByAggregateInput = {
    name?: SortOrder
    primaryColor?: SortOrder
    secondaryColor?: SortOrder
    accentColor?: SortOrder
    neutralColor?: SortOrder
    isSystem?: SortOrder
    isPublic?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type TableListRelationFilter = {
    every?: TableWhereInput
    some?: TableWhereInput
    none?: TableWhereInput
  }

  export type TableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RestaurantZoneOrderByRelevanceInput = {
    fields: RestaurantZoneOrderByRelevanceFieldEnum | RestaurantZoneOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RestaurantZoneCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type RestaurantZoneMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type RestaurantZoneMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type TableStatusOrderByRelevanceInput = {
    fields: TableStatusOrderByRelevanceFieldEnum | TableStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TableStatusCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TableStatusMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TableStatusMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type RestaurantZoneNullableScalarRelationFilter = {
    is?: RestaurantZoneWhereInput | null
    isNot?: RestaurantZoneWhereInput | null
  }

  export type TableStatusScalarRelationFilter = {
    is?: TableStatusWhereInput
    isNot?: TableStatusWhereInput
  }

  export type CombineTableItemListRelationFilter = {
    every?: CombineTableItemWhereInput
    some?: CombineTableItemWhereInput
    none?: CombineTableItemWhereInput
  }

  export type CommandListRelationFilter = {
    every?: CommandWhereInput
    some?: CommandWhereInput
    none?: CommandWhereInput
  }

  export type CombineTableItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommandOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TableOrderByRelevanceInput = {
    fields: TableOrderByRelevanceFieldEnum | TableOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TableCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    restaurantZoneName?: SortOrder
    tableStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type TableAvgOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type TableMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    restaurantZoneName?: SortOrder
    tableStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type TableMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    capacity?: SortOrder
    restaurantZoneName?: SortOrder
    tableStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type TableSumOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CombineTableOrderByRelevanceInput = {
    fields: CombineTableOrderByRelevanceFieldEnum | CombineTableOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CombineTableCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userDocumentCombiner?: SortOrder
    combinerAt?: SortOrder
    isActive?: SortOrder
    userDocumentReleaser?: SortOrder
    releasedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CombineTableAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CombineTableMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userDocumentCombiner?: SortOrder
    combinerAt?: SortOrder
    isActive?: SortOrder
    userDocumentReleaser?: SortOrder
    releasedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CombineTableMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userDocumentCombiner?: SortOrder
    combinerAt?: SortOrder
    isActive?: SortOrder
    userDocumentReleaser?: SortOrder
    releasedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CombineTableSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CombineTableScalarRelationFilter = {
    is?: CombineTableWhereInput
    isNot?: CombineTableWhereInput
  }

  export type TableScalarRelationFilter = {
    is?: TableWhereInput
    isNot?: TableWhereInput
  }

  export type CombineTableItemOrderByRelevanceInput = {
    fields: CombineTableItemOrderByRelevanceFieldEnum | CombineTableItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CombineTableItemCombineTableIdTableIdCompoundUniqueInput = {
    combineTableId: number
    tableId: number
  }

  export type CombineTableItemCountOrderByAggregateInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CombineTableItemAvgOrderByAggregateInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
  }

  export type CombineTableItemMaxOrderByAggregateInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CombineTableItemMinOrderByAggregateInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CombineTableItemSumOrderByAggregateInput = {
    id?: SortOrder
    combineTableId?: SortOrder
    tableId?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandOrderByRelevanceInput = {
    fields: BrandOrderByRelevanceFieldEnum | BrandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BrandCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductTypeOrderByRelevanceInput = {
    fields: ProductTypeOrderByRelevanceFieldEnum | ProductTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductTypeCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductTypeMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductTypeMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductCategoryOrderByRelevanceInput = {
    fields: ProductCategoryOrderByRelevanceFieldEnum | ProductCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductCategoryCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductCategoryMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductCategoryMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductStatusOrderByRelevanceInput = {
    fields: ProductStatusOrderByRelevanceFieldEnum | ProductStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductStatusCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProductStatusMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProductStatusMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type ProductTypeScalarRelationFilter = {
    is?: ProductTypeWhereInput
    isNot?: ProductTypeWhereInput
  }

  export type ProductCategoryScalarRelationFilter = {
    is?: ProductCategoryWhereInput
    isNot?: ProductCategoryWhereInput
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type ProductStatusScalarRelationFilter = {
    is?: ProductStatusWhereInput
    isNot?: ProductStatusWhereInput
  }

  export type InventoryNullableScalarRelationFilter = {
    is?: InventoryWhereInput | null
    isNot?: InventoryWhereInput | null
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelevanceInput = {
    fields: ProductOrderByRelevanceFieldEnum | ProductOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    offerPrice?: SortOrder
    productTypeName?: SortOrder
    productCategoryName?: SortOrder
    brandName?: SortOrder
    productStatusCode?: SortOrder
    mainImageId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    offerPrice?: SortOrder
    mainImageId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    offerPrice?: SortOrder
    productTypeName?: SortOrder
    productCategoryName?: SortOrder
    brandName?: SortOrder
    productStatusCode?: SortOrder
    mainImageId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    offerPrice?: SortOrder
    productTypeName?: SortOrder
    productCategoryName?: SortOrder
    brandName?: SortOrder
    productStatusCode?: SortOrder
    mainImageId?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    offerPrice?: SortOrder
    mainImageId?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentTypeOrderByRelevanceInput = {
    fields: DocumentTypeOrderByRelevanceFieldEnum | DocumentTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DocumentTypeCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    digitLength?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type DocumentTypeAvgOrderByAggregateInput = {
    digitLength?: SortOrder
  }

  export type DocumentTypeMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    digitLength?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type DocumentTypeMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    digitLength?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type DocumentTypeSumOrderByAggregateInput = {
    digitLength?: SortOrder
  }

  export type AccountStatusOrderByRelevanceInput = {
    fields: AccountStatusOrderByRelevanceFieldEnum | AccountStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountStatusCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type AccountStatusMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type AccountStatusMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionListRelationFilter = {
    every?: PermissionWhereInput
    some?: PermissionWhereInput
    none?: PermissionWhereInput
  }

  export type PermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionCategoryOrderByRelevanceInput = {
    fields: PermissionCategoryOrderByRelevanceFieldEnum | PermissionCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PermissionCategoryCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionCategoryMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionCategoryMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PermissionCategoryScalarRelationFilter = {
    is?: PermissionCategoryWhereInput
    isNot?: PermissionCategoryWhereInput
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionOrderByRelevanceInput = {
    fields: PermissionOrderByRelevanceFieldEnum | PermissionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PermissionCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    permissionCategoryCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    permissionCategoryCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    permissionCategoryCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type RoleOrderByRelevanceInput = {
    fields: RoleOrderByRelevanceFieldEnum | RoleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RoleCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionOrderByRelevanceInput = {
    fields: RolePermissionOrderByRelevanceFieldEnum | RolePermissionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type RolePermissionRoleNamePermissionCodeCompoundUniqueInput = {
    roleName: string
    permissionCode: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleName?: SortOrder
    permissionCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type RolePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleName?: SortOrder
    permissionCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleName?: SortOrder
    permissionCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
  }

  export type RolePermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DocumentTypeScalarRelationFilter = {
    is?: DocumentTypeWhereInput
    isNot?: DocumentTypeWhereInput
  }

  export type AccountStatusScalarRelationFilter = {
    is?: AccountStatusWhereInput
    isNot?: AccountStatusWhereInput
  }

  export type ThemeListRelationFilter = {
    every?: ThemeWhereInput
    some?: ThemeWhereInput
    none?: ThemeWhereInput
  }

  export type CombineTableListRelationFilter = {
    every?: CombineTableWhereInput
    some?: CombineTableWhereInput
    none?: CombineTableWhereInput
  }

  export type UserProfileNullableScalarRelationFilter = {
    is?: userProfileWhereInput | null
    isNot?: userProfileWhereInput | null
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type CashBoxListRelationFilter = {
    every?: CashBoxWhereInput
    some?: CashBoxWhereInput
    none?: CashBoxWhereInput
  }

  export type CashBoxMovementListRelationFilter = {
    every?: CashBoxMovementWhereInput
    some?: CashBoxMovementWhereInput
    none?: CashBoxMovementWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type InventoryMovementListRelationFilter = {
    every?: InventoryMovementWhereInput
    some?: InventoryMovementWhereInput
    none?: InventoryMovementWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type ThemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CombineTableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CashBoxOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CashBoxMovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryMovementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pin?: SortOrder
    documentTypeName?: SortOrder
    roleName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pin?: SortOrder
    documentTypeName?: SortOrder
    roleName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    pin?: SortOrder
    documentTypeName?: SortOrder
    roleName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ThemeNullableScalarRelationFilter = {
    is?: ThemeWhereInput | null
    isNot?: ThemeWhereInput | null
  }

  export type userProfileOrderByRelevanceInput = {
    fields: userProfileOrderByRelevanceFieldEnum | userProfileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    hireDate?: SortOrder
    salary?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    themeName?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type userProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
  }

  export type userProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    hireDate?: SortOrder
    salary?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    themeName?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type userProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    hireDate?: SortOrder
    salary?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    themeName?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type userProfileSumOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
  }

  export type CustomerProfileNullableScalarRelationFilter = {
    is?: CustomerProfileWhereInput | null
    isNot?: CustomerProfileWhereInput | null
  }

  export type CustomerOrderByRelevanceInput = {
    fields: CustomerOrderByRelevanceFieldEnum | CustomerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CustomerCountOrderByAggregateInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    documentTypeName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    documentTypeName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    document?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    documentTypeName?: SortOrder
    accountStatusCode?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type CustomerProfileOrderByRelevanceInput = {
    fields: CustomerProfileOrderByRelevanceFieldEnum | CustomerProfileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CustomerProfileCountOrderByAggregateInput = {
    id?: SortOrder
    customerDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    themeName?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CustomerProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    customerDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    themeName?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CustomerProfileMinOrderByAggregateInput = {
    id?: SortOrder
    customerDocument?: SortOrder
    fullName?: SortOrder
    phoneNumber?: SortOrder
    birthDate?: SortOrder
    themeName?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CustomerProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommandStatusOrderByRelevanceInput = {
    fields: CommandStatusOrderByRelevanceFieldEnum | CommandStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CommandStatusCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CommandStatusMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CommandStatusMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TableNullableScalarRelationFilter = {
    is?: TableWhereInput | null
    isNot?: TableWhereInput | null
  }

  export type CombineTableNullableScalarRelationFilter = {
    is?: CombineTableWhereInput | null
    isNot?: CombineTableWhereInput | null
  }

  export type CommandStatusScalarRelationFilter = {
    is?: CommandStatusWhereInput
    isNot?: CommandStatusWhereInput
  }

  export type CommandOrderByRelevanceInput = {
    fields: CommandOrderByRelevanceFieldEnum | CommandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CommandCountOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    combineTableId?: SortOrder
    userDocumentOpener?: SortOrder
    openedAt?: SortOrder
    commandStatusCode?: SortOrder
    notes?: SortOrder
    userDocumentCloser?: SortOrder
    closedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CommandAvgOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    combineTableId?: SortOrder
  }

  export type CommandMaxOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    combineTableId?: SortOrder
    userDocumentOpener?: SortOrder
    openedAt?: SortOrder
    commandStatusCode?: SortOrder
    notes?: SortOrder
    userDocumentCloser?: SortOrder
    closedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CommandMinOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    combineTableId?: SortOrder
    userDocumentOpener?: SortOrder
    openedAt?: SortOrder
    commandStatusCode?: SortOrder
    notes?: SortOrder
    userDocumentCloser?: SortOrder
    closedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type CommandSumOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
    combineTableId?: SortOrder
  }

  export type OrderStatusOrderByRelevanceInput = {
    fields: OrderStatusOrderByRelevanceFieldEnum | OrderStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderStatusCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OrderStatusMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OrderStatusMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OrderItemStatusOrderByRelevanceInput = {
    fields: OrderItemStatusOrderByRelevanceFieldEnum | OrderItemStatusOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderItemStatusCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OrderItemStatusMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type OrderItemStatusMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CommandScalarRelationFilter = {
    is?: CommandWhereInput
    isNot?: CommandWhereInput
  }

  export type OrderStatusScalarRelationFilter = {
    is?: OrderStatusWhereInput
    isNot?: OrderStatusWhereInput
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: PaymentWhereInput | null
    isNot?: PaymentWhereInput | null
  }

  export type OrderOrderByRelevanceInput = {
    fields: OrderOrderByRelevanceFieldEnum | OrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderCountOrderByAggregateInput = {
    code?: SortOrder
    commandId?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    customerDocument?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
    orderStatusCode?: SortOrder
    userDocumentCloser?: SortOrder
    closedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    commandId?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    code?: SortOrder
    commandId?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    customerDocument?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
    orderStatusCode?: SortOrder
    userDocumentCloser?: SortOrder
    closedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    code?: SortOrder
    commandId?: SortOrder
    userDocumentCreator?: SortOrder
    createdAt?: SortOrder
    customerDocument?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
    orderStatusCode?: SortOrder
    userDocumentCloser?: SortOrder
    closedAt?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    commandId?: SortOrder
    subtotal?: SortOrder
    discount?: SortOrder
    taxAmount?: SortOrder
    totalAmount?: SortOrder
  }

  export type OrderNullableScalarRelationFilter = {
    is?: OrderWhereInput | null
    isNot?: OrderWhereInput | null
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type OrderItemStatusScalarRelationFilter = {
    is?: OrderItemStatusWhereInput
    isNot?: OrderItemStatusWhereInput
  }

  export type OrderItemOrderByRelevanceInput = {
    fields: OrderItemOrderByRelevanceFieldEnum | OrderItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    commandId?: SortOrder
    orderCode?: SortOrder
    productId?: SortOrder
    orderItemStatusCode?: SortOrder
    quantity?: SortOrder
    specialInstructions?: SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    commandId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    commandId?: SortOrder
    orderCode?: SortOrder
    productId?: SortOrder
    orderItemStatusCode?: SortOrder
    quantity?: SortOrder
    specialInstructions?: SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    commandId?: SortOrder
    orderCode?: SortOrder
    productId?: SortOrder
    orderItemStatusCode?: SortOrder
    quantity?: SortOrder
    specialInstructions?: SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    commandId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    discount?: SortOrder
    totalPrice?: SortOrder
  }

  export type CashBoxOrderByRelevanceInput = {
    fields: CashBoxOrderByRelevanceFieldEnum | CashBoxOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CashBoxCountOrderByAggregateInput = {
    id?: SortOrder
    userDocumentOpened?: SortOrder
    openedAt?: SortOrder
    initialAmount?: SortOrder
    userDocumentClosed?: SortOrder
    closedAt?: SortOrder
    finalAmount?: SortOrder
    totalSales?: SortOrder
    notes?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxAvgOrderByAggregateInput = {
    id?: SortOrder
    initialAmount?: SortOrder
    finalAmount?: SortOrder
    totalSales?: SortOrder
  }

  export type CashBoxMaxOrderByAggregateInput = {
    id?: SortOrder
    userDocumentOpened?: SortOrder
    openedAt?: SortOrder
    initialAmount?: SortOrder
    userDocumentClosed?: SortOrder
    closedAt?: SortOrder
    finalAmount?: SortOrder
    totalSales?: SortOrder
    notes?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxMinOrderByAggregateInput = {
    id?: SortOrder
    userDocumentOpened?: SortOrder
    openedAt?: SortOrder
    initialAmount?: SortOrder
    userDocumentClosed?: SortOrder
    closedAt?: SortOrder
    finalAmount?: SortOrder
    totalSales?: SortOrder
    notes?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxSumOrderByAggregateInput = {
    id?: SortOrder
    initialAmount?: SortOrder
    finalAmount?: SortOrder
    totalSales?: SortOrder
  }

  export type CashBoxMovementTypeOrderByRelevanceInput = {
    fields: CashBoxMovementTypeOrderByRelevanceFieldEnum | CashBoxMovementTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CashBoxMovementTypeCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxMovementTypeMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxMovementTypeMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxScalarRelationFilter = {
    is?: CashBoxWhereInput
    isNot?: CashBoxWhereInput
  }

  export type CashBoxMovementTypeScalarRelationFilter = {
    is?: CashBoxMovementTypeWhereInput
    isNot?: CashBoxMovementTypeWhereInput
  }

  export type CashBoxMovementOrderByRelevanceInput = {
    fields: CashBoxMovementOrderByRelevanceFieldEnum | CashBoxMovementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CashBoxMovementCountOrderByAggregateInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    userDocument?: SortOrder
    cashboxMovementTypeCode?: SortOrder
    amount?: SortOrder
    concept?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxMovementAvgOrderByAggregateInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    amount?: SortOrder
  }

  export type CashBoxMovementMaxOrderByAggregateInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    userDocument?: SortOrder
    cashboxMovementTypeCode?: SortOrder
    amount?: SortOrder
    concept?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxMovementMinOrderByAggregateInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    userDocument?: SortOrder
    cashboxMovementTypeCode?: SortOrder
    amount?: SortOrder
    concept?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type CashBoxMovementSumOrderByAggregateInput = {
    id?: SortOrder
    cashboxId?: SortOrder
    amount?: SortOrder
  }

  export type PaymentMethodOrderByRelevanceInput = {
    fields: PaymentMethodOrderByRelevanceFieldEnum | PaymentMethodOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PaymentMethodCountOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type PaymentMethodMaxOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type PaymentMethodMinOrderByAggregateInput = {
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type PaymentMethodScalarRelationFilter = {
    is?: PaymentMethodWhereInput
    isNot?: PaymentMethodWhereInput
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type PaymentOrderByRelevanceInput = {
    fields: PaymentOrderByRelevanceFieldEnum | PaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    orderCode?: SortOrder
    cashBoxId?: SortOrder
    paymentMethodName?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrder
    changeAmount?: SortOrder
    transactionNumber?: SortOrder
    notes?: SortOrder
    userDocumentReceive?: SortOrder
    customerDocumentPaid?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    cashBoxId?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrder
    changeAmount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    orderCode?: SortOrder
    cashBoxId?: SortOrder
    paymentMethodName?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrder
    changeAmount?: SortOrder
    transactionNumber?: SortOrder
    notes?: SortOrder
    userDocumentReceive?: SortOrder
    customerDocumentPaid?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    orderCode?: SortOrder
    cashBoxId?: SortOrder
    paymentMethodName?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrder
    changeAmount?: SortOrder
    transactionNumber?: SortOrder
    notes?: SortOrder
    userDocumentReceive?: SortOrder
    customerDocumentPaid?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    cashBoxId?: SortOrder
    totalAmount?: SortOrder
    receivedAmount?: SortOrder
    changeAmount?: SortOrder
  }

  export type InventoryMovementTypeOrderByRelevanceInput = {
    fields: InventoryMovementTypeOrderByRelevanceFieldEnum | InventoryMovementTypeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InventoryMovementTypeCountOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type InventoryMovementTypeMaxOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type InventoryMovementTypeMinOrderByAggregateInput = {
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type InventoryOrderByRelevanceInput = {
    fields: InventoryOrderByRelevanceFieldEnum | InventoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InventoryProductIdStorageLocationCompoundUniqueInput = {
    productId: number
    storageLocation: string
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
    storageLocation?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
    storageLocation?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
    storageLocation?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    currentQuantity?: SortOrder
    minimumStock?: SortOrder
  }

  export type InventoryScalarRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type InventoryMovementTypeScalarRelationFilter = {
    is?: InventoryMovementTypeWhereInput
    isNot?: InventoryMovementTypeWhereInput
  }

  export type InventoryMovementOrderByRelevanceInput = {
    fields: InventoryMovementOrderByRelevanceFieldEnum | InventoryMovementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InventoryMovementCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    inventoryMovementTypeCode?: SortOrder
    quantityMovement?: SortOrder
    reasonDescription?: SortOrder
    userDocument?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type InventoryMovementAvgOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    quantityMovement?: SortOrder
  }

  export type InventoryMovementMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    inventoryMovementTypeCode?: SortOrder
    quantityMovement?: SortOrder
    reasonDescription?: SortOrder
    userDocument?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type InventoryMovementMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    inventoryMovementTypeCode?: SortOrder
    quantityMovement?: SortOrder
    reasonDescription?: SortOrder
    userDocument?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type InventoryMovementSumOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    quantityMovement?: SortOrder
  }

  export type OrderSequenceSequenceYearSequenceMonthSequenceDayCompoundUniqueInput = {
    sequenceYear: number
    sequenceMonth: number
    sequenceDay: number
  }

  export type OrderSequenceCountOrderByAggregateInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSequenceAvgOrderByAggregateInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
  }

  export type OrderSequenceMaxOrderByAggregateInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSequenceMinOrderByAggregateInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSequenceSumOrderByAggregateInput = {
    id?: SortOrder
    sequenceYear?: SortOrder
    sequenceMonth?: SortOrder
    sequenceDay?: SortOrder
    lastOrderNumber?: SortOrder
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userDocument?: SortOrder
    customerDocument?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    closedAt?: SortOrder
    closedBy?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userDocument?: SortOrder
    customerDocument?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    closedAt?: SortOrder
    closedBy?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userDocument?: SortOrder
    customerDocument?: SortOrder
    token?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    closedAt?: SortOrder
    closedBy?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type LogOrderByRelevanceInput = {
    fields: LogOrderByRelevanceFieldEnum | LogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    message?: SortOrder
    userDocument?: SortOrder
    customerDocument?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    message?: SortOrder
    userDocument?: SortOrder
    customerDocument?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    entityName?: SortOrder
    entityId?: SortOrder
    action?: SortOrder
    message?: SortOrder
    userDocument?: SortOrder
    customerDocument?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    createdAt?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ImageOrderByRelevanceInput = {
    fields: ImageOrderByRelevanceFieldEnum | ImageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    altText?: SortOrder
    url?: SortOrder
    imageableId?: SortOrder
    imageableType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    imageableId?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    altText?: SortOrder
    url?: SortOrder
    imageableId?: SortOrder
    imageableType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    altText?: SortOrder
    url?: SortOrder
    imageableId?: SortOrder
    imageableType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    deletedAt?: SortOrder
    deletedBy?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    imageableId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutCreatedThemesInput = {
    create?: XOR<UserCreateWithoutCreatedThemesInput, UserUncheckedCreateWithoutCreatedThemesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedThemesInput
    connect?: UserWhereUniqueInput
  }

  export type userProfileCreateNestedManyWithoutThemeInput = {
    create?: XOR<userProfileCreateWithoutThemeInput, userProfileUncheckedCreateWithoutThemeInput> | userProfileCreateWithoutThemeInput[] | userProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: userProfileCreateOrConnectWithoutThemeInput | userProfileCreateOrConnectWithoutThemeInput[]
    createMany?: userProfileCreateManyThemeInputEnvelope
    connect?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
  }

  export type CustomerProfileCreateNestedManyWithoutThemeInput = {
    create?: XOR<CustomerProfileCreateWithoutThemeInput, CustomerProfileUncheckedCreateWithoutThemeInput> | CustomerProfileCreateWithoutThemeInput[] | CustomerProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutThemeInput | CustomerProfileCreateOrConnectWithoutThemeInput[]
    createMany?: CustomerProfileCreateManyThemeInputEnvelope
    connect?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
  }

  export type userProfileUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<userProfileCreateWithoutThemeInput, userProfileUncheckedCreateWithoutThemeInput> | userProfileCreateWithoutThemeInput[] | userProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: userProfileCreateOrConnectWithoutThemeInput | userProfileCreateOrConnectWithoutThemeInput[]
    createMany?: userProfileCreateManyThemeInputEnvelope
    connect?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
  }

  export type CustomerProfileUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<CustomerProfileCreateWithoutThemeInput, CustomerProfileUncheckedCreateWithoutThemeInput> | CustomerProfileCreateWithoutThemeInput[] | CustomerProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutThemeInput | CustomerProfileCreateOrConnectWithoutThemeInput[]
    createMany?: CustomerProfileCreateManyThemeInputEnvelope
    connect?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatedThemesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedThemesInput, UserUncheckedCreateWithoutCreatedThemesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedThemesInput
    upsert?: UserUpsertWithoutCreatedThemesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedThemesInput, UserUpdateWithoutCreatedThemesInput>, UserUncheckedUpdateWithoutCreatedThemesInput>
  }

  export type userProfileUpdateManyWithoutThemeNestedInput = {
    create?: XOR<userProfileCreateWithoutThemeInput, userProfileUncheckedCreateWithoutThemeInput> | userProfileCreateWithoutThemeInput[] | userProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: userProfileCreateOrConnectWithoutThemeInput | userProfileCreateOrConnectWithoutThemeInput[]
    upsert?: userProfileUpsertWithWhereUniqueWithoutThemeInput | userProfileUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: userProfileCreateManyThemeInputEnvelope
    set?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    disconnect?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    delete?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    connect?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    update?: userProfileUpdateWithWhereUniqueWithoutThemeInput | userProfileUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: userProfileUpdateManyWithWhereWithoutThemeInput | userProfileUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: userProfileScalarWhereInput | userProfileScalarWhereInput[]
  }

  export type CustomerProfileUpdateManyWithoutThemeNestedInput = {
    create?: XOR<CustomerProfileCreateWithoutThemeInput, CustomerProfileUncheckedCreateWithoutThemeInput> | CustomerProfileCreateWithoutThemeInput[] | CustomerProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutThemeInput | CustomerProfileCreateOrConnectWithoutThemeInput[]
    upsert?: CustomerProfileUpsertWithWhereUniqueWithoutThemeInput | CustomerProfileUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: CustomerProfileCreateManyThemeInputEnvelope
    set?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    disconnect?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    delete?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    connect?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    update?: CustomerProfileUpdateWithWhereUniqueWithoutThemeInput | CustomerProfileUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: CustomerProfileUpdateManyWithWhereWithoutThemeInput | CustomerProfileUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: CustomerProfileScalarWhereInput | CustomerProfileScalarWhereInput[]
  }

  export type userProfileUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<userProfileCreateWithoutThemeInput, userProfileUncheckedCreateWithoutThemeInput> | userProfileCreateWithoutThemeInput[] | userProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: userProfileCreateOrConnectWithoutThemeInput | userProfileCreateOrConnectWithoutThemeInput[]
    upsert?: userProfileUpsertWithWhereUniqueWithoutThemeInput | userProfileUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: userProfileCreateManyThemeInputEnvelope
    set?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    disconnect?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    delete?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    connect?: userProfileWhereUniqueInput | userProfileWhereUniqueInput[]
    update?: userProfileUpdateWithWhereUniqueWithoutThemeInput | userProfileUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: userProfileUpdateManyWithWhereWithoutThemeInput | userProfileUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: userProfileScalarWhereInput | userProfileScalarWhereInput[]
  }

  export type CustomerProfileUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<CustomerProfileCreateWithoutThemeInput, CustomerProfileUncheckedCreateWithoutThemeInput> | CustomerProfileCreateWithoutThemeInput[] | CustomerProfileUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutThemeInput | CustomerProfileCreateOrConnectWithoutThemeInput[]
    upsert?: CustomerProfileUpsertWithWhereUniqueWithoutThemeInput | CustomerProfileUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: CustomerProfileCreateManyThemeInputEnvelope
    set?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    disconnect?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    delete?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    connect?: CustomerProfileWhereUniqueInput | CustomerProfileWhereUniqueInput[]
    update?: CustomerProfileUpdateWithWhereUniqueWithoutThemeInput | CustomerProfileUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: CustomerProfileUpdateManyWithWhereWithoutThemeInput | CustomerProfileUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: CustomerProfileScalarWhereInput | CustomerProfileScalarWhereInput[]
  }

  export type TableCreateNestedManyWithoutRestaurantZoneInput = {
    create?: XOR<TableCreateWithoutRestaurantZoneInput, TableUncheckedCreateWithoutRestaurantZoneInput> | TableCreateWithoutRestaurantZoneInput[] | TableUncheckedCreateWithoutRestaurantZoneInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantZoneInput | TableCreateOrConnectWithoutRestaurantZoneInput[]
    createMany?: TableCreateManyRestaurantZoneInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type TableUncheckedCreateNestedManyWithoutRestaurantZoneInput = {
    create?: XOR<TableCreateWithoutRestaurantZoneInput, TableUncheckedCreateWithoutRestaurantZoneInput> | TableCreateWithoutRestaurantZoneInput[] | TableUncheckedCreateWithoutRestaurantZoneInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantZoneInput | TableCreateOrConnectWithoutRestaurantZoneInput[]
    createMany?: TableCreateManyRestaurantZoneInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type TableUpdateManyWithoutRestaurantZoneNestedInput = {
    create?: XOR<TableCreateWithoutRestaurantZoneInput, TableUncheckedCreateWithoutRestaurantZoneInput> | TableCreateWithoutRestaurantZoneInput[] | TableUncheckedCreateWithoutRestaurantZoneInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantZoneInput | TableCreateOrConnectWithoutRestaurantZoneInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutRestaurantZoneInput | TableUpsertWithWhereUniqueWithoutRestaurantZoneInput[]
    createMany?: TableCreateManyRestaurantZoneInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutRestaurantZoneInput | TableUpdateWithWhereUniqueWithoutRestaurantZoneInput[]
    updateMany?: TableUpdateManyWithWhereWithoutRestaurantZoneInput | TableUpdateManyWithWhereWithoutRestaurantZoneInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type TableUncheckedUpdateManyWithoutRestaurantZoneNestedInput = {
    create?: XOR<TableCreateWithoutRestaurantZoneInput, TableUncheckedCreateWithoutRestaurantZoneInput> | TableCreateWithoutRestaurantZoneInput[] | TableUncheckedCreateWithoutRestaurantZoneInput[]
    connectOrCreate?: TableCreateOrConnectWithoutRestaurantZoneInput | TableCreateOrConnectWithoutRestaurantZoneInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutRestaurantZoneInput | TableUpsertWithWhereUniqueWithoutRestaurantZoneInput[]
    createMany?: TableCreateManyRestaurantZoneInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutRestaurantZoneInput | TableUpdateWithWhereUniqueWithoutRestaurantZoneInput[]
    updateMany?: TableUpdateManyWithWhereWithoutRestaurantZoneInput | TableUpdateManyWithWhereWithoutRestaurantZoneInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type TableCreateNestedManyWithoutTableStatusInput = {
    create?: XOR<TableCreateWithoutTableStatusInput, TableUncheckedCreateWithoutTableStatusInput> | TableCreateWithoutTableStatusInput[] | TableUncheckedCreateWithoutTableStatusInput[]
    connectOrCreate?: TableCreateOrConnectWithoutTableStatusInput | TableCreateOrConnectWithoutTableStatusInput[]
    createMany?: TableCreateManyTableStatusInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type TableUncheckedCreateNestedManyWithoutTableStatusInput = {
    create?: XOR<TableCreateWithoutTableStatusInput, TableUncheckedCreateWithoutTableStatusInput> | TableCreateWithoutTableStatusInput[] | TableUncheckedCreateWithoutTableStatusInput[]
    connectOrCreate?: TableCreateOrConnectWithoutTableStatusInput | TableCreateOrConnectWithoutTableStatusInput[]
    createMany?: TableCreateManyTableStatusInputEnvelope
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
  }

  export type TableUpdateManyWithoutTableStatusNestedInput = {
    create?: XOR<TableCreateWithoutTableStatusInput, TableUncheckedCreateWithoutTableStatusInput> | TableCreateWithoutTableStatusInput[] | TableUncheckedCreateWithoutTableStatusInput[]
    connectOrCreate?: TableCreateOrConnectWithoutTableStatusInput | TableCreateOrConnectWithoutTableStatusInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutTableStatusInput | TableUpsertWithWhereUniqueWithoutTableStatusInput[]
    createMany?: TableCreateManyTableStatusInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutTableStatusInput | TableUpdateWithWhereUniqueWithoutTableStatusInput[]
    updateMany?: TableUpdateManyWithWhereWithoutTableStatusInput | TableUpdateManyWithWhereWithoutTableStatusInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type TableUncheckedUpdateManyWithoutTableStatusNestedInput = {
    create?: XOR<TableCreateWithoutTableStatusInput, TableUncheckedCreateWithoutTableStatusInput> | TableCreateWithoutTableStatusInput[] | TableUncheckedCreateWithoutTableStatusInput[]
    connectOrCreate?: TableCreateOrConnectWithoutTableStatusInput | TableCreateOrConnectWithoutTableStatusInput[]
    upsert?: TableUpsertWithWhereUniqueWithoutTableStatusInput | TableUpsertWithWhereUniqueWithoutTableStatusInput[]
    createMany?: TableCreateManyTableStatusInputEnvelope
    set?: TableWhereUniqueInput | TableWhereUniqueInput[]
    disconnect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    delete?: TableWhereUniqueInput | TableWhereUniqueInput[]
    connect?: TableWhereUniqueInput | TableWhereUniqueInput[]
    update?: TableUpdateWithWhereUniqueWithoutTableStatusInput | TableUpdateWithWhereUniqueWithoutTableStatusInput[]
    updateMany?: TableUpdateManyWithWhereWithoutTableStatusInput | TableUpdateManyWithWhereWithoutTableStatusInput[]
    deleteMany?: TableScalarWhereInput | TableScalarWhereInput[]
  }

  export type RestaurantZoneCreateNestedOneWithoutTablesInput = {
    create?: XOR<RestaurantZoneCreateWithoutTablesInput, RestaurantZoneUncheckedCreateWithoutTablesInput>
    connectOrCreate?: RestaurantZoneCreateOrConnectWithoutTablesInput
    connect?: RestaurantZoneWhereUniqueInput
  }

  export type TableStatusCreateNestedOneWithoutTablesInput = {
    create?: XOR<TableStatusCreateWithoutTablesInput, TableStatusUncheckedCreateWithoutTablesInput>
    connectOrCreate?: TableStatusCreateOrConnectWithoutTablesInput
    connect?: TableStatusWhereUniqueInput
  }

  export type CombineTableItemCreateNestedManyWithoutTableInput = {
    create?: XOR<CombineTableItemCreateWithoutTableInput, CombineTableItemUncheckedCreateWithoutTableInput> | CombineTableItemCreateWithoutTableInput[] | CombineTableItemUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutTableInput | CombineTableItemCreateOrConnectWithoutTableInput[]
    createMany?: CombineTableItemCreateManyTableInputEnvelope
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
  }

  export type CommandCreateNestedManyWithoutTableInput = {
    create?: XOR<CommandCreateWithoutTableInput, CommandUncheckedCreateWithoutTableInput> | CommandCreateWithoutTableInput[] | CommandUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutTableInput | CommandCreateOrConnectWithoutTableInput[]
    createMany?: CommandCreateManyTableInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type CombineTableItemUncheckedCreateNestedManyWithoutTableInput = {
    create?: XOR<CombineTableItemCreateWithoutTableInput, CombineTableItemUncheckedCreateWithoutTableInput> | CombineTableItemCreateWithoutTableInput[] | CombineTableItemUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutTableInput | CombineTableItemCreateOrConnectWithoutTableInput[]
    createMany?: CombineTableItemCreateManyTableInputEnvelope
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
  }

  export type CommandUncheckedCreateNestedManyWithoutTableInput = {
    create?: XOR<CommandCreateWithoutTableInput, CommandUncheckedCreateWithoutTableInput> | CommandCreateWithoutTableInput[] | CommandUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutTableInput | CommandCreateOrConnectWithoutTableInput[]
    createMany?: CommandCreateManyTableInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type RestaurantZoneUpdateOneWithoutTablesNestedInput = {
    create?: XOR<RestaurantZoneCreateWithoutTablesInput, RestaurantZoneUncheckedCreateWithoutTablesInput>
    connectOrCreate?: RestaurantZoneCreateOrConnectWithoutTablesInput
    upsert?: RestaurantZoneUpsertWithoutTablesInput
    disconnect?: RestaurantZoneWhereInput | boolean
    delete?: RestaurantZoneWhereInput | boolean
    connect?: RestaurantZoneWhereUniqueInput
    update?: XOR<XOR<RestaurantZoneUpdateToOneWithWhereWithoutTablesInput, RestaurantZoneUpdateWithoutTablesInput>, RestaurantZoneUncheckedUpdateWithoutTablesInput>
  }

  export type TableStatusUpdateOneRequiredWithoutTablesNestedInput = {
    create?: XOR<TableStatusCreateWithoutTablesInput, TableStatusUncheckedCreateWithoutTablesInput>
    connectOrCreate?: TableStatusCreateOrConnectWithoutTablesInput
    upsert?: TableStatusUpsertWithoutTablesInput
    connect?: TableStatusWhereUniqueInput
    update?: XOR<XOR<TableStatusUpdateToOneWithWhereWithoutTablesInput, TableStatusUpdateWithoutTablesInput>, TableStatusUncheckedUpdateWithoutTablesInput>
  }

  export type CombineTableItemUpdateManyWithoutTableNestedInput = {
    create?: XOR<CombineTableItemCreateWithoutTableInput, CombineTableItemUncheckedCreateWithoutTableInput> | CombineTableItemCreateWithoutTableInput[] | CombineTableItemUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutTableInput | CombineTableItemCreateOrConnectWithoutTableInput[]
    upsert?: CombineTableItemUpsertWithWhereUniqueWithoutTableInput | CombineTableItemUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: CombineTableItemCreateManyTableInputEnvelope
    set?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    disconnect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    delete?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    update?: CombineTableItemUpdateWithWhereUniqueWithoutTableInput | CombineTableItemUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: CombineTableItemUpdateManyWithWhereWithoutTableInput | CombineTableItemUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: CombineTableItemScalarWhereInput | CombineTableItemScalarWhereInput[]
  }

  export type CommandUpdateManyWithoutTableNestedInput = {
    create?: XOR<CommandCreateWithoutTableInput, CommandUncheckedCreateWithoutTableInput> | CommandCreateWithoutTableInput[] | CommandUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutTableInput | CommandCreateOrConnectWithoutTableInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutTableInput | CommandUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: CommandCreateManyTableInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutTableInput | CommandUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutTableInput | CommandUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type CombineTableItemUncheckedUpdateManyWithoutTableNestedInput = {
    create?: XOR<CombineTableItemCreateWithoutTableInput, CombineTableItemUncheckedCreateWithoutTableInput> | CombineTableItemCreateWithoutTableInput[] | CombineTableItemUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutTableInput | CombineTableItemCreateOrConnectWithoutTableInput[]
    upsert?: CombineTableItemUpsertWithWhereUniqueWithoutTableInput | CombineTableItemUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: CombineTableItemCreateManyTableInputEnvelope
    set?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    disconnect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    delete?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    update?: CombineTableItemUpdateWithWhereUniqueWithoutTableInput | CombineTableItemUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: CombineTableItemUpdateManyWithWhereWithoutTableInput | CombineTableItemUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: CombineTableItemScalarWhereInput | CombineTableItemScalarWhereInput[]
  }

  export type CommandUncheckedUpdateManyWithoutTableNestedInput = {
    create?: XOR<CommandCreateWithoutTableInput, CommandUncheckedCreateWithoutTableInput> | CommandCreateWithoutTableInput[] | CommandUncheckedCreateWithoutTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutTableInput | CommandCreateOrConnectWithoutTableInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutTableInput | CommandUpsertWithWhereUniqueWithoutTableInput[]
    createMany?: CommandCreateManyTableInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutTableInput | CommandUpdateWithWhereUniqueWithoutTableInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutTableInput | CommandUpdateManyWithWhereWithoutTableInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCombinedTablesInput = {
    create?: XOR<UserCreateWithoutCombinedTablesInput, UserUncheckedCreateWithoutCombinedTablesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCombinedTablesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReleasedTablesInput = {
    create?: XOR<UserCreateWithoutReleasedTablesInput, UserUncheckedCreateWithoutReleasedTablesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReleasedTablesInput
    connect?: UserWhereUniqueInput
  }

  export type CombineTableItemCreateNestedManyWithoutCombineTableInput = {
    create?: XOR<CombineTableItemCreateWithoutCombineTableInput, CombineTableItemUncheckedCreateWithoutCombineTableInput> | CombineTableItemCreateWithoutCombineTableInput[] | CombineTableItemUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutCombineTableInput | CombineTableItemCreateOrConnectWithoutCombineTableInput[]
    createMany?: CombineTableItemCreateManyCombineTableInputEnvelope
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
  }

  export type CommandCreateNestedManyWithoutCombineTableInput = {
    create?: XOR<CommandCreateWithoutCombineTableInput, CommandUncheckedCreateWithoutCombineTableInput> | CommandCreateWithoutCombineTableInput[] | CommandUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCombineTableInput | CommandCreateOrConnectWithoutCombineTableInput[]
    createMany?: CommandCreateManyCombineTableInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type CombineTableItemUncheckedCreateNestedManyWithoutCombineTableInput = {
    create?: XOR<CombineTableItemCreateWithoutCombineTableInput, CombineTableItemUncheckedCreateWithoutCombineTableInput> | CombineTableItemCreateWithoutCombineTableInput[] | CombineTableItemUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutCombineTableInput | CombineTableItemCreateOrConnectWithoutCombineTableInput[]
    createMany?: CombineTableItemCreateManyCombineTableInputEnvelope
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
  }

  export type CommandUncheckedCreateNestedManyWithoutCombineTableInput = {
    create?: XOR<CommandCreateWithoutCombineTableInput, CommandUncheckedCreateWithoutCombineTableInput> | CommandCreateWithoutCombineTableInput[] | CommandUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCombineTableInput | CommandCreateOrConnectWithoutCombineTableInput[]
    createMany?: CommandCreateManyCombineTableInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCombinedTablesNestedInput = {
    create?: XOR<UserCreateWithoutCombinedTablesInput, UserUncheckedCreateWithoutCombinedTablesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCombinedTablesInput
    upsert?: UserUpsertWithoutCombinedTablesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCombinedTablesInput, UserUpdateWithoutCombinedTablesInput>, UserUncheckedUpdateWithoutCombinedTablesInput>
  }

  export type UserUpdateOneWithoutReleasedTablesNestedInput = {
    create?: XOR<UserCreateWithoutReleasedTablesInput, UserUncheckedCreateWithoutReleasedTablesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReleasedTablesInput
    upsert?: UserUpsertWithoutReleasedTablesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReleasedTablesInput, UserUpdateWithoutReleasedTablesInput>, UserUncheckedUpdateWithoutReleasedTablesInput>
  }

  export type CombineTableItemUpdateManyWithoutCombineTableNestedInput = {
    create?: XOR<CombineTableItemCreateWithoutCombineTableInput, CombineTableItemUncheckedCreateWithoutCombineTableInput> | CombineTableItemCreateWithoutCombineTableInput[] | CombineTableItemUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutCombineTableInput | CombineTableItemCreateOrConnectWithoutCombineTableInput[]
    upsert?: CombineTableItemUpsertWithWhereUniqueWithoutCombineTableInput | CombineTableItemUpsertWithWhereUniqueWithoutCombineTableInput[]
    createMany?: CombineTableItemCreateManyCombineTableInputEnvelope
    set?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    disconnect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    delete?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    update?: CombineTableItemUpdateWithWhereUniqueWithoutCombineTableInput | CombineTableItemUpdateWithWhereUniqueWithoutCombineTableInput[]
    updateMany?: CombineTableItemUpdateManyWithWhereWithoutCombineTableInput | CombineTableItemUpdateManyWithWhereWithoutCombineTableInput[]
    deleteMany?: CombineTableItemScalarWhereInput | CombineTableItemScalarWhereInput[]
  }

  export type CommandUpdateManyWithoutCombineTableNestedInput = {
    create?: XOR<CommandCreateWithoutCombineTableInput, CommandUncheckedCreateWithoutCombineTableInput> | CommandCreateWithoutCombineTableInput[] | CommandUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCombineTableInput | CommandCreateOrConnectWithoutCombineTableInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutCombineTableInput | CommandUpsertWithWhereUniqueWithoutCombineTableInput[]
    createMany?: CommandCreateManyCombineTableInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutCombineTableInput | CommandUpdateWithWhereUniqueWithoutCombineTableInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutCombineTableInput | CommandUpdateManyWithWhereWithoutCombineTableInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type CombineTableItemUncheckedUpdateManyWithoutCombineTableNestedInput = {
    create?: XOR<CombineTableItemCreateWithoutCombineTableInput, CombineTableItemUncheckedCreateWithoutCombineTableInput> | CombineTableItemCreateWithoutCombineTableInput[] | CombineTableItemUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CombineTableItemCreateOrConnectWithoutCombineTableInput | CombineTableItemCreateOrConnectWithoutCombineTableInput[]
    upsert?: CombineTableItemUpsertWithWhereUniqueWithoutCombineTableInput | CombineTableItemUpsertWithWhereUniqueWithoutCombineTableInput[]
    createMany?: CombineTableItemCreateManyCombineTableInputEnvelope
    set?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    disconnect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    delete?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    connect?: CombineTableItemWhereUniqueInput | CombineTableItemWhereUniqueInput[]
    update?: CombineTableItemUpdateWithWhereUniqueWithoutCombineTableInput | CombineTableItemUpdateWithWhereUniqueWithoutCombineTableInput[]
    updateMany?: CombineTableItemUpdateManyWithWhereWithoutCombineTableInput | CombineTableItemUpdateManyWithWhereWithoutCombineTableInput[]
    deleteMany?: CombineTableItemScalarWhereInput | CombineTableItemScalarWhereInput[]
  }

  export type CommandUncheckedUpdateManyWithoutCombineTableNestedInput = {
    create?: XOR<CommandCreateWithoutCombineTableInput, CommandUncheckedCreateWithoutCombineTableInput> | CommandCreateWithoutCombineTableInput[] | CommandUncheckedCreateWithoutCombineTableInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCombineTableInput | CommandCreateOrConnectWithoutCombineTableInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutCombineTableInput | CommandUpsertWithWhereUniqueWithoutCombineTableInput[]
    createMany?: CommandCreateManyCombineTableInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutCombineTableInput | CommandUpdateWithWhereUniqueWithoutCombineTableInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutCombineTableInput | CommandUpdateManyWithWhereWithoutCombineTableInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type CombineTableCreateNestedOneWithoutTablesInput = {
    create?: XOR<CombineTableCreateWithoutTablesInput, CombineTableUncheckedCreateWithoutTablesInput>
    connectOrCreate?: CombineTableCreateOrConnectWithoutTablesInput
    connect?: CombineTableWhereUniqueInput
  }

  export type TableCreateNestedOneWithoutCombineTableItemsInput = {
    create?: XOR<TableCreateWithoutCombineTableItemsInput, TableUncheckedCreateWithoutCombineTableItemsInput>
    connectOrCreate?: TableCreateOrConnectWithoutCombineTableItemsInput
    connect?: TableWhereUniqueInput
  }

  export type CombineTableUpdateOneRequiredWithoutTablesNestedInput = {
    create?: XOR<CombineTableCreateWithoutTablesInput, CombineTableUncheckedCreateWithoutTablesInput>
    connectOrCreate?: CombineTableCreateOrConnectWithoutTablesInput
    upsert?: CombineTableUpsertWithoutTablesInput
    connect?: CombineTableWhereUniqueInput
    update?: XOR<XOR<CombineTableUpdateToOneWithWhereWithoutTablesInput, CombineTableUpdateWithoutTablesInput>, CombineTableUncheckedUpdateWithoutTablesInput>
  }

  export type TableUpdateOneRequiredWithoutCombineTableItemsNestedInput = {
    create?: XOR<TableCreateWithoutCombineTableItemsInput, TableUncheckedCreateWithoutCombineTableItemsInput>
    connectOrCreate?: TableCreateOrConnectWithoutCombineTableItemsInput
    upsert?: TableUpsertWithoutCombineTableItemsInput
    connect?: TableWhereUniqueInput
    update?: XOR<XOR<TableUpdateToOneWithWhereWithoutCombineTableItemsInput, TableUpdateWithoutCombineTableItemsInput>, TableUncheckedUpdateWithoutCombineTableItemsInput>
  }

  export type ProductCreateNestedManyWithoutBrandInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutBrandInput | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutBrandInput | ProductUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutBrandInput | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutBrandInput | ProductUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductCreateNestedManyWithoutProductTypeInput = {
    create?: XOR<ProductCreateWithoutProductTypeInput, ProductUncheckedCreateWithoutProductTypeInput> | ProductCreateWithoutProductTypeInput[] | ProductUncheckedCreateWithoutProductTypeInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductTypeInput | ProductCreateOrConnectWithoutProductTypeInput[]
    createMany?: ProductCreateManyProductTypeInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutProductTypeInput = {
    create?: XOR<ProductCreateWithoutProductTypeInput, ProductUncheckedCreateWithoutProductTypeInput> | ProductCreateWithoutProductTypeInput[] | ProductUncheckedCreateWithoutProductTypeInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductTypeInput | ProductCreateOrConnectWithoutProductTypeInput[]
    createMany?: ProductCreateManyProductTypeInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutProductTypeNestedInput = {
    create?: XOR<ProductCreateWithoutProductTypeInput, ProductUncheckedCreateWithoutProductTypeInput> | ProductCreateWithoutProductTypeInput[] | ProductUncheckedCreateWithoutProductTypeInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductTypeInput | ProductCreateOrConnectWithoutProductTypeInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProductTypeInput | ProductUpsertWithWhereUniqueWithoutProductTypeInput[]
    createMany?: ProductCreateManyProductTypeInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProductTypeInput | ProductUpdateWithWhereUniqueWithoutProductTypeInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProductTypeInput | ProductUpdateManyWithWhereWithoutProductTypeInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutProductTypeNestedInput = {
    create?: XOR<ProductCreateWithoutProductTypeInput, ProductUncheckedCreateWithoutProductTypeInput> | ProductCreateWithoutProductTypeInput[] | ProductUncheckedCreateWithoutProductTypeInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductTypeInput | ProductCreateOrConnectWithoutProductTypeInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProductTypeInput | ProductUpsertWithWhereUniqueWithoutProductTypeInput[]
    createMany?: ProductCreateManyProductTypeInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProductTypeInput | ProductUpdateWithWhereUniqueWithoutProductTypeInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProductTypeInput | ProductUpdateManyWithWhereWithoutProductTypeInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductCreateNestedManyWithoutProductCategoryInput = {
    create?: XOR<ProductCreateWithoutProductCategoryInput, ProductUncheckedCreateWithoutProductCategoryInput> | ProductCreateWithoutProductCategoryInput[] | ProductUncheckedCreateWithoutProductCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductCategoryInput | ProductCreateOrConnectWithoutProductCategoryInput[]
    createMany?: ProductCreateManyProductCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutProductCategoryInput = {
    create?: XOR<ProductCreateWithoutProductCategoryInput, ProductUncheckedCreateWithoutProductCategoryInput> | ProductCreateWithoutProductCategoryInput[] | ProductUncheckedCreateWithoutProductCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductCategoryInput | ProductCreateOrConnectWithoutProductCategoryInput[]
    createMany?: ProductCreateManyProductCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutProductCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutProductCategoryInput, ProductUncheckedCreateWithoutProductCategoryInput> | ProductCreateWithoutProductCategoryInput[] | ProductUncheckedCreateWithoutProductCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductCategoryInput | ProductCreateOrConnectWithoutProductCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProductCategoryInput | ProductUpsertWithWhereUniqueWithoutProductCategoryInput[]
    createMany?: ProductCreateManyProductCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProductCategoryInput | ProductUpdateWithWhereUniqueWithoutProductCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProductCategoryInput | ProductUpdateManyWithWhereWithoutProductCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutProductCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutProductCategoryInput, ProductUncheckedCreateWithoutProductCategoryInput> | ProductCreateWithoutProductCategoryInput[] | ProductUncheckedCreateWithoutProductCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductCategoryInput | ProductCreateOrConnectWithoutProductCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProductCategoryInput | ProductUpsertWithWhereUniqueWithoutProductCategoryInput[]
    createMany?: ProductCreateManyProductCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProductCategoryInput | ProductUpdateWithWhereUniqueWithoutProductCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProductCategoryInput | ProductUpdateManyWithWhereWithoutProductCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductCreateNestedManyWithoutProductStatusInput = {
    create?: XOR<ProductCreateWithoutProductStatusInput, ProductUncheckedCreateWithoutProductStatusInput> | ProductCreateWithoutProductStatusInput[] | ProductUncheckedCreateWithoutProductStatusInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductStatusInput | ProductCreateOrConnectWithoutProductStatusInput[]
    createMany?: ProductCreateManyProductStatusInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutProductStatusInput = {
    create?: XOR<ProductCreateWithoutProductStatusInput, ProductUncheckedCreateWithoutProductStatusInput> | ProductCreateWithoutProductStatusInput[] | ProductUncheckedCreateWithoutProductStatusInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductStatusInput | ProductCreateOrConnectWithoutProductStatusInput[]
    createMany?: ProductCreateManyProductStatusInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutProductStatusNestedInput = {
    create?: XOR<ProductCreateWithoutProductStatusInput, ProductUncheckedCreateWithoutProductStatusInput> | ProductCreateWithoutProductStatusInput[] | ProductUncheckedCreateWithoutProductStatusInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductStatusInput | ProductCreateOrConnectWithoutProductStatusInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProductStatusInput | ProductUpsertWithWhereUniqueWithoutProductStatusInput[]
    createMany?: ProductCreateManyProductStatusInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProductStatusInput | ProductUpdateWithWhereUniqueWithoutProductStatusInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProductStatusInput | ProductUpdateManyWithWhereWithoutProductStatusInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutProductStatusNestedInput = {
    create?: XOR<ProductCreateWithoutProductStatusInput, ProductUncheckedCreateWithoutProductStatusInput> | ProductCreateWithoutProductStatusInput[] | ProductUncheckedCreateWithoutProductStatusInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutProductStatusInput | ProductCreateOrConnectWithoutProductStatusInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutProductStatusInput | ProductUpsertWithWhereUniqueWithoutProductStatusInput[]
    createMany?: ProductCreateManyProductStatusInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutProductStatusInput | ProductUpdateWithWhereUniqueWithoutProductStatusInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutProductStatusInput | ProductUpdateManyWithWhereWithoutProductStatusInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductTypeCreateNestedOneWithoutProductsInput = {
    create?: XOR<ProductTypeCreateWithoutProductsInput, ProductTypeUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ProductTypeCreateOrConnectWithoutProductsInput
    connect?: ProductTypeWhereUniqueInput
  }

  export type ProductCategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<ProductCategoryCreateWithoutProductsInput, ProductCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductsInput
    connect?: ProductCategoryWhereUniqueInput
  }

  export type BrandCreateNestedOneWithoutProductsInput = {
    create?: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutProductsInput
    connect?: BrandWhereUniqueInput
  }

  export type ProductStatusCreateNestedOneWithoutProductsInput = {
    create?: XOR<ProductStatusCreateWithoutProductsInput, ProductStatusUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ProductStatusCreateOrConnectWithoutProductsInput
    connect?: ProductStatusWhereUniqueInput
  }

  export type InventoryCreateNestedOneWithoutProductInput = {
    create?: XOR<InventoryCreateWithoutProductInput, InventoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutProductInput
    connect?: InventoryWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<InventoryCreateWithoutProductInput, InventoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutProductInput
    connect?: InventoryWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ProductTypeUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<ProductTypeCreateWithoutProductsInput, ProductTypeUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ProductTypeCreateOrConnectWithoutProductsInput
    upsert?: ProductTypeUpsertWithoutProductsInput
    connect?: ProductTypeWhereUniqueInput
    update?: XOR<XOR<ProductTypeUpdateToOneWithWhereWithoutProductsInput, ProductTypeUpdateWithoutProductsInput>, ProductTypeUncheckedUpdateWithoutProductsInput>
  }

  export type ProductCategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<ProductCategoryCreateWithoutProductsInput, ProductCategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ProductCategoryCreateOrConnectWithoutProductsInput
    upsert?: ProductCategoryUpsertWithoutProductsInput
    connect?: ProductCategoryWhereUniqueInput
    update?: XOR<XOR<ProductCategoryUpdateToOneWithWhereWithoutProductsInput, ProductCategoryUpdateWithoutProductsInput>, ProductCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type BrandUpdateOneWithoutProductsNestedInput = {
    create?: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutProductsInput
    upsert?: BrandUpsertWithoutProductsInput
    disconnect?: BrandWhereInput | boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutProductsInput, BrandUpdateWithoutProductsInput>, BrandUncheckedUpdateWithoutProductsInput>
  }

  export type ProductStatusUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<ProductStatusCreateWithoutProductsInput, ProductStatusUncheckedCreateWithoutProductsInput>
    connectOrCreate?: ProductStatusCreateOrConnectWithoutProductsInput
    upsert?: ProductStatusUpsertWithoutProductsInput
    connect?: ProductStatusWhereUniqueInput
    update?: XOR<XOR<ProductStatusUpdateToOneWithWhereWithoutProductsInput, ProductStatusUpdateWithoutProductsInput>, ProductStatusUncheckedUpdateWithoutProductsInput>
  }

  export type InventoryUpdateOneWithoutProductNestedInput = {
    create?: XOR<InventoryCreateWithoutProductInput, InventoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutProductInput
    upsert?: InventoryUpsertWithoutProductInput
    disconnect?: InventoryWhereInput | boolean
    delete?: InventoryWhereInput | boolean
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutProductInput, InventoryUpdateWithoutProductInput>, InventoryUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<InventoryCreateWithoutProductInput, InventoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutProductInput
    upsert?: InventoryUpsertWithoutProductInput
    disconnect?: InventoryWhereInput | boolean
    delete?: InventoryWhereInput | boolean
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutProductInput, InventoryUpdateWithoutProductInput>, InventoryUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<UserCreateWithoutDocumentTypeInput, UserUncheckedCreateWithoutDocumentTypeInput> | UserCreateWithoutDocumentTypeInput[] | UserUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDocumentTypeInput | UserCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: UserCreateManyDocumentTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<CustomerCreateWithoutDocumentTypeInput, CustomerUncheckedCreateWithoutDocumentTypeInput> | CustomerCreateWithoutDocumentTypeInput[] | CustomerUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentTypeInput | CustomerCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: CustomerCreateManyDocumentTypeInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<UserCreateWithoutDocumentTypeInput, UserUncheckedCreateWithoutDocumentTypeInput> | UserCreateWithoutDocumentTypeInput[] | UserUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDocumentTypeInput | UserCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: UserCreateManyDocumentTypeInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutDocumentTypeInput = {
    create?: XOR<CustomerCreateWithoutDocumentTypeInput, CustomerUncheckedCreateWithoutDocumentTypeInput> | CustomerCreateWithoutDocumentTypeInput[] | CustomerUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentTypeInput | CustomerCreateOrConnectWithoutDocumentTypeInput[]
    createMany?: CustomerCreateManyDocumentTypeInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<UserCreateWithoutDocumentTypeInput, UserUncheckedCreateWithoutDocumentTypeInput> | UserCreateWithoutDocumentTypeInput[] | UserUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDocumentTypeInput | UserCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDocumentTypeInput | UserUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: UserCreateManyDocumentTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDocumentTypeInput | UserUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDocumentTypeInput | UserUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<CustomerCreateWithoutDocumentTypeInput, CustomerUncheckedCreateWithoutDocumentTypeInput> | CustomerCreateWithoutDocumentTypeInput[] | CustomerUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentTypeInput | CustomerCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutDocumentTypeInput | CustomerUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: CustomerCreateManyDocumentTypeInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutDocumentTypeInput | CustomerUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutDocumentTypeInput | CustomerUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<UserCreateWithoutDocumentTypeInput, UserUncheckedCreateWithoutDocumentTypeInput> | UserCreateWithoutDocumentTypeInput[] | UserUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDocumentTypeInput | UserCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDocumentTypeInput | UserUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: UserCreateManyDocumentTypeInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDocumentTypeInput | UserUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDocumentTypeInput | UserUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutDocumentTypeNestedInput = {
    create?: XOR<CustomerCreateWithoutDocumentTypeInput, CustomerUncheckedCreateWithoutDocumentTypeInput> | CustomerCreateWithoutDocumentTypeInput[] | CustomerUncheckedCreateWithoutDocumentTypeInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutDocumentTypeInput | CustomerCreateOrConnectWithoutDocumentTypeInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutDocumentTypeInput | CustomerUpsertWithWhereUniqueWithoutDocumentTypeInput[]
    createMany?: CustomerCreateManyDocumentTypeInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutDocumentTypeInput | CustomerUpdateWithWhereUniqueWithoutDocumentTypeInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutDocumentTypeInput | CustomerUpdateManyWithWhereWithoutDocumentTypeInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutAccountStatusInput = {
    create?: XOR<UserCreateWithoutAccountStatusInput, UserUncheckedCreateWithoutAccountStatusInput> | UserCreateWithoutAccountStatusInput[] | UserUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountStatusInput | UserCreateOrConnectWithoutAccountStatusInput[]
    createMany?: UserCreateManyAccountStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutAccountStatusInput = {
    create?: XOR<CustomerCreateWithoutAccountStatusInput, CustomerUncheckedCreateWithoutAccountStatusInput> | CustomerCreateWithoutAccountStatusInput[] | CustomerUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAccountStatusInput | CustomerCreateOrConnectWithoutAccountStatusInput[]
    createMany?: CustomerCreateManyAccountStatusInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAccountStatusInput = {
    create?: XOR<UserCreateWithoutAccountStatusInput, UserUncheckedCreateWithoutAccountStatusInput> | UserCreateWithoutAccountStatusInput[] | UserUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountStatusInput | UserCreateOrConnectWithoutAccountStatusInput[]
    createMany?: UserCreateManyAccountStatusInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutAccountStatusInput = {
    create?: XOR<CustomerCreateWithoutAccountStatusInput, CustomerUncheckedCreateWithoutAccountStatusInput> | CustomerCreateWithoutAccountStatusInput[] | CustomerUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAccountStatusInput | CustomerCreateOrConnectWithoutAccountStatusInput[]
    createMany?: CustomerCreateManyAccountStatusInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutAccountStatusNestedInput = {
    create?: XOR<UserCreateWithoutAccountStatusInput, UserUncheckedCreateWithoutAccountStatusInput> | UserCreateWithoutAccountStatusInput[] | UserUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountStatusInput | UserCreateOrConnectWithoutAccountStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccountStatusInput | UserUpsertWithWhereUniqueWithoutAccountStatusInput[]
    createMany?: UserCreateManyAccountStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccountStatusInput | UserUpdateWithWhereUniqueWithoutAccountStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccountStatusInput | UserUpdateManyWithWhereWithoutAccountStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutAccountStatusNestedInput = {
    create?: XOR<CustomerCreateWithoutAccountStatusInput, CustomerUncheckedCreateWithoutAccountStatusInput> | CustomerCreateWithoutAccountStatusInput[] | CustomerUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAccountStatusInput | CustomerCreateOrConnectWithoutAccountStatusInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutAccountStatusInput | CustomerUpsertWithWhereUniqueWithoutAccountStatusInput[]
    createMany?: CustomerCreateManyAccountStatusInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutAccountStatusInput | CustomerUpdateWithWhereUniqueWithoutAccountStatusInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutAccountStatusInput | CustomerUpdateManyWithWhereWithoutAccountStatusInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAccountStatusNestedInput = {
    create?: XOR<UserCreateWithoutAccountStatusInput, UserUncheckedCreateWithoutAccountStatusInput> | UserCreateWithoutAccountStatusInput[] | UserUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountStatusInput | UserCreateOrConnectWithoutAccountStatusInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccountStatusInput | UserUpsertWithWhereUniqueWithoutAccountStatusInput[]
    createMany?: UserCreateManyAccountStatusInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccountStatusInput | UserUpdateWithWhereUniqueWithoutAccountStatusInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccountStatusInput | UserUpdateManyWithWhereWithoutAccountStatusInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutAccountStatusNestedInput = {
    create?: XOR<CustomerCreateWithoutAccountStatusInput, CustomerUncheckedCreateWithoutAccountStatusInput> | CustomerCreateWithoutAccountStatusInput[] | CustomerUncheckedCreateWithoutAccountStatusInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAccountStatusInput | CustomerCreateOrConnectWithoutAccountStatusInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutAccountStatusInput | CustomerUpsertWithWhereUniqueWithoutAccountStatusInput[]
    createMany?: CustomerCreateManyAccountStatusInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutAccountStatusInput | CustomerUpdateWithWhereUniqueWithoutAccountStatusInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutAccountStatusInput | CustomerUpdateManyWithWhereWithoutAccountStatusInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type PermissionCreateNestedManyWithoutPermissioncategoryInput = {
    create?: XOR<PermissionCreateWithoutPermissioncategoryInput, PermissionUncheckedCreateWithoutPermissioncategoryInput> | PermissionCreateWithoutPermissioncategoryInput[] | PermissionUncheckedCreateWithoutPermissioncategoryInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutPermissioncategoryInput | PermissionCreateOrConnectWithoutPermissioncategoryInput[]
    createMany?: PermissionCreateManyPermissioncategoryInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutPermissioncategoryInput = {
    create?: XOR<PermissionCreateWithoutPermissioncategoryInput, PermissionUncheckedCreateWithoutPermissioncategoryInput> | PermissionCreateWithoutPermissioncategoryInput[] | PermissionUncheckedCreateWithoutPermissioncategoryInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutPermissioncategoryInput | PermissionCreateOrConnectWithoutPermissioncategoryInput[]
    createMany?: PermissionCreateManyPermissioncategoryInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type PermissionUpdateManyWithoutPermissioncategoryNestedInput = {
    create?: XOR<PermissionCreateWithoutPermissioncategoryInput, PermissionUncheckedCreateWithoutPermissioncategoryInput> | PermissionCreateWithoutPermissioncategoryInput[] | PermissionUncheckedCreateWithoutPermissioncategoryInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutPermissioncategoryInput | PermissionCreateOrConnectWithoutPermissioncategoryInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutPermissioncategoryInput | PermissionUpsertWithWhereUniqueWithoutPermissioncategoryInput[]
    createMany?: PermissionCreateManyPermissioncategoryInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutPermissioncategoryInput | PermissionUpdateWithWhereUniqueWithoutPermissioncategoryInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutPermissioncategoryInput | PermissionUpdateManyWithWhereWithoutPermissioncategoryInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutPermissioncategoryNestedInput = {
    create?: XOR<PermissionCreateWithoutPermissioncategoryInput, PermissionUncheckedCreateWithoutPermissioncategoryInput> | PermissionCreateWithoutPermissioncategoryInput[] | PermissionUncheckedCreateWithoutPermissioncategoryInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutPermissioncategoryInput | PermissionCreateOrConnectWithoutPermissioncategoryInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutPermissioncategoryInput | PermissionUpsertWithWhereUniqueWithoutPermissioncategoryInput[]
    createMany?: PermissionCreateManyPermissioncategoryInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutPermissioncategoryInput | PermissionUpdateWithWhereUniqueWithoutPermissioncategoryInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutPermissioncategoryInput | PermissionUpdateManyWithWhereWithoutPermissioncategoryInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type PermissionCategoryCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<PermissionCategoryCreateWithoutPermissionsInput, PermissionCategoryUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: PermissionCategoryCreateOrConnectWithoutPermissionsInput
    connect?: PermissionCategoryWhereUniqueInput
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type PermissionCategoryUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<PermissionCategoryCreateWithoutPermissionsInput, PermissionCategoryUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: PermissionCategoryCreateOrConnectWithoutPermissionsInput
    upsert?: PermissionCategoryUpsertWithoutPermissionsInput
    connect?: PermissionCategoryWhereUniqueInput
    update?: XOR<XOR<PermissionCategoryUpdateToOneWithWhereWithoutPermissionsInput, PermissionCategoryUpdateWithoutPermissionsInput>, PermissionCategoryUncheckedUpdateWithoutPermissionsInput>
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolePermissionsInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    upsert?: PermissionUpsertWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolePermissionsInput, PermissionUpdateWithoutRolePermissionsInput>, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type DocumentTypeCreateNestedOneWithoutUsersInput = {
    create?: XOR<DocumentTypeCreateWithoutUsersInput, DocumentTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutUsersInput
    connect?: DocumentTypeWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type AccountStatusCreateNestedOneWithoutUsersInput = {
    create?: XOR<AccountStatusCreateWithoutUsersInput, AccountStatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AccountStatusCreateOrConnectWithoutUsersInput
    connect?: AccountStatusWhereUniqueInput
  }

  export type ThemeCreateNestedManyWithoutUserInput = {
    create?: XOR<ThemeCreateWithoutUserInput, ThemeUncheckedCreateWithoutUserInput> | ThemeCreateWithoutUserInput[] | ThemeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemeCreateOrConnectWithoutUserInput | ThemeCreateOrConnectWithoutUserInput[]
    createMany?: ThemeCreateManyUserInputEnvelope
    connect?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
  }

  export type CombineTableCreateNestedManyWithoutCombinerInput = {
    create?: XOR<CombineTableCreateWithoutCombinerInput, CombineTableUncheckedCreateWithoutCombinerInput> | CombineTableCreateWithoutCombinerInput[] | CombineTableUncheckedCreateWithoutCombinerInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutCombinerInput | CombineTableCreateOrConnectWithoutCombinerInput[]
    createMany?: CombineTableCreateManyCombinerInputEnvelope
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
  }

  export type CombineTableCreateNestedManyWithoutReleaserInput = {
    create?: XOR<CombineTableCreateWithoutReleaserInput, CombineTableUncheckedCreateWithoutReleaserInput> | CombineTableCreateWithoutReleaserInput[] | CombineTableUncheckedCreateWithoutReleaserInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutReleaserInput | CombineTableCreateOrConnectWithoutReleaserInput[]
    createMany?: CombineTableCreateManyReleaserInputEnvelope
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
  }

  export type userProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<userProfileCreateWithoutUserInput, userProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: userProfileCreateOrConnectWithoutUserInput
    connect?: userProfileWhereUniqueInput
  }

  export type CommandCreateNestedManyWithoutOpenerInput = {
    create?: XOR<CommandCreateWithoutOpenerInput, CommandUncheckedCreateWithoutOpenerInput> | CommandCreateWithoutOpenerInput[] | CommandUncheckedCreateWithoutOpenerInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutOpenerInput | CommandCreateOrConnectWithoutOpenerInput[]
    createMany?: CommandCreateManyOpenerInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type CommandCreateNestedManyWithoutCloserInput = {
    create?: XOR<CommandCreateWithoutCloserInput, CommandUncheckedCreateWithoutCloserInput> | CommandCreateWithoutCloserInput[] | CommandUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCloserInput | CommandCreateOrConnectWithoutCloserInput[]
    createMany?: CommandCreateManyCloserInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutCreatorInput = {
    create?: XOR<OrderCreateWithoutCreatorInput, OrderUncheckedCreateWithoutCreatorInput> | OrderCreateWithoutCreatorInput[] | OrderUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatorInput | OrderCreateOrConnectWithoutCreatorInput[]
    createMany?: OrderCreateManyCreatorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutCloserInput = {
    create?: XOR<OrderCreateWithoutCloserInput, OrderUncheckedCreateWithoutCloserInput> | OrderCreateWithoutCloserInput[] | OrderUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCloserInput | OrderCreateOrConnectWithoutCloserInput[]
    createMany?: OrderCreateManyCloserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CashBoxCreateNestedManyWithoutOpenedInput = {
    create?: XOR<CashBoxCreateWithoutOpenedInput, CashBoxUncheckedCreateWithoutOpenedInput> | CashBoxCreateWithoutOpenedInput[] | CashBoxUncheckedCreateWithoutOpenedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutOpenedInput | CashBoxCreateOrConnectWithoutOpenedInput[]
    createMany?: CashBoxCreateManyOpenedInputEnvelope
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
  }

  export type CashBoxCreateNestedManyWithoutClosedInput = {
    create?: XOR<CashBoxCreateWithoutClosedInput, CashBoxUncheckedCreateWithoutClosedInput> | CashBoxCreateWithoutClosedInput[] | CashBoxUncheckedCreateWithoutClosedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutClosedInput | CashBoxCreateOrConnectWithoutClosedInput[]
    createMany?: CashBoxCreateManyClosedInputEnvelope
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
  }

  export type CashBoxMovementCreateNestedManyWithoutUserInput = {
    create?: XOR<CashBoxMovementCreateWithoutUserInput, CashBoxMovementUncheckedCreateWithoutUserInput> | CashBoxMovementCreateWithoutUserInput[] | CashBoxMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutUserInput | CashBoxMovementCreateOrConnectWithoutUserInput[]
    createMany?: CashBoxMovementCreateManyUserInputEnvelope
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutReceiveInput = {
    create?: XOR<PaymentCreateWithoutReceiveInput, PaymentUncheckedCreateWithoutReceiveInput> | PaymentCreateWithoutReceiveInput[] | PaymentUncheckedCreateWithoutReceiveInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceiveInput | PaymentCreateOrConnectWithoutReceiveInput[]
    createMany?: PaymentCreateManyReceiveInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type InventoryMovementCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryMovementCreateWithoutUserInput, InventoryMovementUncheckedCreateWithoutUserInput> | InventoryMovementCreateWithoutUserInput[] | InventoryMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutUserInput | InventoryMovementCreateOrConnectWithoutUserInput[]
    createMany?: InventoryMovementCreateManyUserInputEnvelope
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type ThemeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ThemeCreateWithoutUserInput, ThemeUncheckedCreateWithoutUserInput> | ThemeCreateWithoutUserInput[] | ThemeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemeCreateOrConnectWithoutUserInput | ThemeCreateOrConnectWithoutUserInput[]
    createMany?: ThemeCreateManyUserInputEnvelope
    connect?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
  }

  export type CombineTableUncheckedCreateNestedManyWithoutCombinerInput = {
    create?: XOR<CombineTableCreateWithoutCombinerInput, CombineTableUncheckedCreateWithoutCombinerInput> | CombineTableCreateWithoutCombinerInput[] | CombineTableUncheckedCreateWithoutCombinerInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutCombinerInput | CombineTableCreateOrConnectWithoutCombinerInput[]
    createMany?: CombineTableCreateManyCombinerInputEnvelope
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
  }

  export type CombineTableUncheckedCreateNestedManyWithoutReleaserInput = {
    create?: XOR<CombineTableCreateWithoutReleaserInput, CombineTableUncheckedCreateWithoutReleaserInput> | CombineTableCreateWithoutReleaserInput[] | CombineTableUncheckedCreateWithoutReleaserInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutReleaserInput | CombineTableCreateOrConnectWithoutReleaserInput[]
    createMany?: CombineTableCreateManyReleaserInputEnvelope
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
  }

  export type userProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<userProfileCreateWithoutUserInput, userProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: userProfileCreateOrConnectWithoutUserInput
    connect?: userProfileWhereUniqueInput
  }

  export type CommandUncheckedCreateNestedManyWithoutOpenerInput = {
    create?: XOR<CommandCreateWithoutOpenerInput, CommandUncheckedCreateWithoutOpenerInput> | CommandCreateWithoutOpenerInput[] | CommandUncheckedCreateWithoutOpenerInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutOpenerInput | CommandCreateOrConnectWithoutOpenerInput[]
    createMany?: CommandCreateManyOpenerInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type CommandUncheckedCreateNestedManyWithoutCloserInput = {
    create?: XOR<CommandCreateWithoutCloserInput, CommandUncheckedCreateWithoutCloserInput> | CommandCreateWithoutCloserInput[] | CommandUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCloserInput | CommandCreateOrConnectWithoutCloserInput[]
    createMany?: CommandCreateManyCloserInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<OrderCreateWithoutCreatorInput, OrderUncheckedCreateWithoutCreatorInput> | OrderCreateWithoutCreatorInput[] | OrderUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatorInput | OrderCreateOrConnectWithoutCreatorInput[]
    createMany?: OrderCreateManyCreatorInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutCloserInput = {
    create?: XOR<OrderCreateWithoutCloserInput, OrderUncheckedCreateWithoutCloserInput> | OrderCreateWithoutCloserInput[] | OrderUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCloserInput | OrderCreateOrConnectWithoutCloserInput[]
    createMany?: OrderCreateManyCloserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type CashBoxUncheckedCreateNestedManyWithoutOpenedInput = {
    create?: XOR<CashBoxCreateWithoutOpenedInput, CashBoxUncheckedCreateWithoutOpenedInput> | CashBoxCreateWithoutOpenedInput[] | CashBoxUncheckedCreateWithoutOpenedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutOpenedInput | CashBoxCreateOrConnectWithoutOpenedInput[]
    createMany?: CashBoxCreateManyOpenedInputEnvelope
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
  }

  export type CashBoxUncheckedCreateNestedManyWithoutClosedInput = {
    create?: XOR<CashBoxCreateWithoutClosedInput, CashBoxUncheckedCreateWithoutClosedInput> | CashBoxCreateWithoutClosedInput[] | CashBoxUncheckedCreateWithoutClosedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutClosedInput | CashBoxCreateOrConnectWithoutClosedInput[]
    createMany?: CashBoxCreateManyClosedInputEnvelope
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
  }

  export type CashBoxMovementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CashBoxMovementCreateWithoutUserInput, CashBoxMovementUncheckedCreateWithoutUserInput> | CashBoxMovementCreateWithoutUserInput[] | CashBoxMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutUserInput | CashBoxMovementCreateOrConnectWithoutUserInput[]
    createMany?: CashBoxMovementCreateManyUserInputEnvelope
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutReceiveInput = {
    create?: XOR<PaymentCreateWithoutReceiveInput, PaymentUncheckedCreateWithoutReceiveInput> | PaymentCreateWithoutReceiveInput[] | PaymentUncheckedCreateWithoutReceiveInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceiveInput | PaymentCreateOrConnectWithoutReceiveInput[]
    createMany?: PaymentCreateManyReceiveInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type InventoryMovementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InventoryMovementCreateWithoutUserInput, InventoryMovementUncheckedCreateWithoutUserInput> | InventoryMovementCreateWithoutUserInput[] | InventoryMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutUserInput | InventoryMovementCreateOrConnectWithoutUserInput[]
    createMany?: InventoryMovementCreateManyUserInputEnvelope
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type DocumentTypeUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutUsersInput, DocumentTypeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutUsersInput
    upsert?: DocumentTypeUpsertWithoutUsersInput
    connect?: DocumentTypeWhereUniqueInput
    update?: XOR<XOR<DocumentTypeUpdateToOneWithWhereWithoutUsersInput, DocumentTypeUpdateWithoutUsersInput>, DocumentTypeUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type AccountStatusUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AccountStatusCreateWithoutUsersInput, AccountStatusUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AccountStatusCreateOrConnectWithoutUsersInput
    upsert?: AccountStatusUpsertWithoutUsersInput
    connect?: AccountStatusWhereUniqueInput
    update?: XOR<XOR<AccountStatusUpdateToOneWithWhereWithoutUsersInput, AccountStatusUpdateWithoutUsersInput>, AccountStatusUncheckedUpdateWithoutUsersInput>
  }

  export type ThemeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThemeCreateWithoutUserInput, ThemeUncheckedCreateWithoutUserInput> | ThemeCreateWithoutUserInput[] | ThemeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemeCreateOrConnectWithoutUserInput | ThemeCreateOrConnectWithoutUserInput[]
    upsert?: ThemeUpsertWithWhereUniqueWithoutUserInput | ThemeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThemeCreateManyUserInputEnvelope
    set?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    disconnect?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    delete?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    connect?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    update?: ThemeUpdateWithWhereUniqueWithoutUserInput | ThemeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThemeUpdateManyWithWhereWithoutUserInput | ThemeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThemeScalarWhereInput | ThemeScalarWhereInput[]
  }

  export type CombineTableUpdateManyWithoutCombinerNestedInput = {
    create?: XOR<CombineTableCreateWithoutCombinerInput, CombineTableUncheckedCreateWithoutCombinerInput> | CombineTableCreateWithoutCombinerInput[] | CombineTableUncheckedCreateWithoutCombinerInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutCombinerInput | CombineTableCreateOrConnectWithoutCombinerInput[]
    upsert?: CombineTableUpsertWithWhereUniqueWithoutCombinerInput | CombineTableUpsertWithWhereUniqueWithoutCombinerInput[]
    createMany?: CombineTableCreateManyCombinerInputEnvelope
    set?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    disconnect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    delete?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    update?: CombineTableUpdateWithWhereUniqueWithoutCombinerInput | CombineTableUpdateWithWhereUniqueWithoutCombinerInput[]
    updateMany?: CombineTableUpdateManyWithWhereWithoutCombinerInput | CombineTableUpdateManyWithWhereWithoutCombinerInput[]
    deleteMany?: CombineTableScalarWhereInput | CombineTableScalarWhereInput[]
  }

  export type CombineTableUpdateManyWithoutReleaserNestedInput = {
    create?: XOR<CombineTableCreateWithoutReleaserInput, CombineTableUncheckedCreateWithoutReleaserInput> | CombineTableCreateWithoutReleaserInput[] | CombineTableUncheckedCreateWithoutReleaserInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutReleaserInput | CombineTableCreateOrConnectWithoutReleaserInput[]
    upsert?: CombineTableUpsertWithWhereUniqueWithoutReleaserInput | CombineTableUpsertWithWhereUniqueWithoutReleaserInput[]
    createMany?: CombineTableCreateManyReleaserInputEnvelope
    set?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    disconnect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    delete?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    update?: CombineTableUpdateWithWhereUniqueWithoutReleaserInput | CombineTableUpdateWithWhereUniqueWithoutReleaserInput[]
    updateMany?: CombineTableUpdateManyWithWhereWithoutReleaserInput | CombineTableUpdateManyWithWhereWithoutReleaserInput[]
    deleteMany?: CombineTableScalarWhereInput | CombineTableScalarWhereInput[]
  }

  export type userProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<userProfileCreateWithoutUserInput, userProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: userProfileCreateOrConnectWithoutUserInput
    upsert?: userProfileUpsertWithoutUserInput
    disconnect?: userProfileWhereInput | boolean
    delete?: userProfileWhereInput | boolean
    connect?: userProfileWhereUniqueInput
    update?: XOR<XOR<userProfileUpdateToOneWithWhereWithoutUserInput, userProfileUpdateWithoutUserInput>, userProfileUncheckedUpdateWithoutUserInput>
  }

  export type CommandUpdateManyWithoutOpenerNestedInput = {
    create?: XOR<CommandCreateWithoutOpenerInput, CommandUncheckedCreateWithoutOpenerInput> | CommandCreateWithoutOpenerInput[] | CommandUncheckedCreateWithoutOpenerInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutOpenerInput | CommandCreateOrConnectWithoutOpenerInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutOpenerInput | CommandUpsertWithWhereUniqueWithoutOpenerInput[]
    createMany?: CommandCreateManyOpenerInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutOpenerInput | CommandUpdateWithWhereUniqueWithoutOpenerInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutOpenerInput | CommandUpdateManyWithWhereWithoutOpenerInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type CommandUpdateManyWithoutCloserNestedInput = {
    create?: XOR<CommandCreateWithoutCloserInput, CommandUncheckedCreateWithoutCloserInput> | CommandCreateWithoutCloserInput[] | CommandUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCloserInput | CommandCreateOrConnectWithoutCloserInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutCloserInput | CommandUpsertWithWhereUniqueWithoutCloserInput[]
    createMany?: CommandCreateManyCloserInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutCloserInput | CommandUpdateWithWhereUniqueWithoutCloserInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutCloserInput | CommandUpdateManyWithWhereWithoutCloserInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<OrderCreateWithoutCreatorInput, OrderUncheckedCreateWithoutCreatorInput> | OrderCreateWithoutCreatorInput[] | OrderUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatorInput | OrderCreateOrConnectWithoutCreatorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCreatorInput | OrderUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: OrderCreateManyCreatorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCreatorInput | OrderUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCreatorInput | OrderUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutCloserNestedInput = {
    create?: XOR<OrderCreateWithoutCloserInput, OrderUncheckedCreateWithoutCloserInput> | OrderCreateWithoutCloserInput[] | OrderUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCloserInput | OrderCreateOrConnectWithoutCloserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCloserInput | OrderUpsertWithWhereUniqueWithoutCloserInput[]
    createMany?: OrderCreateManyCloserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCloserInput | OrderUpdateWithWhereUniqueWithoutCloserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCloserInput | OrderUpdateManyWithWhereWithoutCloserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CashBoxUpdateManyWithoutOpenedNestedInput = {
    create?: XOR<CashBoxCreateWithoutOpenedInput, CashBoxUncheckedCreateWithoutOpenedInput> | CashBoxCreateWithoutOpenedInput[] | CashBoxUncheckedCreateWithoutOpenedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutOpenedInput | CashBoxCreateOrConnectWithoutOpenedInput[]
    upsert?: CashBoxUpsertWithWhereUniqueWithoutOpenedInput | CashBoxUpsertWithWhereUniqueWithoutOpenedInput[]
    createMany?: CashBoxCreateManyOpenedInputEnvelope
    set?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    disconnect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    delete?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    update?: CashBoxUpdateWithWhereUniqueWithoutOpenedInput | CashBoxUpdateWithWhereUniqueWithoutOpenedInput[]
    updateMany?: CashBoxUpdateManyWithWhereWithoutOpenedInput | CashBoxUpdateManyWithWhereWithoutOpenedInput[]
    deleteMany?: CashBoxScalarWhereInput | CashBoxScalarWhereInput[]
  }

  export type CashBoxUpdateManyWithoutClosedNestedInput = {
    create?: XOR<CashBoxCreateWithoutClosedInput, CashBoxUncheckedCreateWithoutClosedInput> | CashBoxCreateWithoutClosedInput[] | CashBoxUncheckedCreateWithoutClosedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutClosedInput | CashBoxCreateOrConnectWithoutClosedInput[]
    upsert?: CashBoxUpsertWithWhereUniqueWithoutClosedInput | CashBoxUpsertWithWhereUniqueWithoutClosedInput[]
    createMany?: CashBoxCreateManyClosedInputEnvelope
    set?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    disconnect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    delete?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    update?: CashBoxUpdateWithWhereUniqueWithoutClosedInput | CashBoxUpdateWithWhereUniqueWithoutClosedInput[]
    updateMany?: CashBoxUpdateManyWithWhereWithoutClosedInput | CashBoxUpdateManyWithWhereWithoutClosedInput[]
    deleteMany?: CashBoxScalarWhereInput | CashBoxScalarWhereInput[]
  }

  export type CashBoxMovementUpdateManyWithoutUserNestedInput = {
    create?: XOR<CashBoxMovementCreateWithoutUserInput, CashBoxMovementUncheckedCreateWithoutUserInput> | CashBoxMovementCreateWithoutUserInput[] | CashBoxMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutUserInput | CashBoxMovementCreateOrConnectWithoutUserInput[]
    upsert?: CashBoxMovementUpsertWithWhereUniqueWithoutUserInput | CashBoxMovementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CashBoxMovementCreateManyUserInputEnvelope
    set?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    disconnect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    delete?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    update?: CashBoxMovementUpdateWithWhereUniqueWithoutUserInput | CashBoxMovementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CashBoxMovementUpdateManyWithWhereWithoutUserInput | CashBoxMovementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutReceiveNestedInput = {
    create?: XOR<PaymentCreateWithoutReceiveInput, PaymentUncheckedCreateWithoutReceiveInput> | PaymentCreateWithoutReceiveInput[] | PaymentUncheckedCreateWithoutReceiveInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceiveInput | PaymentCreateOrConnectWithoutReceiveInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReceiveInput | PaymentUpsertWithWhereUniqueWithoutReceiveInput[]
    createMany?: PaymentCreateManyReceiveInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReceiveInput | PaymentUpdateWithWhereUniqueWithoutReceiveInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReceiveInput | PaymentUpdateManyWithWhereWithoutReceiveInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type InventoryMovementUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryMovementCreateWithoutUserInput, InventoryMovementUncheckedCreateWithoutUserInput> | InventoryMovementCreateWithoutUserInput[] | InventoryMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutUserInput | InventoryMovementCreateOrConnectWithoutUserInput[]
    upsert?: InventoryMovementUpsertWithWhereUniqueWithoutUserInput | InventoryMovementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryMovementCreateManyUserInputEnvelope
    set?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    disconnect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    delete?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    update?: InventoryMovementUpdateWithWhereUniqueWithoutUserInput | InventoryMovementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryMovementUpdateManyWithWhereWithoutUserInput | InventoryMovementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type LogUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type ThemeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThemeCreateWithoutUserInput, ThemeUncheckedCreateWithoutUserInput> | ThemeCreateWithoutUserInput[] | ThemeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThemeCreateOrConnectWithoutUserInput | ThemeCreateOrConnectWithoutUserInput[]
    upsert?: ThemeUpsertWithWhereUniqueWithoutUserInput | ThemeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThemeCreateManyUserInputEnvelope
    set?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    disconnect?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    delete?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    connect?: ThemeWhereUniqueInput | ThemeWhereUniqueInput[]
    update?: ThemeUpdateWithWhereUniqueWithoutUserInput | ThemeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThemeUpdateManyWithWhereWithoutUserInput | ThemeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThemeScalarWhereInput | ThemeScalarWhereInput[]
  }

  export type CombineTableUncheckedUpdateManyWithoutCombinerNestedInput = {
    create?: XOR<CombineTableCreateWithoutCombinerInput, CombineTableUncheckedCreateWithoutCombinerInput> | CombineTableCreateWithoutCombinerInput[] | CombineTableUncheckedCreateWithoutCombinerInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutCombinerInput | CombineTableCreateOrConnectWithoutCombinerInput[]
    upsert?: CombineTableUpsertWithWhereUniqueWithoutCombinerInput | CombineTableUpsertWithWhereUniqueWithoutCombinerInput[]
    createMany?: CombineTableCreateManyCombinerInputEnvelope
    set?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    disconnect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    delete?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    update?: CombineTableUpdateWithWhereUniqueWithoutCombinerInput | CombineTableUpdateWithWhereUniqueWithoutCombinerInput[]
    updateMany?: CombineTableUpdateManyWithWhereWithoutCombinerInput | CombineTableUpdateManyWithWhereWithoutCombinerInput[]
    deleteMany?: CombineTableScalarWhereInput | CombineTableScalarWhereInput[]
  }

  export type CombineTableUncheckedUpdateManyWithoutReleaserNestedInput = {
    create?: XOR<CombineTableCreateWithoutReleaserInput, CombineTableUncheckedCreateWithoutReleaserInput> | CombineTableCreateWithoutReleaserInput[] | CombineTableUncheckedCreateWithoutReleaserInput[]
    connectOrCreate?: CombineTableCreateOrConnectWithoutReleaserInput | CombineTableCreateOrConnectWithoutReleaserInput[]
    upsert?: CombineTableUpsertWithWhereUniqueWithoutReleaserInput | CombineTableUpsertWithWhereUniqueWithoutReleaserInput[]
    createMany?: CombineTableCreateManyReleaserInputEnvelope
    set?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    disconnect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    delete?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    connect?: CombineTableWhereUniqueInput | CombineTableWhereUniqueInput[]
    update?: CombineTableUpdateWithWhereUniqueWithoutReleaserInput | CombineTableUpdateWithWhereUniqueWithoutReleaserInput[]
    updateMany?: CombineTableUpdateManyWithWhereWithoutReleaserInput | CombineTableUpdateManyWithWhereWithoutReleaserInput[]
    deleteMany?: CombineTableScalarWhereInput | CombineTableScalarWhereInput[]
  }

  export type userProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<userProfileCreateWithoutUserInput, userProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: userProfileCreateOrConnectWithoutUserInput
    upsert?: userProfileUpsertWithoutUserInput
    disconnect?: userProfileWhereInput | boolean
    delete?: userProfileWhereInput | boolean
    connect?: userProfileWhereUniqueInput
    update?: XOR<XOR<userProfileUpdateToOneWithWhereWithoutUserInput, userProfileUpdateWithoutUserInput>, userProfileUncheckedUpdateWithoutUserInput>
  }

  export type CommandUncheckedUpdateManyWithoutOpenerNestedInput = {
    create?: XOR<CommandCreateWithoutOpenerInput, CommandUncheckedCreateWithoutOpenerInput> | CommandCreateWithoutOpenerInput[] | CommandUncheckedCreateWithoutOpenerInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutOpenerInput | CommandCreateOrConnectWithoutOpenerInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutOpenerInput | CommandUpsertWithWhereUniqueWithoutOpenerInput[]
    createMany?: CommandCreateManyOpenerInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutOpenerInput | CommandUpdateWithWhereUniqueWithoutOpenerInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutOpenerInput | CommandUpdateManyWithWhereWithoutOpenerInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type CommandUncheckedUpdateManyWithoutCloserNestedInput = {
    create?: XOR<CommandCreateWithoutCloserInput, CommandUncheckedCreateWithoutCloserInput> | CommandCreateWithoutCloserInput[] | CommandUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCloserInput | CommandCreateOrConnectWithoutCloserInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutCloserInput | CommandUpsertWithWhereUniqueWithoutCloserInput[]
    createMany?: CommandCreateManyCloserInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutCloserInput | CommandUpdateWithWhereUniqueWithoutCloserInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutCloserInput | CommandUpdateManyWithWhereWithoutCloserInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<OrderCreateWithoutCreatorInput, OrderUncheckedCreateWithoutCreatorInput> | OrderCreateWithoutCreatorInput[] | OrderUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCreatorInput | OrderCreateOrConnectWithoutCreatorInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCreatorInput | OrderUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: OrderCreateManyCreatorInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCreatorInput | OrderUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCreatorInput | OrderUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutCloserNestedInput = {
    create?: XOR<OrderCreateWithoutCloserInput, OrderUncheckedCreateWithoutCloserInput> | OrderCreateWithoutCloserInput[] | OrderUncheckedCreateWithoutCloserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCloserInput | OrderCreateOrConnectWithoutCloserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCloserInput | OrderUpsertWithWhereUniqueWithoutCloserInput[]
    createMany?: OrderCreateManyCloserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCloserInput | OrderUpdateWithWhereUniqueWithoutCloserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCloserInput | OrderUpdateManyWithWhereWithoutCloserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type CashBoxUncheckedUpdateManyWithoutOpenedNestedInput = {
    create?: XOR<CashBoxCreateWithoutOpenedInput, CashBoxUncheckedCreateWithoutOpenedInput> | CashBoxCreateWithoutOpenedInput[] | CashBoxUncheckedCreateWithoutOpenedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutOpenedInput | CashBoxCreateOrConnectWithoutOpenedInput[]
    upsert?: CashBoxUpsertWithWhereUniqueWithoutOpenedInput | CashBoxUpsertWithWhereUniqueWithoutOpenedInput[]
    createMany?: CashBoxCreateManyOpenedInputEnvelope
    set?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    disconnect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    delete?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    update?: CashBoxUpdateWithWhereUniqueWithoutOpenedInput | CashBoxUpdateWithWhereUniqueWithoutOpenedInput[]
    updateMany?: CashBoxUpdateManyWithWhereWithoutOpenedInput | CashBoxUpdateManyWithWhereWithoutOpenedInput[]
    deleteMany?: CashBoxScalarWhereInput | CashBoxScalarWhereInput[]
  }

  export type CashBoxUncheckedUpdateManyWithoutClosedNestedInput = {
    create?: XOR<CashBoxCreateWithoutClosedInput, CashBoxUncheckedCreateWithoutClosedInput> | CashBoxCreateWithoutClosedInput[] | CashBoxUncheckedCreateWithoutClosedInput[]
    connectOrCreate?: CashBoxCreateOrConnectWithoutClosedInput | CashBoxCreateOrConnectWithoutClosedInput[]
    upsert?: CashBoxUpsertWithWhereUniqueWithoutClosedInput | CashBoxUpsertWithWhereUniqueWithoutClosedInput[]
    createMany?: CashBoxCreateManyClosedInputEnvelope
    set?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    disconnect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    delete?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    connect?: CashBoxWhereUniqueInput | CashBoxWhereUniqueInput[]
    update?: CashBoxUpdateWithWhereUniqueWithoutClosedInput | CashBoxUpdateWithWhereUniqueWithoutClosedInput[]
    updateMany?: CashBoxUpdateManyWithWhereWithoutClosedInput | CashBoxUpdateManyWithWhereWithoutClosedInput[]
    deleteMany?: CashBoxScalarWhereInput | CashBoxScalarWhereInput[]
  }

  export type CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CashBoxMovementCreateWithoutUserInput, CashBoxMovementUncheckedCreateWithoutUserInput> | CashBoxMovementCreateWithoutUserInput[] | CashBoxMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutUserInput | CashBoxMovementCreateOrConnectWithoutUserInput[]
    upsert?: CashBoxMovementUpsertWithWhereUniqueWithoutUserInput | CashBoxMovementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CashBoxMovementCreateManyUserInputEnvelope
    set?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    disconnect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    delete?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    update?: CashBoxMovementUpdateWithWhereUniqueWithoutUserInput | CashBoxMovementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CashBoxMovementUpdateManyWithWhereWithoutUserInput | CashBoxMovementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutReceiveNestedInput = {
    create?: XOR<PaymentCreateWithoutReceiveInput, PaymentUncheckedCreateWithoutReceiveInput> | PaymentCreateWithoutReceiveInput[] | PaymentUncheckedCreateWithoutReceiveInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReceiveInput | PaymentCreateOrConnectWithoutReceiveInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReceiveInput | PaymentUpsertWithWhereUniqueWithoutReceiveInput[]
    createMany?: PaymentCreateManyReceiveInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReceiveInput | PaymentUpdateWithWhereUniqueWithoutReceiveInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReceiveInput | PaymentUpdateManyWithWhereWithoutReceiveInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type InventoryMovementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InventoryMovementCreateWithoutUserInput, InventoryMovementUncheckedCreateWithoutUserInput> | InventoryMovementCreateWithoutUserInput[] | InventoryMovementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutUserInput | InventoryMovementCreateOrConnectWithoutUserInput[]
    upsert?: InventoryMovementUpsertWithWhereUniqueWithoutUserInput | InventoryMovementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InventoryMovementCreateManyUserInputEnvelope
    set?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    disconnect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    delete?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    update?: InventoryMovementUpdateWithWhereUniqueWithoutUserInput | InventoryMovementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InventoryMovementUpdateManyWithWhereWithoutUserInput | InventoryMovementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput> | LogCreateWithoutUserInput[] | LogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogCreateOrConnectWithoutUserInput | LogCreateOrConnectWithoutUserInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutUserInput | LogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogCreateManyUserInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutUserInput | LogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogUpdateManyWithWhereWithoutUserInput | LogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserProfileInput = {
    create?: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ThemeCreateNestedOneWithoutUsersUsingThisThemeInput = {
    create?: XOR<ThemeCreateWithoutUsersUsingThisThemeInput, ThemeUncheckedCreateWithoutUsersUsingThisThemeInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutUsersUsingThisThemeInput
    connect?: ThemeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserProfileNestedInput = {
    create?: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileInput
    upsert?: UserUpsertWithoutUserProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProfileInput, UserUpdateWithoutUserProfileInput>, UserUncheckedUpdateWithoutUserProfileInput>
  }

  export type ThemeUpdateOneWithoutUsersUsingThisThemeNestedInput = {
    create?: XOR<ThemeCreateWithoutUsersUsingThisThemeInput, ThemeUncheckedCreateWithoutUsersUsingThisThemeInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutUsersUsingThisThemeInput
    upsert?: ThemeUpsertWithoutUsersUsingThisThemeInput
    disconnect?: ThemeWhereInput | boolean
    delete?: ThemeWhereInput | boolean
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutUsersUsingThisThemeInput, ThemeUpdateWithoutUsersUsingThisThemeInput>, ThemeUncheckedUpdateWithoutUsersUsingThisThemeInput>
  }

  export type DocumentTypeCreateNestedOneWithoutCustomersInput = {
    create?: XOR<DocumentTypeCreateWithoutCustomersInput, DocumentTypeUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCustomersInput
    connect?: DocumentTypeWhereUniqueInput
  }

  export type AccountStatusCreateNestedOneWithoutCustomersInput = {
    create?: XOR<AccountStatusCreateWithoutCustomersInput, AccountStatusUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: AccountStatusCreateOrConnectWithoutCustomersInput
    connect?: AccountStatusWhereUniqueInput
  }

  export type CustomerProfileCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerProfileCreateWithoutCustomerInput, CustomerProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutCustomerInput
    connect?: CustomerProfileWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutPaidInput = {
    create?: XOR<PaymentCreateWithoutPaidInput, PaymentUncheckedCreateWithoutPaidInput> | PaymentCreateWithoutPaidInput[] | PaymentUncheckedCreateWithoutPaidInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaidInput | PaymentCreateOrConnectWithoutPaidInput[]
    createMany?: PaymentCreateManyPaidInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SessionCreateWithoutCustomerInput, SessionUncheckedCreateWithoutCustomerInput> | SessionCreateWithoutCustomerInput[] | SessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCustomerInput | SessionCreateOrConnectWithoutCustomerInput[]
    createMany?: SessionCreateManyCustomerInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type LogCreateNestedManyWithoutCustomerInput = {
    create?: XOR<LogCreateWithoutCustomerInput, LogUncheckedCreateWithoutCustomerInput> | LogCreateWithoutCustomerInput[] | LogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCustomerInput | LogCreateOrConnectWithoutCustomerInput[]
    createMany?: LogCreateManyCustomerInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerProfileCreateWithoutCustomerInput, CustomerProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutCustomerInput
    connect?: CustomerProfileWhereUniqueInput
  }

  export type OrderUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPaidInput = {
    create?: XOR<PaymentCreateWithoutPaidInput, PaymentUncheckedCreateWithoutPaidInput> | PaymentCreateWithoutPaidInput[] | PaymentUncheckedCreateWithoutPaidInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaidInput | PaymentCreateOrConnectWithoutPaidInput[]
    createMany?: PaymentCreateManyPaidInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SessionCreateWithoutCustomerInput, SessionUncheckedCreateWithoutCustomerInput> | SessionCreateWithoutCustomerInput[] | SessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCustomerInput | SessionCreateOrConnectWithoutCustomerInput[]
    createMany?: SessionCreateManyCustomerInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type LogUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<LogCreateWithoutCustomerInput, LogUncheckedCreateWithoutCustomerInput> | LogCreateWithoutCustomerInput[] | LogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCustomerInput | LogCreateOrConnectWithoutCustomerInput[]
    createMany?: LogCreateManyCustomerInputEnvelope
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
  }

  export type DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<DocumentTypeCreateWithoutCustomersInput, DocumentTypeUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: DocumentTypeCreateOrConnectWithoutCustomersInput
    upsert?: DocumentTypeUpsertWithoutCustomersInput
    connect?: DocumentTypeWhereUniqueInput
    update?: XOR<XOR<DocumentTypeUpdateToOneWithWhereWithoutCustomersInput, DocumentTypeUpdateWithoutCustomersInput>, DocumentTypeUncheckedUpdateWithoutCustomersInput>
  }

  export type AccountStatusUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<AccountStatusCreateWithoutCustomersInput, AccountStatusUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: AccountStatusCreateOrConnectWithoutCustomersInput
    upsert?: AccountStatusUpsertWithoutCustomersInput
    connect?: AccountStatusWhereUniqueInput
    update?: XOR<XOR<AccountStatusUpdateToOneWithWhereWithoutCustomersInput, AccountStatusUpdateWithoutCustomersInput>, AccountStatusUncheckedUpdateWithoutCustomersInput>
  }

  export type CustomerProfileUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerProfileCreateWithoutCustomerInput, CustomerProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutCustomerInput
    upsert?: CustomerProfileUpsertWithoutCustomerInput
    disconnect?: CustomerProfileWhereInput | boolean
    delete?: CustomerProfileWhereInput | boolean
    connect?: CustomerProfileWhereUniqueInput
    update?: XOR<XOR<CustomerProfileUpdateToOneWithWhereWithoutCustomerInput, CustomerProfileUpdateWithoutCustomerInput>, CustomerProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCustomerInput | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCustomerInput | OrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutPaidNestedInput = {
    create?: XOR<PaymentCreateWithoutPaidInput, PaymentUncheckedCreateWithoutPaidInput> | PaymentCreateWithoutPaidInput[] | PaymentUncheckedCreateWithoutPaidInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaidInput | PaymentCreateOrConnectWithoutPaidInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPaidInput | PaymentUpsertWithWhereUniqueWithoutPaidInput[]
    createMany?: PaymentCreateManyPaidInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPaidInput | PaymentUpdateWithWhereUniqueWithoutPaidInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPaidInput | PaymentUpdateManyWithWhereWithoutPaidInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SessionCreateWithoutCustomerInput, SessionUncheckedCreateWithoutCustomerInput> | SessionCreateWithoutCustomerInput[] | SessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCustomerInput | SessionCreateOrConnectWithoutCustomerInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutCustomerInput | SessionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SessionCreateManyCustomerInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutCustomerInput | SessionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutCustomerInput | SessionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type LogUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<LogCreateWithoutCustomerInput, LogUncheckedCreateWithoutCustomerInput> | LogCreateWithoutCustomerInput[] | LogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCustomerInput | LogCreateOrConnectWithoutCustomerInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutCustomerInput | LogUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: LogCreateManyCustomerInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutCustomerInput | LogUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: LogUpdateManyWithWhereWithoutCustomerInput | LogUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerProfileCreateWithoutCustomerInput, CustomerProfileUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerProfileCreateOrConnectWithoutCustomerInput
    upsert?: CustomerProfileUpsertWithoutCustomerInput
    disconnect?: CustomerProfileWhereInput | boolean
    delete?: CustomerProfileWhereInput | boolean
    connect?: CustomerProfileWhereUniqueInput
    update?: XOR<XOR<CustomerProfileUpdateToOneWithWhereWithoutCustomerInput, CustomerProfileUpdateWithoutCustomerInput>, CustomerProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput> | OrderCreateWithoutCustomerInput[] | OrderUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCustomerInput | OrderCreateOrConnectWithoutCustomerInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: OrderCreateManyCustomerInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCustomerInput | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCustomerInput | OrderUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPaidNestedInput = {
    create?: XOR<PaymentCreateWithoutPaidInput, PaymentUncheckedCreateWithoutPaidInput> | PaymentCreateWithoutPaidInput[] | PaymentUncheckedCreateWithoutPaidInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaidInput | PaymentCreateOrConnectWithoutPaidInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPaidInput | PaymentUpsertWithWhereUniqueWithoutPaidInput[]
    createMany?: PaymentCreateManyPaidInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPaidInput | PaymentUpdateWithWhereUniqueWithoutPaidInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPaidInput | PaymentUpdateManyWithWhereWithoutPaidInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SessionCreateWithoutCustomerInput, SessionUncheckedCreateWithoutCustomerInput> | SessionCreateWithoutCustomerInput[] | SessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutCustomerInput | SessionCreateOrConnectWithoutCustomerInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutCustomerInput | SessionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SessionCreateManyCustomerInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutCustomerInput | SessionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutCustomerInput | SessionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type LogUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<LogCreateWithoutCustomerInput, LogUncheckedCreateWithoutCustomerInput> | LogCreateWithoutCustomerInput[] | LogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: LogCreateOrConnectWithoutCustomerInput | LogCreateOrConnectWithoutCustomerInput[]
    upsert?: LogUpsertWithWhereUniqueWithoutCustomerInput | LogUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: LogCreateManyCustomerInputEnvelope
    set?: LogWhereUniqueInput | LogWhereUniqueInput[]
    disconnect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    delete?: LogWhereUniqueInput | LogWhereUniqueInput[]
    connect?: LogWhereUniqueInput | LogWhereUniqueInput[]
    update?: LogUpdateWithWhereUniqueWithoutCustomerInput | LogUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: LogUpdateManyWithWhereWithoutCustomerInput | LogUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: LogScalarWhereInput | LogScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutProfileInput = {
    create?: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutProfileInput
    connect?: CustomerWhereUniqueInput
  }

  export type ThemeCreateNestedOneWithoutCustomersUsingThisThemeInput = {
    create?: XOR<ThemeCreateWithoutCustomersUsingThisThemeInput, ThemeUncheckedCreateWithoutCustomersUsingThisThemeInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutCustomersUsingThisThemeInput
    connect?: ThemeWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutProfileInput
    upsert?: CustomerUpsertWithoutProfileInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutProfileInput, CustomerUpdateWithoutProfileInput>, CustomerUncheckedUpdateWithoutProfileInput>
  }

  export type ThemeUpdateOneWithoutCustomersUsingThisThemeNestedInput = {
    create?: XOR<ThemeCreateWithoutCustomersUsingThisThemeInput, ThemeUncheckedCreateWithoutCustomersUsingThisThemeInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutCustomersUsingThisThemeInput
    upsert?: ThemeUpsertWithoutCustomersUsingThisThemeInput
    disconnect?: ThemeWhereInput | boolean
    delete?: ThemeWhereInput | boolean
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutCustomersUsingThisThemeInput, ThemeUpdateWithoutCustomersUsingThisThemeInput>, ThemeUncheckedUpdateWithoutCustomersUsingThisThemeInput>
  }

  export type CommandCreateNestedManyWithoutCommandStatusInput = {
    create?: XOR<CommandCreateWithoutCommandStatusInput, CommandUncheckedCreateWithoutCommandStatusInput> | CommandCreateWithoutCommandStatusInput[] | CommandUncheckedCreateWithoutCommandStatusInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCommandStatusInput | CommandCreateOrConnectWithoutCommandStatusInput[]
    createMany?: CommandCreateManyCommandStatusInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type CommandUncheckedCreateNestedManyWithoutCommandStatusInput = {
    create?: XOR<CommandCreateWithoutCommandStatusInput, CommandUncheckedCreateWithoutCommandStatusInput> | CommandCreateWithoutCommandStatusInput[] | CommandUncheckedCreateWithoutCommandStatusInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCommandStatusInput | CommandCreateOrConnectWithoutCommandStatusInput[]
    createMany?: CommandCreateManyCommandStatusInputEnvelope
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
  }

  export type CommandUpdateManyWithoutCommandStatusNestedInput = {
    create?: XOR<CommandCreateWithoutCommandStatusInput, CommandUncheckedCreateWithoutCommandStatusInput> | CommandCreateWithoutCommandStatusInput[] | CommandUncheckedCreateWithoutCommandStatusInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCommandStatusInput | CommandCreateOrConnectWithoutCommandStatusInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutCommandStatusInput | CommandUpsertWithWhereUniqueWithoutCommandStatusInput[]
    createMany?: CommandCreateManyCommandStatusInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutCommandStatusInput | CommandUpdateWithWhereUniqueWithoutCommandStatusInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutCommandStatusInput | CommandUpdateManyWithWhereWithoutCommandStatusInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type CommandUncheckedUpdateManyWithoutCommandStatusNestedInput = {
    create?: XOR<CommandCreateWithoutCommandStatusInput, CommandUncheckedCreateWithoutCommandStatusInput> | CommandCreateWithoutCommandStatusInput[] | CommandUncheckedCreateWithoutCommandStatusInput[]
    connectOrCreate?: CommandCreateOrConnectWithoutCommandStatusInput | CommandCreateOrConnectWithoutCommandStatusInput[]
    upsert?: CommandUpsertWithWhereUniqueWithoutCommandStatusInput | CommandUpsertWithWhereUniqueWithoutCommandStatusInput[]
    createMany?: CommandCreateManyCommandStatusInputEnvelope
    set?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    disconnect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    delete?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    connect?: CommandWhereUniqueInput | CommandWhereUniqueInput[]
    update?: CommandUpdateWithWhereUniqueWithoutCommandStatusInput | CommandUpdateWithWhereUniqueWithoutCommandStatusInput[]
    updateMany?: CommandUpdateManyWithWhereWithoutCommandStatusInput | CommandUpdateManyWithWhereWithoutCommandStatusInput[]
    deleteMany?: CommandScalarWhereInput | CommandScalarWhereInput[]
  }

  export type TableCreateNestedOneWithoutCommandsInput = {
    create?: XOR<TableCreateWithoutCommandsInput, TableUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: TableCreateOrConnectWithoutCommandsInput
    connect?: TableWhereUniqueInput
  }

  export type CombineTableCreateNestedOneWithoutCommandsInput = {
    create?: XOR<CombineTableCreateWithoutCommandsInput, CombineTableUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: CombineTableCreateOrConnectWithoutCommandsInput
    connect?: CombineTableWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommandOpenerInput = {
    create?: XOR<UserCreateWithoutCommandOpenerInput, UserUncheckedCreateWithoutCommandOpenerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommandOpenerInput
    connect?: UserWhereUniqueInput
  }

  export type CommandStatusCreateNestedOneWithoutCommandsInput = {
    create?: XOR<CommandStatusCreateWithoutCommandsInput, CommandStatusUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: CommandStatusCreateOrConnectWithoutCommandsInput
    connect?: CommandStatusWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommandCloserInput = {
    create?: XOR<UserCreateWithoutCommandCloserInput, UserUncheckedCreateWithoutCommandCloserInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommandCloserInput
    connect?: UserWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutCommandInput = {
    create?: XOR<OrderCreateWithoutCommandInput, OrderUncheckedCreateWithoutCommandInput> | OrderCreateWithoutCommandInput[] | OrderUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCommandInput | OrderCreateOrConnectWithoutCommandInput[]
    createMany?: OrderCreateManyCommandInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderItemCreateNestedManyWithoutCommandInput = {
    create?: XOR<OrderItemCreateWithoutCommandInput, OrderItemUncheckedCreateWithoutCommandInput> | OrderItemCreateWithoutCommandInput[] | OrderItemUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutCommandInput | OrderItemCreateOrConnectWithoutCommandInput[]
    createMany?: OrderItemCreateManyCommandInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutCommandInput = {
    create?: XOR<OrderCreateWithoutCommandInput, OrderUncheckedCreateWithoutCommandInput> | OrderCreateWithoutCommandInput[] | OrderUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCommandInput | OrderCreateOrConnectWithoutCommandInput[]
    createMany?: OrderCreateManyCommandInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutCommandInput = {
    create?: XOR<OrderItemCreateWithoutCommandInput, OrderItemUncheckedCreateWithoutCommandInput> | OrderItemCreateWithoutCommandInput[] | OrderItemUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutCommandInput | OrderItemCreateOrConnectWithoutCommandInput[]
    createMany?: OrderItemCreateManyCommandInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type TableUpdateOneWithoutCommandsNestedInput = {
    create?: XOR<TableCreateWithoutCommandsInput, TableUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: TableCreateOrConnectWithoutCommandsInput
    upsert?: TableUpsertWithoutCommandsInput
    disconnect?: TableWhereInput | boolean
    delete?: TableWhereInput | boolean
    connect?: TableWhereUniqueInput
    update?: XOR<XOR<TableUpdateToOneWithWhereWithoutCommandsInput, TableUpdateWithoutCommandsInput>, TableUncheckedUpdateWithoutCommandsInput>
  }

  export type CombineTableUpdateOneWithoutCommandsNestedInput = {
    create?: XOR<CombineTableCreateWithoutCommandsInput, CombineTableUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: CombineTableCreateOrConnectWithoutCommandsInput
    upsert?: CombineTableUpsertWithoutCommandsInput
    disconnect?: CombineTableWhereInput | boolean
    delete?: CombineTableWhereInput | boolean
    connect?: CombineTableWhereUniqueInput
    update?: XOR<XOR<CombineTableUpdateToOneWithWhereWithoutCommandsInput, CombineTableUpdateWithoutCommandsInput>, CombineTableUncheckedUpdateWithoutCommandsInput>
  }

  export type UserUpdateOneRequiredWithoutCommandOpenerNestedInput = {
    create?: XOR<UserCreateWithoutCommandOpenerInput, UserUncheckedCreateWithoutCommandOpenerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommandOpenerInput
    upsert?: UserUpsertWithoutCommandOpenerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommandOpenerInput, UserUpdateWithoutCommandOpenerInput>, UserUncheckedUpdateWithoutCommandOpenerInput>
  }

  export type CommandStatusUpdateOneRequiredWithoutCommandsNestedInput = {
    create?: XOR<CommandStatusCreateWithoutCommandsInput, CommandStatusUncheckedCreateWithoutCommandsInput>
    connectOrCreate?: CommandStatusCreateOrConnectWithoutCommandsInput
    upsert?: CommandStatusUpsertWithoutCommandsInput
    connect?: CommandStatusWhereUniqueInput
    update?: XOR<XOR<CommandStatusUpdateToOneWithWhereWithoutCommandsInput, CommandStatusUpdateWithoutCommandsInput>, CommandStatusUncheckedUpdateWithoutCommandsInput>
  }

  export type UserUpdateOneWithoutCommandCloserNestedInput = {
    create?: XOR<UserCreateWithoutCommandCloserInput, UserUncheckedCreateWithoutCommandCloserInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommandCloserInput
    upsert?: UserUpsertWithoutCommandCloserInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommandCloserInput, UserUpdateWithoutCommandCloserInput>, UserUncheckedUpdateWithoutCommandCloserInput>
  }

  export type OrderUpdateManyWithoutCommandNestedInput = {
    create?: XOR<OrderCreateWithoutCommandInput, OrderUncheckedCreateWithoutCommandInput> | OrderCreateWithoutCommandInput[] | OrderUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCommandInput | OrderCreateOrConnectWithoutCommandInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCommandInput | OrderUpsertWithWhereUniqueWithoutCommandInput[]
    createMany?: OrderCreateManyCommandInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCommandInput | OrderUpdateWithWhereUniqueWithoutCommandInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCommandInput | OrderUpdateManyWithWhereWithoutCommandInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderItemUpdateManyWithoutCommandNestedInput = {
    create?: XOR<OrderItemCreateWithoutCommandInput, OrderItemUncheckedCreateWithoutCommandInput> | OrderItemCreateWithoutCommandInput[] | OrderItemUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutCommandInput | OrderItemCreateOrConnectWithoutCommandInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutCommandInput | OrderItemUpsertWithWhereUniqueWithoutCommandInput[]
    createMany?: OrderItemCreateManyCommandInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutCommandInput | OrderItemUpdateWithWhereUniqueWithoutCommandInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutCommandInput | OrderItemUpdateManyWithWhereWithoutCommandInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutCommandNestedInput = {
    create?: XOR<OrderCreateWithoutCommandInput, OrderUncheckedCreateWithoutCommandInput> | OrderCreateWithoutCommandInput[] | OrderUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutCommandInput | OrderCreateOrConnectWithoutCommandInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutCommandInput | OrderUpsertWithWhereUniqueWithoutCommandInput[]
    createMany?: OrderCreateManyCommandInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutCommandInput | OrderUpdateWithWhereUniqueWithoutCommandInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutCommandInput | OrderUpdateManyWithWhereWithoutCommandInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutCommandNestedInput = {
    create?: XOR<OrderItemCreateWithoutCommandInput, OrderItemUncheckedCreateWithoutCommandInput> | OrderItemCreateWithoutCommandInput[] | OrderItemUncheckedCreateWithoutCommandInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutCommandInput | OrderItemCreateOrConnectWithoutCommandInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutCommandInput | OrderItemUpsertWithWhereUniqueWithoutCommandInput[]
    createMany?: OrderItemCreateManyCommandInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutCommandInput | OrderItemUpdateWithWhereUniqueWithoutCommandInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutCommandInput | OrderItemUpdateManyWithWhereWithoutCommandInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderCreateNestedManyWithoutOrderStatusInput = {
    create?: XOR<OrderCreateWithoutOrderStatusInput, OrderUncheckedCreateWithoutOrderStatusInput> | OrderCreateWithoutOrderStatusInput[] | OrderUncheckedCreateWithoutOrderStatusInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOrderStatusInput | OrderCreateOrConnectWithoutOrderStatusInput[]
    createMany?: OrderCreateManyOrderStatusInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutOrderStatusInput = {
    create?: XOR<OrderCreateWithoutOrderStatusInput, OrderUncheckedCreateWithoutOrderStatusInput> | OrderCreateWithoutOrderStatusInput[] | OrderUncheckedCreateWithoutOrderStatusInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOrderStatusInput | OrderCreateOrConnectWithoutOrderStatusInput[]
    createMany?: OrderCreateManyOrderStatusInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type OrderUpdateManyWithoutOrderStatusNestedInput = {
    create?: XOR<OrderCreateWithoutOrderStatusInput, OrderUncheckedCreateWithoutOrderStatusInput> | OrderCreateWithoutOrderStatusInput[] | OrderUncheckedCreateWithoutOrderStatusInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOrderStatusInput | OrderCreateOrConnectWithoutOrderStatusInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutOrderStatusInput | OrderUpsertWithWhereUniqueWithoutOrderStatusInput[]
    createMany?: OrderCreateManyOrderStatusInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutOrderStatusInput | OrderUpdateWithWhereUniqueWithoutOrderStatusInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutOrderStatusInput | OrderUpdateManyWithWhereWithoutOrderStatusInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutOrderStatusNestedInput = {
    create?: XOR<OrderCreateWithoutOrderStatusInput, OrderUncheckedCreateWithoutOrderStatusInput> | OrderCreateWithoutOrderStatusInput[] | OrderUncheckedCreateWithoutOrderStatusInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOrderStatusInput | OrderCreateOrConnectWithoutOrderStatusInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutOrderStatusInput | OrderUpsertWithWhereUniqueWithoutOrderStatusInput[]
    createMany?: OrderCreateManyOrderStatusInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutOrderStatusInput | OrderUpdateWithWhereUniqueWithoutOrderStatusInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutOrderStatusInput | OrderUpdateManyWithWhereWithoutOrderStatusInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type OrderItemCreateNestedManyWithoutOrderItemStatusInput = {
    create?: XOR<OrderItemCreateWithoutOrderItemStatusInput, OrderItemUncheckedCreateWithoutOrderItemStatusInput> | OrderItemCreateWithoutOrderItemStatusInput[] | OrderItemUncheckedCreateWithoutOrderItemStatusInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderItemStatusInput | OrderItemCreateOrConnectWithoutOrderItemStatusInput[]
    createMany?: OrderItemCreateManyOrderItemStatusInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderItemStatusInput = {
    create?: XOR<OrderItemCreateWithoutOrderItemStatusInput, OrderItemUncheckedCreateWithoutOrderItemStatusInput> | OrderItemCreateWithoutOrderItemStatusInput[] | OrderItemUncheckedCreateWithoutOrderItemStatusInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderItemStatusInput | OrderItemCreateOrConnectWithoutOrderItemStatusInput[]
    createMany?: OrderItemCreateManyOrderItemStatusInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUpdateManyWithoutOrderItemStatusNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderItemStatusInput, OrderItemUncheckedCreateWithoutOrderItemStatusInput> | OrderItemCreateWithoutOrderItemStatusInput[] | OrderItemUncheckedCreateWithoutOrderItemStatusInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderItemStatusInput | OrderItemCreateOrConnectWithoutOrderItemStatusInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderItemStatusInput | OrderItemUpsertWithWhereUniqueWithoutOrderItemStatusInput[]
    createMany?: OrderItemCreateManyOrderItemStatusInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderItemStatusInput | OrderItemUpdateWithWhereUniqueWithoutOrderItemStatusInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderItemStatusInput | OrderItemUpdateManyWithWhereWithoutOrderItemStatusInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderItemStatusNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderItemStatusInput, OrderItemUncheckedCreateWithoutOrderItemStatusInput> | OrderItemCreateWithoutOrderItemStatusInput[] | OrderItemUncheckedCreateWithoutOrderItemStatusInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderItemStatusInput | OrderItemCreateOrConnectWithoutOrderItemStatusInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderItemStatusInput | OrderItemUpsertWithWhereUniqueWithoutOrderItemStatusInput[]
    createMany?: OrderItemCreateManyOrderItemStatusInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderItemStatusInput | OrderItemUpdateWithWhereUniqueWithoutOrderItemStatusInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderItemStatusInput | OrderItemUpdateManyWithWhereWithoutOrderItemStatusInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CommandCreateNestedOneWithoutOrdersInput = {
    create?: XOR<CommandCreateWithoutOrdersInput, CommandUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CommandCreateOrConnectWithoutOrdersInput
    connect?: CommandWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrderCreatorInput = {
    create?: XOR<UserCreateWithoutOrderCreatorInput, UserUncheckedCreateWithoutOrderCreatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderCreatorInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutOrdersInput = {
    create?: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOrdersInput
    connect?: CustomerWhereUniqueInput
  }

  export type OrderStatusCreateNestedOneWithoutOrdersInput = {
    create?: XOR<OrderStatusCreateWithoutOrdersInput, OrderStatusUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: OrderStatusCreateOrConnectWithoutOrdersInput
    connect?: OrderStatusWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrderCloserInput = {
    create?: XOR<UserCreateWithoutOrderCloserInput, UserUncheckedCreateWithoutOrderCloserInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderCloserInput
    connect?: UserWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PaymentCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    connect?: PaymentWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedOneWithoutOrderInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    connect?: PaymentWhereUniqueInput
  }

  export type CommandUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<CommandCreateWithoutOrdersInput, CommandUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CommandCreateOrConnectWithoutOrdersInput
    upsert?: CommandUpsertWithoutOrdersInput
    connect?: CommandWhereUniqueInput
    update?: XOR<XOR<CommandUpdateToOneWithWhereWithoutOrdersInput, CommandUpdateWithoutOrdersInput>, CommandUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutOrderCreatorNestedInput = {
    create?: XOR<UserCreateWithoutOrderCreatorInput, UserUncheckedCreateWithoutOrderCreatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderCreatorInput
    upsert?: UserUpsertWithoutOrderCreatorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrderCreatorInput, UserUpdateWithoutOrderCreatorInput>, UserUncheckedUpdateWithoutOrderCreatorInput>
  }

  export type CustomerUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutOrdersInput
    upsert?: CustomerUpsertWithoutOrdersInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutOrdersInput, CustomerUpdateWithoutOrdersInput>, CustomerUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderStatusUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<OrderStatusCreateWithoutOrdersInput, OrderStatusUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: OrderStatusCreateOrConnectWithoutOrdersInput
    upsert?: OrderStatusUpsertWithoutOrdersInput
    connect?: OrderStatusWhereUniqueInput
    update?: XOR<XOR<OrderStatusUpdateToOneWithWhereWithoutOrdersInput, OrderStatusUpdateWithoutOrdersInput>, OrderStatusUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateOneWithoutOrderCloserNestedInput = {
    create?: XOR<UserCreateWithoutOrderCloserInput, UserUncheckedCreateWithoutOrderCloserInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrderCloserInput
    upsert?: UserUpsertWithoutOrderCloserInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrderCloserInput, UserUpdateWithoutOrderCloserInput>, UserUncheckedUpdateWithoutOrderCloserInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type PaymentUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    upsert?: PaymentUpsertWithoutOrderInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutOrderInput, PaymentUpdateWithoutOrderInput>, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateOneWithoutOrderNestedInput = {
    create?: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutOrderInput
    upsert?: PaymentUpsertWithoutOrderInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutOrderInput, PaymentUpdateWithoutOrderInput>, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type CommandCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<CommandCreateWithoutOrderItemsInput, CommandUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: CommandCreateOrConnectWithoutOrderItemsInput
    connect?: CommandWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderItemStatusCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderItemStatusCreateWithoutOrderItemsInput, OrderItemStatusUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderItemStatusCreateOrConnectWithoutOrderItemsInput
    connect?: OrderItemStatusWhereUniqueInput
  }

  export type CommandUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<CommandCreateWithoutOrderItemsInput, CommandUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: CommandCreateOrConnectWithoutOrderItemsInput
    upsert?: CommandUpsertWithoutOrderItemsInput
    connect?: CommandWhereUniqueInput
    update?: XOR<XOR<CommandUpdateToOneWithWhereWithoutOrderItemsInput, CommandUpdateWithoutOrderItemsInput>, CommandUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderUpdateOneWithoutOrderItemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderUpsertWithoutOrderItemsInput
    disconnect?: OrderWhereInput | boolean
    delete?: OrderWhereInput | boolean
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemsInput
    upsert?: ProductUpsertWithoutOrderItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderItemsInput, ProductUpdateWithoutOrderItemsInput>, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderItemStatusUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<OrderItemStatusCreateWithoutOrderItemsInput, OrderItemStatusUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderItemStatusCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderItemStatusUpsertWithoutOrderItemsInput
    connect?: OrderItemStatusWhereUniqueInput
    update?: XOR<XOR<OrderItemStatusUpdateToOneWithWhereWithoutOrderItemsInput, OrderItemStatusUpdateWithoutOrderItemsInput>, OrderItemStatusUncheckedUpdateWithoutOrderItemsInput>
  }

  export type UserCreateNestedOneWithoutOpenedCashBoxesInput = {
    create?: XOR<UserCreateWithoutOpenedCashBoxesInput, UserUncheckedCreateWithoutOpenedCashBoxesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpenedCashBoxesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutClosedCashBoxesInput = {
    create?: XOR<UserCreateWithoutClosedCashBoxesInput, UserUncheckedCreateWithoutClosedCashBoxesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClosedCashBoxesInput
    connect?: UserWhereUniqueInput
  }

  export type CashBoxMovementCreateNestedManyWithoutCashboxInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxInput, CashBoxMovementUncheckedCreateWithoutCashboxInput> | CashBoxMovementCreateWithoutCashboxInput[] | CashBoxMovementUncheckedCreateWithoutCashboxInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxInput | CashBoxMovementCreateOrConnectWithoutCashboxInput[]
    createMany?: CashBoxMovementCreateManyCashboxInputEnvelope
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutCashBoxInput = {
    create?: XOR<PaymentCreateWithoutCashBoxInput, PaymentUncheckedCreateWithoutCashBoxInput> | PaymentCreateWithoutCashBoxInput[] | PaymentUncheckedCreateWithoutCashBoxInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashBoxInput | PaymentCreateOrConnectWithoutCashBoxInput[]
    createMany?: PaymentCreateManyCashBoxInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type CashBoxMovementUncheckedCreateNestedManyWithoutCashboxInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxInput, CashBoxMovementUncheckedCreateWithoutCashboxInput> | CashBoxMovementCreateWithoutCashboxInput[] | CashBoxMovementUncheckedCreateWithoutCashboxInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxInput | CashBoxMovementCreateOrConnectWithoutCashboxInput[]
    createMany?: CashBoxMovementCreateManyCashboxInputEnvelope
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutCashBoxInput = {
    create?: XOR<PaymentCreateWithoutCashBoxInput, PaymentUncheckedCreateWithoutCashBoxInput> | PaymentCreateWithoutCashBoxInput[] | PaymentUncheckedCreateWithoutCashBoxInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashBoxInput | PaymentCreateOrConnectWithoutCashBoxInput[]
    createMany?: PaymentCreateManyCashBoxInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutOpenedCashBoxesNestedInput = {
    create?: XOR<UserCreateWithoutOpenedCashBoxesInput, UserUncheckedCreateWithoutOpenedCashBoxesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpenedCashBoxesInput
    upsert?: UserUpsertWithoutOpenedCashBoxesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOpenedCashBoxesInput, UserUpdateWithoutOpenedCashBoxesInput>, UserUncheckedUpdateWithoutOpenedCashBoxesInput>
  }

  export type UserUpdateOneWithoutClosedCashBoxesNestedInput = {
    create?: XOR<UserCreateWithoutClosedCashBoxesInput, UserUncheckedCreateWithoutClosedCashBoxesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClosedCashBoxesInput
    upsert?: UserUpsertWithoutClosedCashBoxesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClosedCashBoxesInput, UserUpdateWithoutClosedCashBoxesInput>, UserUncheckedUpdateWithoutClosedCashBoxesInput>
  }

  export type CashBoxMovementUpdateManyWithoutCashboxNestedInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxInput, CashBoxMovementUncheckedCreateWithoutCashboxInput> | CashBoxMovementCreateWithoutCashboxInput[] | CashBoxMovementUncheckedCreateWithoutCashboxInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxInput | CashBoxMovementCreateOrConnectWithoutCashboxInput[]
    upsert?: CashBoxMovementUpsertWithWhereUniqueWithoutCashboxInput | CashBoxMovementUpsertWithWhereUniqueWithoutCashboxInput[]
    createMany?: CashBoxMovementCreateManyCashboxInputEnvelope
    set?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    disconnect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    delete?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    update?: CashBoxMovementUpdateWithWhereUniqueWithoutCashboxInput | CashBoxMovementUpdateWithWhereUniqueWithoutCashboxInput[]
    updateMany?: CashBoxMovementUpdateManyWithWhereWithoutCashboxInput | CashBoxMovementUpdateManyWithWhereWithoutCashboxInput[]
    deleteMany?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutCashBoxNestedInput = {
    create?: XOR<PaymentCreateWithoutCashBoxInput, PaymentUncheckedCreateWithoutCashBoxInput> | PaymentCreateWithoutCashBoxInput[] | PaymentUncheckedCreateWithoutCashBoxInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashBoxInput | PaymentCreateOrConnectWithoutCashBoxInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCashBoxInput | PaymentUpsertWithWhereUniqueWithoutCashBoxInput[]
    createMany?: PaymentCreateManyCashBoxInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCashBoxInput | PaymentUpdateWithWhereUniqueWithoutCashBoxInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCashBoxInput | PaymentUpdateManyWithWhereWithoutCashBoxInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type CashBoxMovementUncheckedUpdateManyWithoutCashboxNestedInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxInput, CashBoxMovementUncheckedCreateWithoutCashboxInput> | CashBoxMovementCreateWithoutCashboxInput[] | CashBoxMovementUncheckedCreateWithoutCashboxInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxInput | CashBoxMovementCreateOrConnectWithoutCashboxInput[]
    upsert?: CashBoxMovementUpsertWithWhereUniqueWithoutCashboxInput | CashBoxMovementUpsertWithWhereUniqueWithoutCashboxInput[]
    createMany?: CashBoxMovementCreateManyCashboxInputEnvelope
    set?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    disconnect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    delete?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    update?: CashBoxMovementUpdateWithWhereUniqueWithoutCashboxInput | CashBoxMovementUpdateWithWhereUniqueWithoutCashboxInput[]
    updateMany?: CashBoxMovementUpdateManyWithWhereWithoutCashboxInput | CashBoxMovementUpdateManyWithWhereWithoutCashboxInput[]
    deleteMany?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutCashBoxNestedInput = {
    create?: XOR<PaymentCreateWithoutCashBoxInput, PaymentUncheckedCreateWithoutCashBoxInput> | PaymentCreateWithoutCashBoxInput[] | PaymentUncheckedCreateWithoutCashBoxInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCashBoxInput | PaymentCreateOrConnectWithoutCashBoxInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCashBoxInput | PaymentUpsertWithWhereUniqueWithoutCashBoxInput[]
    createMany?: PaymentCreateManyCashBoxInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCashBoxInput | PaymentUpdateWithWhereUniqueWithoutCashBoxInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCashBoxInput | PaymentUpdateManyWithWhereWithoutCashBoxInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type CashBoxMovementCreateNestedManyWithoutCashboxMovementTypeInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput> | CashBoxMovementCreateWithoutCashboxMovementTypeInput[] | CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput | CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput[]
    createMany?: CashBoxMovementCreateManyCashboxMovementTypeInputEnvelope
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
  }

  export type CashBoxMovementUncheckedCreateNestedManyWithoutCashboxMovementTypeInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput> | CashBoxMovementCreateWithoutCashboxMovementTypeInput[] | CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput | CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput[]
    createMany?: CashBoxMovementCreateManyCashboxMovementTypeInputEnvelope
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
  }

  export type CashBoxMovementUpdateManyWithoutCashboxMovementTypeNestedInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput> | CashBoxMovementCreateWithoutCashboxMovementTypeInput[] | CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput | CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput[]
    upsert?: CashBoxMovementUpsertWithWhereUniqueWithoutCashboxMovementTypeInput | CashBoxMovementUpsertWithWhereUniqueWithoutCashboxMovementTypeInput[]
    createMany?: CashBoxMovementCreateManyCashboxMovementTypeInputEnvelope
    set?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    disconnect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    delete?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    update?: CashBoxMovementUpdateWithWhereUniqueWithoutCashboxMovementTypeInput | CashBoxMovementUpdateWithWhereUniqueWithoutCashboxMovementTypeInput[]
    updateMany?: CashBoxMovementUpdateManyWithWhereWithoutCashboxMovementTypeInput | CashBoxMovementUpdateManyWithWhereWithoutCashboxMovementTypeInput[]
    deleteMany?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
  }

  export type CashBoxMovementUncheckedUpdateManyWithoutCashboxMovementTypeNestedInput = {
    create?: XOR<CashBoxMovementCreateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput> | CashBoxMovementCreateWithoutCashboxMovementTypeInput[] | CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput[]
    connectOrCreate?: CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput | CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput[]
    upsert?: CashBoxMovementUpsertWithWhereUniqueWithoutCashboxMovementTypeInput | CashBoxMovementUpsertWithWhereUniqueWithoutCashboxMovementTypeInput[]
    createMany?: CashBoxMovementCreateManyCashboxMovementTypeInputEnvelope
    set?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    disconnect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    delete?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    connect?: CashBoxMovementWhereUniqueInput | CashBoxMovementWhereUniqueInput[]
    update?: CashBoxMovementUpdateWithWhereUniqueWithoutCashboxMovementTypeInput | CashBoxMovementUpdateWithWhereUniqueWithoutCashboxMovementTypeInput[]
    updateMany?: CashBoxMovementUpdateManyWithWhereWithoutCashboxMovementTypeInput | CashBoxMovementUpdateManyWithWhereWithoutCashboxMovementTypeInput[]
    deleteMany?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
  }

  export type CashBoxCreateNestedOneWithoutCashboxMovementsInput = {
    create?: XOR<CashBoxCreateWithoutCashboxMovementsInput, CashBoxUncheckedCreateWithoutCashboxMovementsInput>
    connectOrCreate?: CashBoxCreateOrConnectWithoutCashboxMovementsInput
    connect?: CashBoxWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCashBoxMovementsInput = {
    create?: XOR<UserCreateWithoutCashBoxMovementsInput, UserUncheckedCreateWithoutCashBoxMovementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashBoxMovementsInput
    connect?: UserWhereUniqueInput
  }

  export type CashBoxMovementTypeCreateNestedOneWithoutCashBoxMovementInput = {
    create?: XOR<CashBoxMovementTypeCreateWithoutCashBoxMovementInput, CashBoxMovementTypeUncheckedCreateWithoutCashBoxMovementInput>
    connectOrCreate?: CashBoxMovementTypeCreateOrConnectWithoutCashBoxMovementInput
    connect?: CashBoxMovementTypeWhereUniqueInput
  }

  export type CashBoxUpdateOneRequiredWithoutCashboxMovementsNestedInput = {
    create?: XOR<CashBoxCreateWithoutCashboxMovementsInput, CashBoxUncheckedCreateWithoutCashboxMovementsInput>
    connectOrCreate?: CashBoxCreateOrConnectWithoutCashboxMovementsInput
    upsert?: CashBoxUpsertWithoutCashboxMovementsInput
    connect?: CashBoxWhereUniqueInput
    update?: XOR<XOR<CashBoxUpdateToOneWithWhereWithoutCashboxMovementsInput, CashBoxUpdateWithoutCashboxMovementsInput>, CashBoxUncheckedUpdateWithoutCashboxMovementsInput>
  }

  export type UserUpdateOneRequiredWithoutCashBoxMovementsNestedInput = {
    create?: XOR<UserCreateWithoutCashBoxMovementsInput, UserUncheckedCreateWithoutCashBoxMovementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCashBoxMovementsInput
    upsert?: UserUpsertWithoutCashBoxMovementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCashBoxMovementsInput, UserUpdateWithoutCashBoxMovementsInput>, UserUncheckedUpdateWithoutCashBoxMovementsInput>
  }

  export type CashBoxMovementTypeUpdateOneRequiredWithoutCashBoxMovementNestedInput = {
    create?: XOR<CashBoxMovementTypeCreateWithoutCashBoxMovementInput, CashBoxMovementTypeUncheckedCreateWithoutCashBoxMovementInput>
    connectOrCreate?: CashBoxMovementTypeCreateOrConnectWithoutCashBoxMovementInput
    upsert?: CashBoxMovementTypeUpsertWithoutCashBoxMovementInput
    connect?: CashBoxMovementTypeWhereUniqueInput
    update?: XOR<XOR<CashBoxMovementTypeUpdateToOneWithWhereWithoutCashBoxMovementInput, CashBoxMovementTypeUpdateWithoutCashBoxMovementInput>, CashBoxMovementTypeUncheckedUpdateWithoutCashBoxMovementInput>
  }

  export type PaymentCreateNestedManyWithoutPaymentMethodInput = {
    create?: XOR<PaymentCreateWithoutPaymentMethodInput, PaymentUncheckedCreateWithoutPaymentMethodInput> | PaymentCreateWithoutPaymentMethodInput[] | PaymentUncheckedCreateWithoutPaymentMethodInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentMethodInput | PaymentCreateOrConnectWithoutPaymentMethodInput[]
    createMany?: PaymentCreateManyPaymentMethodInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPaymentMethodInput = {
    create?: XOR<PaymentCreateWithoutPaymentMethodInput, PaymentUncheckedCreateWithoutPaymentMethodInput> | PaymentCreateWithoutPaymentMethodInput[] | PaymentUncheckedCreateWithoutPaymentMethodInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentMethodInput | PaymentCreateOrConnectWithoutPaymentMethodInput[]
    createMany?: PaymentCreateManyPaymentMethodInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUpdateManyWithoutPaymentMethodNestedInput = {
    create?: XOR<PaymentCreateWithoutPaymentMethodInput, PaymentUncheckedCreateWithoutPaymentMethodInput> | PaymentCreateWithoutPaymentMethodInput[] | PaymentUncheckedCreateWithoutPaymentMethodInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentMethodInput | PaymentCreateOrConnectWithoutPaymentMethodInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPaymentMethodInput | PaymentUpsertWithWhereUniqueWithoutPaymentMethodInput[]
    createMany?: PaymentCreateManyPaymentMethodInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPaymentMethodInput | PaymentUpdateWithWhereUniqueWithoutPaymentMethodInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPaymentMethodInput | PaymentUpdateManyWithWhereWithoutPaymentMethodInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPaymentMethodNestedInput = {
    create?: XOR<PaymentCreateWithoutPaymentMethodInput, PaymentUncheckedCreateWithoutPaymentMethodInput> | PaymentCreateWithoutPaymentMethodInput[] | PaymentUncheckedCreateWithoutPaymentMethodInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentMethodInput | PaymentCreateOrConnectWithoutPaymentMethodInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPaymentMethodInput | PaymentUpsertWithWhereUniqueWithoutPaymentMethodInput[]
    createMany?: PaymentCreateManyPaymentMethodInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPaymentMethodInput | PaymentUpdateWithWhereUniqueWithoutPaymentMethodInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPaymentMethodInput | PaymentUpdateManyWithWhereWithoutPaymentMethodInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutPaymentInput = {
    create?: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInput
    connect?: OrderWhereUniqueInput
  }

  export type CashBoxCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<CashBoxCreateWithoutPaymentsInput, CashBoxUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CashBoxCreateOrConnectWithoutPaymentsInput
    connect?: CashBoxWhereUniqueInput
  }

  export type PaymentMethodCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PaymentMethodCreateWithoutPaymentsInput, PaymentMethodUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutPaymentsInput
    connect?: PaymentMethodWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPaymentsReceivedInput = {
    create?: XOR<UserCreateWithoutPaymentsReceivedInput, UserUncheckedCreateWithoutPaymentsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<CustomerCreateWithoutPaymentsInput, CustomerUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPaymentsInput
    connect?: CustomerWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutPaymentNestedInput = {
    create?: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: OrderCreateOrConnectWithoutPaymentInput
    upsert?: OrderUpsertWithoutPaymentInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutPaymentInput, OrderUpdateWithoutPaymentInput>, OrderUncheckedUpdateWithoutPaymentInput>
  }

  export type CashBoxUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<CashBoxCreateWithoutPaymentsInput, CashBoxUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CashBoxCreateOrConnectWithoutPaymentsInput
    upsert?: CashBoxUpsertWithoutPaymentsInput
    connect?: CashBoxWhereUniqueInput
    update?: XOR<XOR<CashBoxUpdateToOneWithWhereWithoutPaymentsInput, CashBoxUpdateWithoutPaymentsInput>, CashBoxUncheckedUpdateWithoutPaymentsInput>
  }

  export type PaymentMethodUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<PaymentMethodCreateWithoutPaymentsInput, PaymentMethodUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PaymentMethodCreateOrConnectWithoutPaymentsInput
    upsert?: PaymentMethodUpsertWithoutPaymentsInput
    connect?: PaymentMethodWhereUniqueInput
    update?: XOR<XOR<PaymentMethodUpdateToOneWithWhereWithoutPaymentsInput, PaymentMethodUpdateWithoutPaymentsInput>, PaymentMethodUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateOneRequiredWithoutPaymentsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutPaymentsReceivedInput, UserUncheckedCreateWithoutPaymentsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsReceivedInput
    upsert?: UserUpsertWithoutPaymentsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentsReceivedInput, UserUpdateWithoutPaymentsReceivedInput>, UserUncheckedUpdateWithoutPaymentsReceivedInput>
  }

  export type CustomerUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<CustomerCreateWithoutPaymentsInput, CustomerUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutPaymentsInput
    upsert?: CustomerUpsertWithoutPaymentsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutPaymentsInput, CustomerUpdateWithoutPaymentsInput>, CustomerUncheckedUpdateWithoutPaymentsInput>
  }

  export type InventoryMovementCreateNestedManyWithoutInventoryMovementTypeInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput> | InventoryMovementCreateWithoutInventoryMovementTypeInput[] | InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput | InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput[]
    createMany?: InventoryMovementCreateManyInventoryMovementTypeInputEnvelope
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
  }

  export type InventoryMovementUncheckedCreateNestedManyWithoutInventoryMovementTypeInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput> | InventoryMovementCreateWithoutInventoryMovementTypeInput[] | InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput | InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput[]
    createMany?: InventoryMovementCreateManyInventoryMovementTypeInputEnvelope
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
  }

  export type InventoryMovementUpdateManyWithoutInventoryMovementTypeNestedInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput> | InventoryMovementCreateWithoutInventoryMovementTypeInput[] | InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput | InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput[]
    upsert?: InventoryMovementUpsertWithWhereUniqueWithoutInventoryMovementTypeInput | InventoryMovementUpsertWithWhereUniqueWithoutInventoryMovementTypeInput[]
    createMany?: InventoryMovementCreateManyInventoryMovementTypeInputEnvelope
    set?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    disconnect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    delete?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    update?: InventoryMovementUpdateWithWhereUniqueWithoutInventoryMovementTypeInput | InventoryMovementUpdateWithWhereUniqueWithoutInventoryMovementTypeInput[]
    updateMany?: InventoryMovementUpdateManyWithWhereWithoutInventoryMovementTypeInput | InventoryMovementUpdateManyWithWhereWithoutInventoryMovementTypeInput[]
    deleteMany?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
  }

  export type InventoryMovementUncheckedUpdateManyWithoutInventoryMovementTypeNestedInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput> | InventoryMovementCreateWithoutInventoryMovementTypeInput[] | InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput | InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput[]
    upsert?: InventoryMovementUpsertWithWhereUniqueWithoutInventoryMovementTypeInput | InventoryMovementUpsertWithWhereUniqueWithoutInventoryMovementTypeInput[]
    createMany?: InventoryMovementCreateManyInventoryMovementTypeInputEnvelope
    set?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    disconnect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    delete?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    update?: InventoryMovementUpdateWithWhereUniqueWithoutInventoryMovementTypeInput | InventoryMovementUpdateWithWhereUniqueWithoutInventoryMovementTypeInput[]
    updateMany?: InventoryMovementUpdateManyWithWhereWithoutInventoryMovementTypeInput | InventoryMovementUpdateManyWithWhereWithoutInventoryMovementTypeInput[]
    deleteMany?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutInventoryInput = {
    create?: XOR<ProductCreateWithoutInventoryInput, ProductUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutInventoryInput
    connect?: ProductWhereUniqueInput
  }

  export type InventoryMovementCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryInput, InventoryMovementUncheckedCreateWithoutInventoryInput> | InventoryMovementCreateWithoutInventoryInput[] | InventoryMovementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryInput | InventoryMovementCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryMovementCreateManyInventoryInputEnvelope
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
  }

  export type InventoryMovementUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryInput, InventoryMovementUncheckedCreateWithoutInventoryInput> | InventoryMovementCreateWithoutInventoryInput[] | InventoryMovementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryInput | InventoryMovementCreateOrConnectWithoutInventoryInput[]
    createMany?: InventoryMovementCreateManyInventoryInputEnvelope
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
  }

  export type ProductUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<ProductCreateWithoutInventoryInput, ProductUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: ProductCreateOrConnectWithoutInventoryInput
    upsert?: ProductUpsertWithoutInventoryInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutInventoryInput, ProductUpdateWithoutInventoryInput>, ProductUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryMovementUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryInput, InventoryMovementUncheckedCreateWithoutInventoryInput> | InventoryMovementCreateWithoutInventoryInput[] | InventoryMovementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryInput | InventoryMovementCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryMovementUpsertWithWhereUniqueWithoutInventoryInput | InventoryMovementUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryMovementCreateManyInventoryInputEnvelope
    set?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    disconnect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    delete?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    update?: InventoryMovementUpdateWithWhereUniqueWithoutInventoryInput | InventoryMovementUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryMovementUpdateManyWithWhereWithoutInventoryInput | InventoryMovementUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
  }

  export type InventoryMovementUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<InventoryMovementCreateWithoutInventoryInput, InventoryMovementUncheckedCreateWithoutInventoryInput> | InventoryMovementCreateWithoutInventoryInput[] | InventoryMovementUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: InventoryMovementCreateOrConnectWithoutInventoryInput | InventoryMovementCreateOrConnectWithoutInventoryInput[]
    upsert?: InventoryMovementUpsertWithWhereUniqueWithoutInventoryInput | InventoryMovementUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: InventoryMovementCreateManyInventoryInputEnvelope
    set?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    disconnect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    delete?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    connect?: InventoryMovementWhereUniqueInput | InventoryMovementWhereUniqueInput[]
    update?: InventoryMovementUpdateWithWhereUniqueWithoutInventoryInput | InventoryMovementUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: InventoryMovementUpdateManyWithWhereWithoutInventoryInput | InventoryMovementUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutInventoryMovementsInput = {
    create?: XOR<InventoryCreateWithoutInventoryMovementsInput, InventoryUncheckedCreateWithoutInventoryMovementsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutInventoryMovementsInput
    connect?: InventoryWhereUniqueInput
  }

  export type InventoryMovementTypeCreateNestedOneWithoutMovementsInput = {
    create?: XOR<InventoryMovementTypeCreateWithoutMovementsInput, InventoryMovementTypeUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: InventoryMovementTypeCreateOrConnectWithoutMovementsInput
    connect?: InventoryMovementTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInventoryMovementsInput = {
    create?: XOR<UserCreateWithoutInventoryMovementsInput, UserUncheckedCreateWithoutInventoryMovementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryMovementsInput
    connect?: UserWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutInventoryMovementsNestedInput = {
    create?: XOR<InventoryCreateWithoutInventoryMovementsInput, InventoryUncheckedCreateWithoutInventoryMovementsInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutInventoryMovementsInput
    upsert?: InventoryUpsertWithoutInventoryMovementsInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutInventoryMovementsInput, InventoryUpdateWithoutInventoryMovementsInput>, InventoryUncheckedUpdateWithoutInventoryMovementsInput>
  }

  export type InventoryMovementTypeUpdateOneRequiredWithoutMovementsNestedInput = {
    create?: XOR<InventoryMovementTypeCreateWithoutMovementsInput, InventoryMovementTypeUncheckedCreateWithoutMovementsInput>
    connectOrCreate?: InventoryMovementTypeCreateOrConnectWithoutMovementsInput
    upsert?: InventoryMovementTypeUpsertWithoutMovementsInput
    connect?: InventoryMovementTypeWhereUniqueInput
    update?: XOR<XOR<InventoryMovementTypeUpdateToOneWithWhereWithoutMovementsInput, InventoryMovementTypeUpdateWithoutMovementsInput>, InventoryMovementTypeUncheckedUpdateWithoutMovementsInput>
  }

  export type UserUpdateOneRequiredWithoutInventoryMovementsNestedInput = {
    create?: XOR<UserCreateWithoutInventoryMovementsInput, UserUncheckedCreateWithoutInventoryMovementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInventoryMovementsInput
    upsert?: UserUpsertWithoutInventoryMovementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInventoryMovementsInput, UserUpdateWithoutInventoryMovementsInput>, UserUncheckedUpdateWithoutInventoryMovementsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutSessionsInput = {
    create?: XOR<CustomerCreateWithoutSessionsInput, CustomerUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSessionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserUpdateOneWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type CustomerUpdateOneWithoutSessionsNestedInput = {
    create?: XOR<CustomerCreateWithoutSessionsInput, CustomerUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSessionsInput
    upsert?: CustomerUpsertWithoutSessionsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSessionsInput, CustomerUpdateWithoutSessionsInput>, CustomerUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutLogsInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutLogsInput = {
    create?: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLogsInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserUpdateOneWithoutLogsNestedInput = {
    create?: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogsInput
    upsert?: UserUpsertWithoutLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLogsInput, UserUpdateWithoutLogsInput>, UserUncheckedUpdateWithoutLogsInput>
  }

  export type CustomerUpdateOneWithoutLogsNestedInput = {
    create?: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutLogsInput
    upsert?: CustomerUpsertWithoutLogsInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutLogsInput, CustomerUpdateWithoutLogsInput>, CustomerUncheckedUpdateWithoutLogsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserCreateWithoutCreatedThemesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedThemesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedThemesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedThemesInput, UserUncheckedCreateWithoutCreatedThemesInput>
  }

  export type userProfileCreateWithoutThemeInput = {
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user: UserCreateNestedOneWithoutUserProfileInput
  }

  export type userProfileUncheckedCreateWithoutThemeInput = {
    id?: number
    userDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type userProfileCreateOrConnectWithoutThemeInput = {
    where: userProfileWhereUniqueInput
    create: XOR<userProfileCreateWithoutThemeInput, userProfileUncheckedCreateWithoutThemeInput>
  }

  export type userProfileCreateManyThemeInputEnvelope = {
    data: userProfileCreateManyThemeInput | userProfileCreateManyThemeInput[]
    skipDuplicates?: boolean
  }

  export type CustomerProfileCreateWithoutThemeInput = {
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    customer: CustomerCreateNestedOneWithoutProfileInput
  }

  export type CustomerProfileUncheckedCreateWithoutThemeInput = {
    id?: number
    customerDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerProfileCreateOrConnectWithoutThemeInput = {
    where: CustomerProfileWhereUniqueInput
    create: XOR<CustomerProfileCreateWithoutThemeInput, CustomerProfileUncheckedCreateWithoutThemeInput>
  }

  export type CustomerProfileCreateManyThemeInputEnvelope = {
    data: CustomerProfileCreateManyThemeInput | CustomerProfileCreateManyThemeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedThemesInput = {
    update: XOR<UserUpdateWithoutCreatedThemesInput, UserUncheckedUpdateWithoutCreatedThemesInput>
    create: XOR<UserCreateWithoutCreatedThemesInput, UserUncheckedCreateWithoutCreatedThemesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedThemesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedThemesInput, UserUncheckedUpdateWithoutCreatedThemesInput>
  }

  export type UserUpdateWithoutCreatedThemesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedThemesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userProfileUpsertWithWhereUniqueWithoutThemeInput = {
    where: userProfileWhereUniqueInput
    update: XOR<userProfileUpdateWithoutThemeInput, userProfileUncheckedUpdateWithoutThemeInput>
    create: XOR<userProfileCreateWithoutThemeInput, userProfileUncheckedCreateWithoutThemeInput>
  }

  export type userProfileUpdateWithWhereUniqueWithoutThemeInput = {
    where: userProfileWhereUniqueInput
    data: XOR<userProfileUpdateWithoutThemeInput, userProfileUncheckedUpdateWithoutThemeInput>
  }

  export type userProfileUpdateManyWithWhereWithoutThemeInput = {
    where: userProfileScalarWhereInput
    data: XOR<userProfileUpdateManyMutationInput, userProfileUncheckedUpdateManyWithoutThemeInput>
  }

  export type userProfileScalarWhereInput = {
    AND?: userProfileScalarWhereInput | userProfileScalarWhereInput[]
    OR?: userProfileScalarWhereInput[]
    NOT?: userProfileScalarWhereInput | userProfileScalarWhereInput[]
    id?: IntFilter<"userProfile"> | number
    userDocument?: StringFilter<"userProfile"> | string
    fullName?: StringFilter<"userProfile"> | string
    phoneNumber?: StringNullableFilter<"userProfile"> | string | null
    birthDate?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    hireDate?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    salary?: DecimalNullableFilter<"userProfile"> | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: StringNullableFilter<"userProfile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"userProfile"> | string | null
    themeName?: StringNullableFilter<"userProfile"> | string | null
    createdAt?: DateTimeFilter<"userProfile"> | Date | string
    createdBy?: StringFilter<"userProfile"> | string
    updatedAt?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    updatedBy?: StringNullableFilter<"userProfile"> | string | null
    deletedAt?: DateTimeNullableFilter<"userProfile"> | Date | string | null
    deletedBy?: StringNullableFilter<"userProfile"> | string | null
  }

  export type CustomerProfileUpsertWithWhereUniqueWithoutThemeInput = {
    where: CustomerProfileWhereUniqueInput
    update: XOR<CustomerProfileUpdateWithoutThemeInput, CustomerProfileUncheckedUpdateWithoutThemeInput>
    create: XOR<CustomerProfileCreateWithoutThemeInput, CustomerProfileUncheckedCreateWithoutThemeInput>
  }

  export type CustomerProfileUpdateWithWhereUniqueWithoutThemeInput = {
    where: CustomerProfileWhereUniqueInput
    data: XOR<CustomerProfileUpdateWithoutThemeInput, CustomerProfileUncheckedUpdateWithoutThemeInput>
  }

  export type CustomerProfileUpdateManyWithWhereWithoutThemeInput = {
    where: CustomerProfileScalarWhereInput
    data: XOR<CustomerProfileUpdateManyMutationInput, CustomerProfileUncheckedUpdateManyWithoutThemeInput>
  }

  export type CustomerProfileScalarWhereInput = {
    AND?: CustomerProfileScalarWhereInput | CustomerProfileScalarWhereInput[]
    OR?: CustomerProfileScalarWhereInput[]
    NOT?: CustomerProfileScalarWhereInput | CustomerProfileScalarWhereInput[]
    id?: IntFilter<"CustomerProfile"> | number
    customerDocument?: StringFilter<"CustomerProfile"> | string
    fullName?: StringFilter<"CustomerProfile"> | string
    phoneNumber?: StringNullableFilter<"CustomerProfile"> | string | null
    birthDate?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    themeName?: StringNullableFilter<"CustomerProfile"> | string | null
    createdAt?: DateTimeFilter<"CustomerProfile"> | Date | string
    createdBy?: StringFilter<"CustomerProfile"> | string
    updatedAt?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    updatedBy?: StringNullableFilter<"CustomerProfile"> | string | null
    deletedAt?: DateTimeNullableFilter<"CustomerProfile"> | Date | string | null
    deletedBy?: StringNullableFilter<"CustomerProfile"> | string | null
  }

  export type TableCreateWithoutRestaurantZoneInput = {
    name: string
    capacity?: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tableStatus?: TableStatusCreateNestedOneWithoutTablesInput
    combineTableItems?: CombineTableItemCreateNestedManyWithoutTableInput
    commands?: CommandCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutRestaurantZoneInput = {
    id?: number
    name: string
    capacity?: number
    tableStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTableItems?: CombineTableItemUncheckedCreateNestedManyWithoutTableInput
    commands?: CommandUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutRestaurantZoneInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutRestaurantZoneInput, TableUncheckedCreateWithoutRestaurantZoneInput>
  }

  export type TableCreateManyRestaurantZoneInputEnvelope = {
    data: TableCreateManyRestaurantZoneInput | TableCreateManyRestaurantZoneInput[]
    skipDuplicates?: boolean
  }

  export type TableUpsertWithWhereUniqueWithoutRestaurantZoneInput = {
    where: TableWhereUniqueInput
    update: XOR<TableUpdateWithoutRestaurantZoneInput, TableUncheckedUpdateWithoutRestaurantZoneInput>
    create: XOR<TableCreateWithoutRestaurantZoneInput, TableUncheckedCreateWithoutRestaurantZoneInput>
  }

  export type TableUpdateWithWhereUniqueWithoutRestaurantZoneInput = {
    where: TableWhereUniqueInput
    data: XOR<TableUpdateWithoutRestaurantZoneInput, TableUncheckedUpdateWithoutRestaurantZoneInput>
  }

  export type TableUpdateManyWithWhereWithoutRestaurantZoneInput = {
    where: TableScalarWhereInput
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyWithoutRestaurantZoneInput>
  }

  export type TableScalarWhereInput = {
    AND?: TableScalarWhereInput | TableScalarWhereInput[]
    OR?: TableScalarWhereInput[]
    NOT?: TableScalarWhereInput | TableScalarWhereInput[]
    id?: IntFilter<"Table"> | number
    name?: StringFilter<"Table"> | string
    capacity?: IntFilter<"Table"> | number
    restaurantZoneName?: StringNullableFilter<"Table"> | string | null
    tableStatusCode?: StringFilter<"Table"> | string
    createdAt?: DateTimeFilter<"Table"> | Date | string
    createdBy?: StringFilter<"Table"> | string
    updatedAt?: DateTimeNullableFilter<"Table"> | Date | string | null
    updatedBy?: StringNullableFilter<"Table"> | string | null
    deletedAt?: DateTimeNullableFilter<"Table"> | Date | string | null
    deletedBy?: StringNullableFilter<"Table"> | string | null
  }

  export type TableCreateWithoutTableStatusInput = {
    name: string
    capacity?: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    restaurantZone?: RestaurantZoneCreateNestedOneWithoutTablesInput
    combineTableItems?: CombineTableItemCreateNestedManyWithoutTableInput
    commands?: CommandCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutTableStatusInput = {
    id?: number
    name: string
    capacity?: number
    restaurantZoneName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTableItems?: CombineTableItemUncheckedCreateNestedManyWithoutTableInput
    commands?: CommandUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutTableStatusInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutTableStatusInput, TableUncheckedCreateWithoutTableStatusInput>
  }

  export type TableCreateManyTableStatusInputEnvelope = {
    data: TableCreateManyTableStatusInput | TableCreateManyTableStatusInput[]
    skipDuplicates?: boolean
  }

  export type TableUpsertWithWhereUniqueWithoutTableStatusInput = {
    where: TableWhereUniqueInput
    update: XOR<TableUpdateWithoutTableStatusInput, TableUncheckedUpdateWithoutTableStatusInput>
    create: XOR<TableCreateWithoutTableStatusInput, TableUncheckedCreateWithoutTableStatusInput>
  }

  export type TableUpdateWithWhereUniqueWithoutTableStatusInput = {
    where: TableWhereUniqueInput
    data: XOR<TableUpdateWithoutTableStatusInput, TableUncheckedUpdateWithoutTableStatusInput>
  }

  export type TableUpdateManyWithWhereWithoutTableStatusInput = {
    where: TableScalarWhereInput
    data: XOR<TableUpdateManyMutationInput, TableUncheckedUpdateManyWithoutTableStatusInput>
  }

  export type RestaurantZoneCreateWithoutTablesInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type RestaurantZoneUncheckedCreateWithoutTablesInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type RestaurantZoneCreateOrConnectWithoutTablesInput = {
    where: RestaurantZoneWhereUniqueInput
    create: XOR<RestaurantZoneCreateWithoutTablesInput, RestaurantZoneUncheckedCreateWithoutTablesInput>
  }

  export type TableStatusCreateWithoutTablesInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type TableStatusUncheckedCreateWithoutTablesInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type TableStatusCreateOrConnectWithoutTablesInput = {
    where: TableStatusWhereUniqueInput
    create: XOR<TableStatusCreateWithoutTablesInput, TableStatusUncheckedCreateWithoutTablesInput>
  }

  export type CombineTableItemCreateWithoutTableInput = {
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTable: CombineTableCreateNestedOneWithoutTablesInput
  }

  export type CombineTableItemUncheckedCreateWithoutTableInput = {
    id?: number
    combineTableId: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableItemCreateOrConnectWithoutTableInput = {
    where: CombineTableItemWhereUniqueInput
    create: XOR<CombineTableItemCreateWithoutTableInput, CombineTableItemUncheckedCreateWithoutTableInput>
  }

  export type CombineTableItemCreateManyTableInputEnvelope = {
    data: CombineTableItemCreateManyTableInput | CombineTableItemCreateManyTableInput[]
    skipDuplicates?: boolean
  }

  export type CommandCreateWithoutTableInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orders?: OrderCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutTableInput = {
    id?: number
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutTableInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutTableInput, CommandUncheckedCreateWithoutTableInput>
  }

  export type CommandCreateManyTableInputEnvelope = {
    data: CommandCreateManyTableInput | CommandCreateManyTableInput[]
    skipDuplicates?: boolean
  }

  export type RestaurantZoneUpsertWithoutTablesInput = {
    update: XOR<RestaurantZoneUpdateWithoutTablesInput, RestaurantZoneUncheckedUpdateWithoutTablesInput>
    create: XOR<RestaurantZoneCreateWithoutTablesInput, RestaurantZoneUncheckedCreateWithoutTablesInput>
    where?: RestaurantZoneWhereInput
  }

  export type RestaurantZoneUpdateToOneWithWhereWithoutTablesInput = {
    where?: RestaurantZoneWhereInput
    data: XOR<RestaurantZoneUpdateWithoutTablesInput, RestaurantZoneUncheckedUpdateWithoutTablesInput>
  }

  export type RestaurantZoneUpdateWithoutTablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RestaurantZoneUncheckedUpdateWithoutTablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableStatusUpsertWithoutTablesInput = {
    update: XOR<TableStatusUpdateWithoutTablesInput, TableStatusUncheckedUpdateWithoutTablesInput>
    create: XOR<TableStatusCreateWithoutTablesInput, TableStatusUncheckedCreateWithoutTablesInput>
    where?: TableStatusWhereInput
  }

  export type TableStatusUpdateToOneWithWhereWithoutTablesInput = {
    where?: TableStatusWhereInput
    data: XOR<TableStatusUpdateWithoutTablesInput, TableStatusUncheckedUpdateWithoutTablesInput>
  }

  export type TableStatusUpdateWithoutTablesInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableStatusUncheckedUpdateWithoutTablesInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemUpsertWithWhereUniqueWithoutTableInput = {
    where: CombineTableItemWhereUniqueInput
    update: XOR<CombineTableItemUpdateWithoutTableInput, CombineTableItemUncheckedUpdateWithoutTableInput>
    create: XOR<CombineTableItemCreateWithoutTableInput, CombineTableItemUncheckedCreateWithoutTableInput>
  }

  export type CombineTableItemUpdateWithWhereUniqueWithoutTableInput = {
    where: CombineTableItemWhereUniqueInput
    data: XOR<CombineTableItemUpdateWithoutTableInput, CombineTableItemUncheckedUpdateWithoutTableInput>
  }

  export type CombineTableItemUpdateManyWithWhereWithoutTableInput = {
    where: CombineTableItemScalarWhereInput
    data: XOR<CombineTableItemUpdateManyMutationInput, CombineTableItemUncheckedUpdateManyWithoutTableInput>
  }

  export type CombineTableItemScalarWhereInput = {
    AND?: CombineTableItemScalarWhereInput | CombineTableItemScalarWhereInput[]
    OR?: CombineTableItemScalarWhereInput[]
    NOT?: CombineTableItemScalarWhereInput | CombineTableItemScalarWhereInput[]
    id?: IntFilter<"CombineTableItem"> | number
    combineTableId?: IntFilter<"CombineTableItem"> | number
    tableId?: IntFilter<"CombineTableItem"> | number
    createdAt?: DateTimeFilter<"CombineTableItem"> | Date | string
    createdBy?: StringFilter<"CombineTableItem"> | string
    updatedAt?: DateTimeNullableFilter<"CombineTableItem"> | Date | string | null
    updatedBy?: StringNullableFilter<"CombineTableItem"> | string | null
    deletedAt?: DateTimeNullableFilter<"CombineTableItem"> | Date | string | null
    deletedBy?: StringNullableFilter<"CombineTableItem"> | string | null
  }

  export type CommandUpsertWithWhereUniqueWithoutTableInput = {
    where: CommandWhereUniqueInput
    update: XOR<CommandUpdateWithoutTableInput, CommandUncheckedUpdateWithoutTableInput>
    create: XOR<CommandCreateWithoutTableInput, CommandUncheckedCreateWithoutTableInput>
  }

  export type CommandUpdateWithWhereUniqueWithoutTableInput = {
    where: CommandWhereUniqueInput
    data: XOR<CommandUpdateWithoutTableInput, CommandUncheckedUpdateWithoutTableInput>
  }

  export type CommandUpdateManyWithWhereWithoutTableInput = {
    where: CommandScalarWhereInput
    data: XOR<CommandUpdateManyMutationInput, CommandUncheckedUpdateManyWithoutTableInput>
  }

  export type CommandScalarWhereInput = {
    AND?: CommandScalarWhereInput | CommandScalarWhereInput[]
    OR?: CommandScalarWhereInput[]
    NOT?: CommandScalarWhereInput | CommandScalarWhereInput[]
    id?: IntFilter<"Command"> | number
    tableId?: IntNullableFilter<"Command"> | number | null
    combineTableId?: IntNullableFilter<"Command"> | number | null
    userDocumentOpener?: StringFilter<"Command"> | string
    openedAt?: DateTimeFilter<"Command"> | Date | string
    commandStatusCode?: StringFilter<"Command"> | string
    notes?: StringNullableFilter<"Command"> | string | null
    userDocumentCloser?: StringNullableFilter<"Command"> | string | null
    closedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    updatedBy?: StringNullableFilter<"Command"> | string | null
    deletedAt?: DateTimeNullableFilter<"Command"> | Date | string | null
    deletedBy?: StringNullableFilter<"Command"> | string | null
  }

  export type UserCreateWithoutCombinedTablesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCombinedTablesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCombinedTablesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCombinedTablesInput, UserUncheckedCreateWithoutCombinedTablesInput>
  }

  export type UserCreateWithoutReleasedTablesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReleasedTablesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReleasedTablesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReleasedTablesInput, UserUncheckedCreateWithoutReleasedTablesInput>
  }

  export type CombineTableItemCreateWithoutCombineTableInput = {
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table: TableCreateNestedOneWithoutCombineTableItemsInput
  }

  export type CombineTableItemUncheckedCreateWithoutCombineTableInput = {
    id?: number
    tableId: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableItemCreateOrConnectWithoutCombineTableInput = {
    where: CombineTableItemWhereUniqueInput
    create: XOR<CombineTableItemCreateWithoutCombineTableInput, CombineTableItemUncheckedCreateWithoutCombineTableInput>
  }

  export type CombineTableItemCreateManyCombineTableInputEnvelope = {
    data: CombineTableItemCreateManyCombineTableInput | CombineTableItemCreateManyCombineTableInput[]
    skipDuplicates?: boolean
  }

  export type CommandCreateWithoutCombineTableInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orders?: OrderCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutCombineTableInput = {
    id?: number
    tableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutCombineTableInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutCombineTableInput, CommandUncheckedCreateWithoutCombineTableInput>
  }

  export type CommandCreateManyCombineTableInputEnvelope = {
    data: CommandCreateManyCombineTableInput | CommandCreateManyCombineTableInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCombinedTablesInput = {
    update: XOR<UserUpdateWithoutCombinedTablesInput, UserUncheckedUpdateWithoutCombinedTablesInput>
    create: XOR<UserCreateWithoutCombinedTablesInput, UserUncheckedCreateWithoutCombinedTablesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCombinedTablesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCombinedTablesInput, UserUncheckedUpdateWithoutCombinedTablesInput>
  }

  export type UserUpdateWithoutCombinedTablesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCombinedTablesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReleasedTablesInput = {
    update: XOR<UserUpdateWithoutReleasedTablesInput, UserUncheckedUpdateWithoutReleasedTablesInput>
    create: XOR<UserCreateWithoutReleasedTablesInput, UserUncheckedCreateWithoutReleasedTablesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReleasedTablesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReleasedTablesInput, UserUncheckedUpdateWithoutReleasedTablesInput>
  }

  export type UserUpdateWithoutReleasedTablesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReleasedTablesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CombineTableItemUpsertWithWhereUniqueWithoutCombineTableInput = {
    where: CombineTableItemWhereUniqueInput
    update: XOR<CombineTableItemUpdateWithoutCombineTableInput, CombineTableItemUncheckedUpdateWithoutCombineTableInput>
    create: XOR<CombineTableItemCreateWithoutCombineTableInput, CombineTableItemUncheckedCreateWithoutCombineTableInput>
  }

  export type CombineTableItemUpdateWithWhereUniqueWithoutCombineTableInput = {
    where: CombineTableItemWhereUniqueInput
    data: XOR<CombineTableItemUpdateWithoutCombineTableInput, CombineTableItemUncheckedUpdateWithoutCombineTableInput>
  }

  export type CombineTableItemUpdateManyWithWhereWithoutCombineTableInput = {
    where: CombineTableItemScalarWhereInput
    data: XOR<CombineTableItemUpdateManyMutationInput, CombineTableItemUncheckedUpdateManyWithoutCombineTableInput>
  }

  export type CommandUpsertWithWhereUniqueWithoutCombineTableInput = {
    where: CommandWhereUniqueInput
    update: XOR<CommandUpdateWithoutCombineTableInput, CommandUncheckedUpdateWithoutCombineTableInput>
    create: XOR<CommandCreateWithoutCombineTableInput, CommandUncheckedCreateWithoutCombineTableInput>
  }

  export type CommandUpdateWithWhereUniqueWithoutCombineTableInput = {
    where: CommandWhereUniqueInput
    data: XOR<CommandUpdateWithoutCombineTableInput, CommandUncheckedUpdateWithoutCombineTableInput>
  }

  export type CommandUpdateManyWithWhereWithoutCombineTableInput = {
    where: CommandScalarWhereInput
    data: XOR<CommandUpdateManyMutationInput, CommandUncheckedUpdateManyWithoutCombineTableInput>
  }

  export type CombineTableCreateWithoutTablesInput = {
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combiner: UserCreateNestedOneWithoutCombinedTablesInput
    releaser?: UserCreateNestedOneWithoutReleasedTablesInput
    commands?: CommandCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableUncheckedCreateWithoutTablesInput = {
    id?: number
    name: string
    userDocumentCombiner: string
    combinerAt?: Date | string
    isActive?: boolean
    userDocumentReleaser?: string | null
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    commands?: CommandUncheckedCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableCreateOrConnectWithoutTablesInput = {
    where: CombineTableWhereUniqueInput
    create: XOR<CombineTableCreateWithoutTablesInput, CombineTableUncheckedCreateWithoutTablesInput>
  }

  export type TableCreateWithoutCombineTableItemsInput = {
    name: string
    capacity?: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    restaurantZone?: RestaurantZoneCreateNestedOneWithoutTablesInput
    tableStatus?: TableStatusCreateNestedOneWithoutTablesInput
    commands?: CommandCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutCombineTableItemsInput = {
    id?: number
    name: string
    capacity?: number
    restaurantZoneName?: string | null
    tableStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    commands?: CommandUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutCombineTableItemsInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutCombineTableItemsInput, TableUncheckedCreateWithoutCombineTableItemsInput>
  }

  export type CombineTableUpsertWithoutTablesInput = {
    update: XOR<CombineTableUpdateWithoutTablesInput, CombineTableUncheckedUpdateWithoutTablesInput>
    create: XOR<CombineTableCreateWithoutTablesInput, CombineTableUncheckedCreateWithoutTablesInput>
    where?: CombineTableWhereInput
  }

  export type CombineTableUpdateToOneWithWhereWithoutTablesInput = {
    where?: CombineTableWhereInput
    data: XOR<CombineTableUpdateWithoutTablesInput, CombineTableUncheckedUpdateWithoutTablesInput>
  }

  export type CombineTableUpdateWithoutTablesInput = {
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combiner?: UserUpdateOneRequiredWithoutCombinedTablesNestedInput
    releaser?: UserUpdateOneWithoutReleasedTablesNestedInput
    commands?: CommandUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateWithoutTablesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userDocumentCombiner?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userDocumentReleaser?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    commands?: CommandUncheckedUpdateManyWithoutCombineTableNestedInput
  }

  export type TableUpsertWithoutCombineTableItemsInput = {
    update: XOR<TableUpdateWithoutCombineTableItemsInput, TableUncheckedUpdateWithoutCombineTableItemsInput>
    create: XOR<TableCreateWithoutCombineTableItemsInput, TableUncheckedCreateWithoutCombineTableItemsInput>
    where?: TableWhereInput
  }

  export type TableUpdateToOneWithWhereWithoutCombineTableItemsInput = {
    where?: TableWhereInput
    data: XOR<TableUpdateWithoutCombineTableItemsInput, TableUncheckedUpdateWithoutCombineTableItemsInput>
  }

  export type TableUpdateWithoutCombineTableItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    restaurantZone?: RestaurantZoneUpdateOneWithoutTablesNestedInput
    tableStatus?: TableStatusUpdateOneRequiredWithoutTablesNestedInput
    commands?: CommandUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutCombineTableItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantZoneName?: NullableStringFieldUpdateOperationsInput | string | null
    tableStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    commands?: CommandUncheckedUpdateManyWithoutTableNestedInput
  }

  export type ProductCreateWithoutBrandInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productType: ProductTypeCreateNestedOneWithoutProductsInput
    productCategory: ProductCategoryCreateNestedOneWithoutProductsInput
    productStatus?: ProductStatusCreateNestedOneWithoutProductsInput
    inventory?: InventoryCreateNestedOneWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBrandInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory?: InventoryUncheckedCreateNestedOneWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBrandInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput>
  }

  export type ProductCreateManyBrandInputEnvelope = {
    data: ProductCreateManyBrandInput | ProductCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutBrandInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutBrandInput, ProductUncheckedUpdateWithoutBrandInput>
    create: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutBrandInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutBrandInput, ProductUncheckedUpdateWithoutBrandInput>
  }

  export type ProductUpdateManyWithWhereWithoutBrandInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutBrandInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: DecimalFilter<"Product"> | Decimal | DecimalJsLike | number | string
    offerPrice?: DecimalNullableFilter<"Product"> | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFilter<"Product"> | string
    productCategoryName?: StringFilter<"Product"> | string
    brandName?: StringNullableFilter<"Product"> | string | null
    productStatusCode?: StringFilter<"Product"> | string
    mainImageId?: IntNullableFilter<"Product"> | number | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    createdBy?: StringFilter<"Product"> | string
    updatedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    updatedBy?: StringNullableFilter<"Product"> | string | null
    deletedAt?: DateTimeNullableFilter<"Product"> | Date | string | null
    deletedBy?: StringNullableFilter<"Product"> | string | null
  }

  export type ProductCreateWithoutProductTypeInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productCategory: ProductCategoryCreateNestedOneWithoutProductsInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    productStatus?: ProductStatusCreateNestedOneWithoutProductsInput
    inventory?: InventoryCreateNestedOneWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductTypeInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productCategoryName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory?: InventoryUncheckedCreateNestedOneWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductTypeInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductTypeInput, ProductUncheckedCreateWithoutProductTypeInput>
  }

  export type ProductCreateManyProductTypeInputEnvelope = {
    data: ProductCreateManyProductTypeInput | ProductCreateManyProductTypeInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutProductTypeInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutProductTypeInput, ProductUncheckedUpdateWithoutProductTypeInput>
    create: XOR<ProductCreateWithoutProductTypeInput, ProductUncheckedCreateWithoutProductTypeInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutProductTypeInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutProductTypeInput, ProductUncheckedUpdateWithoutProductTypeInput>
  }

  export type ProductUpdateManyWithWhereWithoutProductTypeInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductTypeInput>
  }

  export type ProductCreateWithoutProductCategoryInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productType: ProductTypeCreateNestedOneWithoutProductsInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    productStatus?: ProductStatusCreateNestedOneWithoutProductsInput
    inventory?: InventoryCreateNestedOneWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductCategoryInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory?: InventoryUncheckedCreateNestedOneWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductCategoryInput, ProductUncheckedCreateWithoutProductCategoryInput>
  }

  export type ProductCreateManyProductCategoryInputEnvelope = {
    data: ProductCreateManyProductCategoryInput | ProductCreateManyProductCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutProductCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutProductCategoryInput, ProductUncheckedUpdateWithoutProductCategoryInput>
    create: XOR<ProductCreateWithoutProductCategoryInput, ProductUncheckedCreateWithoutProductCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutProductCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutProductCategoryInput, ProductUncheckedUpdateWithoutProductCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutProductCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductCategoryInput>
  }

  export type ProductCreateWithoutProductStatusInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productType: ProductTypeCreateNestedOneWithoutProductsInput
    productCategory: ProductCategoryCreateNestedOneWithoutProductsInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    inventory?: InventoryCreateNestedOneWithoutProductInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductStatusInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    brandName?: string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory?: InventoryUncheckedCreateNestedOneWithoutProductInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductStatusInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductStatusInput, ProductUncheckedCreateWithoutProductStatusInput>
  }

  export type ProductCreateManyProductStatusInputEnvelope = {
    data: ProductCreateManyProductStatusInput | ProductCreateManyProductStatusInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutProductStatusInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutProductStatusInput, ProductUncheckedUpdateWithoutProductStatusInput>
    create: XOR<ProductCreateWithoutProductStatusInput, ProductUncheckedCreateWithoutProductStatusInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutProductStatusInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutProductStatusInput, ProductUncheckedUpdateWithoutProductStatusInput>
  }

  export type ProductUpdateManyWithWhereWithoutProductStatusInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductStatusInput>
  }

  export type ProductTypeCreateWithoutProductsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductTypeUncheckedCreateWithoutProductsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductTypeCreateOrConnectWithoutProductsInput = {
    where: ProductTypeWhereUniqueInput
    create: XOR<ProductTypeCreateWithoutProductsInput, ProductTypeUncheckedCreateWithoutProductsInput>
  }

  export type ProductCategoryCreateWithoutProductsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductCategoryUncheckedCreateWithoutProductsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductCategoryCreateOrConnectWithoutProductsInput = {
    where: ProductCategoryWhereUniqueInput
    create: XOR<ProductCategoryCreateWithoutProductsInput, ProductCategoryUncheckedCreateWithoutProductsInput>
  }

  export type BrandCreateWithoutProductsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type BrandUncheckedCreateWithoutProductsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type BrandCreateOrConnectWithoutProductsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
  }

  export type ProductStatusCreateWithoutProductsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type ProductStatusUncheckedCreateWithoutProductsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type ProductStatusCreateOrConnectWithoutProductsInput = {
    where: ProductStatusWhereUniqueInput
    create: XOR<ProductStatusCreateWithoutProductsInput, ProductStatusUncheckedCreateWithoutProductsInput>
  }

  export type InventoryCreateWithoutProductInput = {
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutProductInput = {
    id?: number
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutProductInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutProductInput, InventoryUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateWithoutProductInput = {
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrderItemsInput
    order?: OrderCreateNestedOneWithoutOrderItemsInput
    orderItemStatus?: OrderItemStatusCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: number
    commandId: number
    orderCode?: string | null
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductTypeUpsertWithoutProductsInput = {
    update: XOR<ProductTypeUpdateWithoutProductsInput, ProductTypeUncheckedUpdateWithoutProductsInput>
    create: XOR<ProductTypeCreateWithoutProductsInput, ProductTypeUncheckedCreateWithoutProductsInput>
    where?: ProductTypeWhereInput
  }

  export type ProductTypeUpdateToOneWithWhereWithoutProductsInput = {
    where?: ProductTypeWhereInput
    data: XOR<ProductTypeUpdateWithoutProductsInput, ProductTypeUncheckedUpdateWithoutProductsInput>
  }

  export type ProductTypeUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTypeUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCategoryUpsertWithoutProductsInput = {
    update: XOR<ProductCategoryUpdateWithoutProductsInput, ProductCategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<ProductCategoryCreateWithoutProductsInput, ProductCategoryUncheckedCreateWithoutProductsInput>
    where?: ProductCategoryWhereInput
  }

  export type ProductCategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: ProductCategoryWhereInput
    data: XOR<ProductCategoryUpdateWithoutProductsInput, ProductCategoryUncheckedUpdateWithoutProductsInput>
  }

  export type ProductCategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCategoryUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandUpsertWithoutProductsInput = {
    update: XOR<BrandUpdateWithoutProductsInput, BrandUncheckedUpdateWithoutProductsInput>
    create: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutProductsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutProductsInput, BrandUncheckedUpdateWithoutProductsInput>
  }

  export type BrandUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BrandUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductStatusUpsertWithoutProductsInput = {
    update: XOR<ProductStatusUpdateWithoutProductsInput, ProductStatusUncheckedUpdateWithoutProductsInput>
    create: XOR<ProductStatusCreateWithoutProductsInput, ProductStatusUncheckedCreateWithoutProductsInput>
    where?: ProductStatusWhereInput
  }

  export type ProductStatusUpdateToOneWithWhereWithoutProductsInput = {
    where?: ProductStatusWhereInput
    data: XOR<ProductStatusUpdateWithoutProductsInput, ProductStatusUncheckedUpdateWithoutProductsInput>
  }

  export type ProductStatusUpdateWithoutProductsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductStatusUncheckedUpdateWithoutProductsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryUpsertWithoutProductInput = {
    update: XOR<InventoryUpdateWithoutProductInput, InventoryUncheckedUpdateWithoutProductInput>
    create: XOR<InventoryCreateWithoutProductInput, InventoryUncheckedCreateWithoutProductInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutProductInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutProductInput, InventoryUncheckedUpdateWithoutProductInput>
  }

  export type InventoryUpdateWithoutProductInput = {
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryMovements?: InventoryMovementUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    commandId?: IntFilter<"OrderItem"> | number
    orderCode?: StringNullableFilter<"OrderItem"> | string | null
    productId?: IntFilter<"OrderItem"> | number
    orderItemStatusCode?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    specialInstructions?: StringNullableFilter<"OrderItem"> | string | null
    unitPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFilter<"OrderItem"> | Decimal | DecimalJsLike | number | string
    notes?: StringNullableFilter<"OrderItem"> | string | null
    createdAt?: DateTimeFilter<"OrderItem"> | Date | string
    createdBy?: StringFilter<"OrderItem"> | string
    updatedAt?: DateTimeNullableFilter<"OrderItem"> | Date | string | null
    updatedBy?: StringNullableFilter<"OrderItem"> | string | null
    deletedAt?: DateTimeNullableFilter<"OrderItem"> | Date | string | null
    deletedBy?: StringNullableFilter<"OrderItem"> | string | null
  }

  export type UserCreateWithoutDocumentTypeInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentTypeInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentTypeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentTypeInput, UserUncheckedCreateWithoutDocumentTypeInput>
  }

  export type UserCreateManyDocumentTypeInputEnvelope = {
    data: UserCreateManyDocumentTypeInput | UserCreateManyDocumentTypeInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutDocumentTypeInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutDocumentTypeInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutDocumentTypeInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutDocumentTypeInput, CustomerUncheckedCreateWithoutDocumentTypeInput>
  }

  export type CustomerCreateManyDocumentTypeInputEnvelope = {
    data: CustomerCreateManyDocumentTypeInput | CustomerCreateManyDocumentTypeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutDocumentTypeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDocumentTypeInput, UserUncheckedUpdateWithoutDocumentTypeInput>
    create: XOR<UserCreateWithoutDocumentTypeInput, UserUncheckedCreateWithoutDocumentTypeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDocumentTypeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDocumentTypeInput, UserUncheckedUpdateWithoutDocumentTypeInput>
  }

  export type UserUpdateManyWithWhereWithoutDocumentTypeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDocumentTypeInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    document?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    pin?: StringNullableFilter<"User"> | string | null
    documentTypeName?: StringFilter<"User"> | string
    roleName?: StringFilter<"User"> | string
    accountStatusCode?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: StringFilter<"User"> | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedBy?: StringNullableFilter<"User"> | string | null
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    deletedBy?: StringNullableFilter<"User"> | string | null
  }

  export type CustomerUpsertWithWhereUniqueWithoutDocumentTypeInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutDocumentTypeInput, CustomerUncheckedUpdateWithoutDocumentTypeInput>
    create: XOR<CustomerCreateWithoutDocumentTypeInput, CustomerUncheckedCreateWithoutDocumentTypeInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutDocumentTypeInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutDocumentTypeInput, CustomerUncheckedUpdateWithoutDocumentTypeInput>
  }

  export type CustomerUpdateManyWithWhereWithoutDocumentTypeInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutDocumentTypeInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    document?: StringFilter<"Customer"> | string
    username?: StringNullableFilter<"Customer"> | string | null
    email?: StringNullableFilter<"Customer"> | string | null
    password?: StringNullableFilter<"Customer"> | string | null
    documentTypeName?: StringFilter<"Customer"> | string
    accountStatusCode?: StringFilter<"Customer"> | string
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    createdBy?: StringFilter<"Customer"> | string
    updatedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    updatedBy?: StringNullableFilter<"Customer"> | string | null
    deletedAt?: DateTimeNullableFilter<"Customer"> | Date | string | null
    deletedBy?: StringNullableFilter<"Customer"> | string | null
  }

  export type UserCreateWithoutAccountStatusInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountStatusInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountStatusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountStatusInput, UserUncheckedCreateWithoutAccountStatusInput>
  }

  export type UserCreateManyAccountStatusInputEnvelope = {
    data: UserCreateManyAccountStatusInput | UserCreateManyAccountStatusInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutAccountStatusInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAccountStatusInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAccountStatusInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAccountStatusInput, CustomerUncheckedCreateWithoutAccountStatusInput>
  }

  export type CustomerCreateManyAccountStatusInputEnvelope = {
    data: CustomerCreateManyAccountStatusInput | CustomerCreateManyAccountStatusInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAccountStatusInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAccountStatusInput, UserUncheckedUpdateWithoutAccountStatusInput>
    create: XOR<UserCreateWithoutAccountStatusInput, UserUncheckedCreateWithoutAccountStatusInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAccountStatusInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAccountStatusInput, UserUncheckedUpdateWithoutAccountStatusInput>
  }

  export type UserUpdateManyWithWhereWithoutAccountStatusInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAccountStatusInput>
  }

  export type CustomerUpsertWithWhereUniqueWithoutAccountStatusInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutAccountStatusInput, CustomerUncheckedUpdateWithoutAccountStatusInput>
    create: XOR<CustomerCreateWithoutAccountStatusInput, CustomerUncheckedCreateWithoutAccountStatusInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutAccountStatusInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutAccountStatusInput, CustomerUncheckedUpdateWithoutAccountStatusInput>
  }

  export type CustomerUpdateManyWithWhereWithoutAccountStatusInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutAccountStatusInput>
  }

  export type PermissionCreateWithoutPermissioncategoryInput = {
    code: string
    name: string
    description?: string | null
    createdAt?: Date | string
    createdBy: string
    rolePermissions?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutPermissioncategoryInput = {
    code: string
    name: string
    description?: string | null
    createdAt?: Date | string
    createdBy: string
    rolePermissions?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutPermissioncategoryInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutPermissioncategoryInput, PermissionUncheckedCreateWithoutPermissioncategoryInput>
  }

  export type PermissionCreateManyPermissioncategoryInputEnvelope = {
    data: PermissionCreateManyPermissioncategoryInput | PermissionCreateManyPermissioncategoryInput[]
    skipDuplicates?: boolean
  }

  export type PermissionUpsertWithWhereUniqueWithoutPermissioncategoryInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutPermissioncategoryInput, PermissionUncheckedUpdateWithoutPermissioncategoryInput>
    create: XOR<PermissionCreateWithoutPermissioncategoryInput, PermissionUncheckedCreateWithoutPermissioncategoryInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutPermissioncategoryInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutPermissioncategoryInput, PermissionUncheckedUpdateWithoutPermissioncategoryInput>
  }

  export type PermissionUpdateManyWithWhereWithoutPermissioncategoryInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutPermissioncategoryInput>
  }

  export type PermissionScalarWhereInput = {
    AND?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    OR?: PermissionScalarWhereInput[]
    NOT?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    code?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    permissionCategoryCode?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    createdBy?: StringFilter<"Permission"> | string
  }

  export type PermissionCategoryCreateWithoutPermissionsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PermissionCategoryUncheckedCreateWithoutPermissionsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PermissionCategoryCreateOrConnectWithoutPermissionsInput = {
    where: PermissionCategoryWhereUniqueInput
    create: XOR<PermissionCategoryCreateWithoutPermissionsInput, PermissionCategoryUncheckedCreateWithoutPermissionsInput>
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    createdAt?: Date | string
    createdBy: string
    role: RoleCreateNestedOneWithoutPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    roleName: string
    createdAt?: Date | string
    createdBy: string
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type PermissionCategoryUpsertWithoutPermissionsInput = {
    update: XOR<PermissionCategoryUpdateWithoutPermissionsInput, PermissionCategoryUncheckedUpdateWithoutPermissionsInput>
    create: XOR<PermissionCategoryCreateWithoutPermissionsInput, PermissionCategoryUncheckedCreateWithoutPermissionsInput>
    where?: PermissionCategoryWhereInput
  }

  export type PermissionCategoryUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: PermissionCategoryWhereInput
    data: XOR<PermissionCategoryUpdateWithoutPermissionsInput, PermissionCategoryUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionCategoryUpdateWithoutPermissionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCategoryUncheckedUpdateWithoutPermissionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: IntFilter<"RolePermission"> | number
    roleName?: StringFilter<"RolePermission"> | string
    permissionCode?: StringFilter<"RolePermission"> | string
    createdAt?: DateTimeFilter<"RolePermission"> | Date | string
    createdBy?: StringFilter<"RolePermission"> | string
  }

  export type RolePermissionCreateWithoutRoleInput = {
    createdAt?: Date | string
    createdBy: string
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    id?: number
    permissionCode: string
    createdAt?: Date | string
    createdBy: string
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutRoleInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolePermissionsInput = {
    code: string
    name: string
    description?: string | null
    createdAt?: Date | string
    createdBy: string
    permissioncategory: PermissionCategoryCreateNestedOneWithoutPermissionsInput
  }

  export type PermissionUncheckedCreateWithoutRolePermissionsInput = {
    code: string
    name: string
    description?: string | null
    permissionCategoryCode: string
    createdAt?: Date | string
    createdBy: string
  }

  export type PermissionCreateOrConnectWithoutRolePermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolePermissionsInput = {
    update: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolePermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type PermissionUpdateWithoutRolePermissionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    permissioncategory?: PermissionCategoryUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type PermissionUncheckedUpdateWithoutRolePermissionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    permissionCategoryCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentTypeCreateWithoutUsersInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    customers?: CustomerCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateWithoutUsersInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    customers?: CustomerUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeCreateOrConnectWithoutUsersInput = {
    where: DocumentTypeWhereUniqueInput
    create: XOR<DocumentTypeCreateWithoutUsersInput, DocumentTypeUncheckedCreateWithoutUsersInput>
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type AccountStatusCreateWithoutUsersInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    customers?: CustomerCreateNestedManyWithoutAccountStatusInput
  }

  export type AccountStatusUncheckedCreateWithoutUsersInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    customers?: CustomerUncheckedCreateNestedManyWithoutAccountStatusInput
  }

  export type AccountStatusCreateOrConnectWithoutUsersInput = {
    where: AccountStatusWhereUniqueInput
    create: XOR<AccountStatusCreateWithoutUsersInput, AccountStatusUncheckedCreateWithoutUsersInput>
  }

  export type ThemeCreateWithoutUserInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    usersUsingThisTheme?: userProfileCreateNestedManyWithoutThemeInput
    customersUsingThisTheme?: CustomerProfileCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutUserInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    usersUsingThisTheme?: userProfileUncheckedCreateNestedManyWithoutThemeInput
    customersUsingThisTheme?: CustomerProfileUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutUserInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutUserInput, ThemeUncheckedCreateWithoutUserInput>
  }

  export type ThemeCreateManyUserInputEnvelope = {
    data: ThemeCreateManyUserInput | ThemeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CombineTableCreateWithoutCombinerInput = {
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    releaser?: UserCreateNestedOneWithoutReleasedTablesInput
    tables?: CombineTableItemCreateNestedManyWithoutCombineTableInput
    commands?: CommandCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableUncheckedCreateWithoutCombinerInput = {
    id?: number
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    userDocumentReleaser?: string | null
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tables?: CombineTableItemUncheckedCreateNestedManyWithoutCombineTableInput
    commands?: CommandUncheckedCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableCreateOrConnectWithoutCombinerInput = {
    where: CombineTableWhereUniqueInput
    create: XOR<CombineTableCreateWithoutCombinerInput, CombineTableUncheckedCreateWithoutCombinerInput>
  }

  export type CombineTableCreateManyCombinerInputEnvelope = {
    data: CombineTableCreateManyCombinerInput | CombineTableCreateManyCombinerInput[]
    skipDuplicates?: boolean
  }

  export type CombineTableCreateWithoutReleaserInput = {
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combiner: UserCreateNestedOneWithoutCombinedTablesInput
    tables?: CombineTableItemCreateNestedManyWithoutCombineTableInput
    commands?: CommandCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableUncheckedCreateWithoutReleaserInput = {
    id?: number
    name: string
    userDocumentCombiner: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tables?: CombineTableItemUncheckedCreateNestedManyWithoutCombineTableInput
    commands?: CommandUncheckedCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableCreateOrConnectWithoutReleaserInput = {
    where: CombineTableWhereUniqueInput
    create: XOR<CombineTableCreateWithoutReleaserInput, CombineTableUncheckedCreateWithoutReleaserInput>
  }

  export type CombineTableCreateManyReleaserInputEnvelope = {
    data: CombineTableCreateManyReleaserInput | CombineTableCreateManyReleaserInput[]
    skipDuplicates?: boolean
  }

  export type userProfileCreateWithoutUserInput = {
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    theme?: ThemeCreateNestedOneWithoutUsersUsingThisThemeInput
  }

  export type userProfileUncheckedCreateWithoutUserInput = {
    id?: number
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    themeName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type userProfileCreateOrConnectWithoutUserInput = {
    where: userProfileWhereUniqueInput
    create: XOR<userProfileCreateWithoutUserInput, userProfileUncheckedCreateWithoutUserInput>
  }

  export type CommandCreateWithoutOpenerInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orders?: OrderCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutOpenerInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutOpenerInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutOpenerInput, CommandUncheckedCreateWithoutOpenerInput>
  }

  export type CommandCreateManyOpenerInputEnvelope = {
    data: CommandCreateManyOpenerInput | CommandCreateManyOpenerInput[]
    skipDuplicates?: boolean
  }

  export type CommandCreateWithoutCloserInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    orders?: OrderCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutCloserInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutCloserInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutCloserInput, CommandUncheckedCreateWithoutCloserInput>
  }

  export type CommandCreateManyCloserInputEnvelope = {
    data: CommandCreateManyCloserInput | CommandCreateManyCloserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutCreatorInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCreatorInput = {
    code: string
    commandId: number
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCreatorInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCreatorInput, OrderUncheckedCreateWithoutCreatorInput>
  }

  export type OrderCreateManyCreatorInputEnvelope = {
    data: OrderCreateManyCreatorInput | OrderCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutCloserInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCloserInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCloserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCloserInput, OrderUncheckedCreateWithoutCloserInput>
  }

  export type OrderCreateManyCloserInputEnvelope = {
    data: OrderCreateManyCloserInput | OrderCreateManyCloserInput[]
    skipDuplicates?: boolean
  }

  export type CashBoxCreateWithoutOpenedInput = {
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    closed?: UserCreateNestedOneWithoutClosedCashBoxesInput
    cashboxMovements?: CashBoxMovementCreateNestedManyWithoutCashboxInput
    payments?: PaymentCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxUncheckedCreateWithoutOpenedInput = {
    id?: number
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    userDocumentClosed?: string | null
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashboxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutCashboxInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxCreateOrConnectWithoutOpenedInput = {
    where: CashBoxWhereUniqueInput
    create: XOR<CashBoxCreateWithoutOpenedInput, CashBoxUncheckedCreateWithoutOpenedInput>
  }

  export type CashBoxCreateManyOpenedInputEnvelope = {
    data: CashBoxCreateManyOpenedInput | CashBoxCreateManyOpenedInput[]
    skipDuplicates?: boolean
  }

  export type CashBoxCreateWithoutClosedInput = {
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    opened: UserCreateNestedOneWithoutOpenedCashBoxesInput
    cashboxMovements?: CashBoxMovementCreateNestedManyWithoutCashboxInput
    payments?: PaymentCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxUncheckedCreateWithoutClosedInput = {
    id?: number
    userDocumentOpened: string
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashboxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutCashboxInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxCreateOrConnectWithoutClosedInput = {
    where: CashBoxWhereUniqueInput
    create: XOR<CashBoxCreateWithoutClosedInput, CashBoxUncheckedCreateWithoutClosedInput>
  }

  export type CashBoxCreateManyClosedInputEnvelope = {
    data: CashBoxCreateManyClosedInput | CashBoxCreateManyClosedInput[]
    skipDuplicates?: boolean
  }

  export type CashBoxMovementCreateWithoutUserInput = {
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashbox: CashBoxCreateNestedOneWithoutCashboxMovementsInput
    cashboxMovementType: CashBoxMovementTypeCreateNestedOneWithoutCashBoxMovementInput
  }

  export type CashBoxMovementUncheckedCreateWithoutUserInput = {
    id?: number
    cashboxId: number
    cashboxMovementTypeCode: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementCreateOrConnectWithoutUserInput = {
    where: CashBoxMovementWhereUniqueInput
    create: XOR<CashBoxMovementCreateWithoutUserInput, CashBoxMovementUncheckedCreateWithoutUserInput>
  }

  export type CashBoxMovementCreateManyUserInputEnvelope = {
    data: CashBoxMovementCreateManyUserInput | CashBoxMovementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutReceiveInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    order: OrderCreateNestedOneWithoutPaymentInput
    cashBox: CashBoxCreateNestedOneWithoutPaymentsInput
    paymentMethod: PaymentMethodCreateNestedOneWithoutPaymentsInput
    paid?: CustomerCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutReceiveInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateOrConnectWithoutReceiveInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutReceiveInput, PaymentUncheckedCreateWithoutReceiveInput>
  }

  export type PaymentCreateManyReceiveInputEnvelope = {
    data: PaymentCreateManyReceiveInput | PaymentCreateManyReceiveInput[]
    skipDuplicates?: boolean
  }

  export type InventoryMovementCreateWithoutUserInput = {
    quantityMovement: number
    reasonDescription: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory: InventoryCreateNestedOneWithoutInventoryMovementsInput
    inventoryMovementType: InventoryMovementTypeCreateNestedOneWithoutMovementsInput
  }

  export type InventoryMovementUncheckedCreateWithoutUserInput = {
    id?: number
    inventoryId: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementCreateOrConnectWithoutUserInput = {
    where: InventoryMovementWhereUniqueInput
    create: XOR<InventoryMovementCreateWithoutUserInput, InventoryMovementUncheckedCreateWithoutUserInput>
  }

  export type InventoryMovementCreateManyUserInputEnvelope = {
    data: InventoryMovementCreateManyUserInput | InventoryMovementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    customer?: CustomerCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    customerDocument?: string | null
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutUserInput = {
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutUserInput = {
    id?: number
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    customerDocument?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutUserInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogCreateManyUserInputEnvelope = {
    data: LogCreateManyUserInput | LogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTypeUpsertWithoutUsersInput = {
    update: XOR<DocumentTypeUpdateWithoutUsersInput, DocumentTypeUncheckedUpdateWithoutUsersInput>
    create: XOR<DocumentTypeCreateWithoutUsersInput, DocumentTypeUncheckedCreateWithoutUsersInput>
    where?: DocumentTypeWhereInput
  }

  export type DocumentTypeUpdateToOneWithWhereWithoutUsersInput = {
    where?: DocumentTypeWhereInput
    data: XOR<DocumentTypeUpdateWithoutUsersInput, DocumentTypeUncheckedUpdateWithoutUsersInput>
  }

  export type DocumentTypeUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: CustomerUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: CustomerUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type AccountStatusUpsertWithoutUsersInput = {
    update: XOR<AccountStatusUpdateWithoutUsersInput, AccountStatusUncheckedUpdateWithoutUsersInput>
    create: XOR<AccountStatusCreateWithoutUsersInput, AccountStatusUncheckedCreateWithoutUsersInput>
    where?: AccountStatusWhereInput
  }

  export type AccountStatusUpdateToOneWithWhereWithoutUsersInput = {
    where?: AccountStatusWhereInput
    data: XOR<AccountStatusUpdateWithoutUsersInput, AccountStatusUncheckedUpdateWithoutUsersInput>
  }

  export type AccountStatusUpdateWithoutUsersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: CustomerUpdateManyWithoutAccountStatusNestedInput
  }

  export type AccountStatusUncheckedUpdateWithoutUsersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: CustomerUncheckedUpdateManyWithoutAccountStatusNestedInput
  }

  export type ThemeUpsertWithWhereUniqueWithoutUserInput = {
    where: ThemeWhereUniqueInput
    update: XOR<ThemeUpdateWithoutUserInput, ThemeUncheckedUpdateWithoutUserInput>
    create: XOR<ThemeCreateWithoutUserInput, ThemeUncheckedCreateWithoutUserInput>
  }

  export type ThemeUpdateWithWhereUniqueWithoutUserInput = {
    where: ThemeWhereUniqueInput
    data: XOR<ThemeUpdateWithoutUserInput, ThemeUncheckedUpdateWithoutUserInput>
  }

  export type ThemeUpdateManyWithWhereWithoutUserInput = {
    where: ThemeScalarWhereInput
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyWithoutUserInput>
  }

  export type ThemeScalarWhereInput = {
    AND?: ThemeScalarWhereInput | ThemeScalarWhereInput[]
    OR?: ThemeScalarWhereInput[]
    NOT?: ThemeScalarWhereInput | ThemeScalarWhereInput[]
    name?: StringFilter<"Theme"> | string
    primaryColor?: StringFilter<"Theme"> | string
    secondaryColor?: StringFilter<"Theme"> | string
    accentColor?: StringFilter<"Theme"> | string
    neutralColor?: StringFilter<"Theme"> | string
    isSystem?: BoolFilter<"Theme"> | boolean
    isPublic?: BoolFilter<"Theme"> | boolean
    userDocumentCreator?: StringNullableFilter<"Theme"> | string | null
    createdAt?: DateTimeFilter<"Theme"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Theme"> | Date | string | null
    updatedBy?: StringNullableFilter<"Theme"> | string | null
    deletedAt?: DateTimeNullableFilter<"Theme"> | Date | string | null
    deletedBy?: StringNullableFilter<"Theme"> | string | null
  }

  export type CombineTableUpsertWithWhereUniqueWithoutCombinerInput = {
    where: CombineTableWhereUniqueInput
    update: XOR<CombineTableUpdateWithoutCombinerInput, CombineTableUncheckedUpdateWithoutCombinerInput>
    create: XOR<CombineTableCreateWithoutCombinerInput, CombineTableUncheckedCreateWithoutCombinerInput>
  }

  export type CombineTableUpdateWithWhereUniqueWithoutCombinerInput = {
    where: CombineTableWhereUniqueInput
    data: XOR<CombineTableUpdateWithoutCombinerInput, CombineTableUncheckedUpdateWithoutCombinerInput>
  }

  export type CombineTableUpdateManyWithWhereWithoutCombinerInput = {
    where: CombineTableScalarWhereInput
    data: XOR<CombineTableUpdateManyMutationInput, CombineTableUncheckedUpdateManyWithoutCombinerInput>
  }

  export type CombineTableScalarWhereInput = {
    AND?: CombineTableScalarWhereInput | CombineTableScalarWhereInput[]
    OR?: CombineTableScalarWhereInput[]
    NOT?: CombineTableScalarWhereInput | CombineTableScalarWhereInput[]
    id?: IntFilter<"CombineTable"> | number
    name?: StringFilter<"CombineTable"> | string
    userDocumentCombiner?: StringFilter<"CombineTable"> | string
    combinerAt?: DateTimeFilter<"CombineTable"> | Date | string
    isActive?: BoolFilter<"CombineTable"> | boolean
    userDocumentReleaser?: StringNullableFilter<"CombineTable"> | string | null
    releasedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    updatedBy?: StringNullableFilter<"CombineTable"> | string | null
    deletedAt?: DateTimeNullableFilter<"CombineTable"> | Date | string | null
    deletedBy?: StringNullableFilter<"CombineTable"> | string | null
  }

  export type CombineTableUpsertWithWhereUniqueWithoutReleaserInput = {
    where: CombineTableWhereUniqueInput
    update: XOR<CombineTableUpdateWithoutReleaserInput, CombineTableUncheckedUpdateWithoutReleaserInput>
    create: XOR<CombineTableCreateWithoutReleaserInput, CombineTableUncheckedCreateWithoutReleaserInput>
  }

  export type CombineTableUpdateWithWhereUniqueWithoutReleaserInput = {
    where: CombineTableWhereUniqueInput
    data: XOR<CombineTableUpdateWithoutReleaserInput, CombineTableUncheckedUpdateWithoutReleaserInput>
  }

  export type CombineTableUpdateManyWithWhereWithoutReleaserInput = {
    where: CombineTableScalarWhereInput
    data: XOR<CombineTableUpdateManyMutationInput, CombineTableUncheckedUpdateManyWithoutReleaserInput>
  }

  export type userProfileUpsertWithoutUserInput = {
    update: XOR<userProfileUpdateWithoutUserInput, userProfileUncheckedUpdateWithoutUserInput>
    create: XOR<userProfileCreateWithoutUserInput, userProfileUncheckedCreateWithoutUserInput>
    where?: userProfileWhereInput
  }

  export type userProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: userProfileWhereInput
    data: XOR<userProfileUpdateWithoutUserInput, userProfileUncheckedUpdateWithoutUserInput>
  }

  export type userProfileUpdateWithoutUserInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: ThemeUpdateOneWithoutUsersUsingThisThemeNestedInput
  }

  export type userProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    themeName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandUpsertWithWhereUniqueWithoutOpenerInput = {
    where: CommandWhereUniqueInput
    update: XOR<CommandUpdateWithoutOpenerInput, CommandUncheckedUpdateWithoutOpenerInput>
    create: XOR<CommandCreateWithoutOpenerInput, CommandUncheckedCreateWithoutOpenerInput>
  }

  export type CommandUpdateWithWhereUniqueWithoutOpenerInput = {
    where: CommandWhereUniqueInput
    data: XOR<CommandUpdateWithoutOpenerInput, CommandUncheckedUpdateWithoutOpenerInput>
  }

  export type CommandUpdateManyWithWhereWithoutOpenerInput = {
    where: CommandScalarWhereInput
    data: XOR<CommandUpdateManyMutationInput, CommandUncheckedUpdateManyWithoutOpenerInput>
  }

  export type CommandUpsertWithWhereUniqueWithoutCloserInput = {
    where: CommandWhereUniqueInput
    update: XOR<CommandUpdateWithoutCloserInput, CommandUncheckedUpdateWithoutCloserInput>
    create: XOR<CommandCreateWithoutCloserInput, CommandUncheckedCreateWithoutCloserInput>
  }

  export type CommandUpdateWithWhereUniqueWithoutCloserInput = {
    where: CommandWhereUniqueInput
    data: XOR<CommandUpdateWithoutCloserInput, CommandUncheckedUpdateWithoutCloserInput>
  }

  export type CommandUpdateManyWithWhereWithoutCloserInput = {
    where: CommandScalarWhereInput
    data: XOR<CommandUpdateManyMutationInput, CommandUncheckedUpdateManyWithoutCloserInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutCreatorInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCreatorInput, OrderUncheckedUpdateWithoutCreatorInput>
    create: XOR<OrderCreateWithoutCreatorInput, OrderUncheckedCreateWithoutCreatorInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCreatorInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCreatorInput, OrderUncheckedUpdateWithoutCreatorInput>
  }

  export type OrderUpdateManyWithWhereWithoutCreatorInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCreatorInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    code?: StringFilter<"Order"> | string
    commandId?: IntFilter<"Order"> | number
    userDocumentCreator?: StringFilter<"Order"> | string
    createdAt?: DateTimeFilter<"Order"> | Date | string
    customerDocument?: StringFilter<"Order"> | string
    subtotal?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFilter<"Order"> | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFilter<"Order"> | string
    userDocumentCloser?: StringNullableFilter<"Order"> | string | null
    closedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    updatedBy?: StringNullableFilter<"Order"> | string | null
    deletedAt?: DateTimeNullableFilter<"Order"> | Date | string | null
    deletedBy?: StringNullableFilter<"Order"> | string | null
  }

  export type OrderUpsertWithWhereUniqueWithoutCloserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCloserInput, OrderUncheckedUpdateWithoutCloserInput>
    create: XOR<OrderCreateWithoutCloserInput, OrderUncheckedCreateWithoutCloserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCloserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCloserInput, OrderUncheckedUpdateWithoutCloserInput>
  }

  export type OrderUpdateManyWithWhereWithoutCloserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCloserInput>
  }

  export type CashBoxUpsertWithWhereUniqueWithoutOpenedInput = {
    where: CashBoxWhereUniqueInput
    update: XOR<CashBoxUpdateWithoutOpenedInput, CashBoxUncheckedUpdateWithoutOpenedInput>
    create: XOR<CashBoxCreateWithoutOpenedInput, CashBoxUncheckedCreateWithoutOpenedInput>
  }

  export type CashBoxUpdateWithWhereUniqueWithoutOpenedInput = {
    where: CashBoxWhereUniqueInput
    data: XOR<CashBoxUpdateWithoutOpenedInput, CashBoxUncheckedUpdateWithoutOpenedInput>
  }

  export type CashBoxUpdateManyWithWhereWithoutOpenedInput = {
    where: CashBoxScalarWhereInput
    data: XOR<CashBoxUpdateManyMutationInput, CashBoxUncheckedUpdateManyWithoutOpenedInput>
  }

  export type CashBoxScalarWhereInput = {
    AND?: CashBoxScalarWhereInput | CashBoxScalarWhereInput[]
    OR?: CashBoxScalarWhereInput[]
    NOT?: CashBoxScalarWhereInput | CashBoxScalarWhereInput[]
    id?: IntFilter<"CashBox"> | number
    userDocumentOpened?: StringFilter<"CashBox"> | string
    openedAt?: DateTimeFilter<"CashBox"> | Date | string
    initialAmount?: DecimalFilter<"CashBox"> | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: StringNullableFilter<"CashBox"> | string | null
    closedAt?: DateTimeNullableFilter<"CashBox"> | Date | string | null
    finalAmount?: DecimalNullableFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    totalSales?: DecimalNullableFilter<"CashBox"> | Decimal | DecimalJsLike | number | string | null
    notes?: StringNullableFilter<"CashBox"> | string | null
    updatedAt?: DateTimeNullableFilter<"CashBox"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBox"> | string | null
  }

  export type CashBoxUpsertWithWhereUniqueWithoutClosedInput = {
    where: CashBoxWhereUniqueInput
    update: XOR<CashBoxUpdateWithoutClosedInput, CashBoxUncheckedUpdateWithoutClosedInput>
    create: XOR<CashBoxCreateWithoutClosedInput, CashBoxUncheckedCreateWithoutClosedInput>
  }

  export type CashBoxUpdateWithWhereUniqueWithoutClosedInput = {
    where: CashBoxWhereUniqueInput
    data: XOR<CashBoxUpdateWithoutClosedInput, CashBoxUncheckedUpdateWithoutClosedInput>
  }

  export type CashBoxUpdateManyWithWhereWithoutClosedInput = {
    where: CashBoxScalarWhereInput
    data: XOR<CashBoxUpdateManyMutationInput, CashBoxUncheckedUpdateManyWithoutClosedInput>
  }

  export type CashBoxMovementUpsertWithWhereUniqueWithoutUserInput = {
    where: CashBoxMovementWhereUniqueInput
    update: XOR<CashBoxMovementUpdateWithoutUserInput, CashBoxMovementUncheckedUpdateWithoutUserInput>
    create: XOR<CashBoxMovementCreateWithoutUserInput, CashBoxMovementUncheckedCreateWithoutUserInput>
  }

  export type CashBoxMovementUpdateWithWhereUniqueWithoutUserInput = {
    where: CashBoxMovementWhereUniqueInput
    data: XOR<CashBoxMovementUpdateWithoutUserInput, CashBoxMovementUncheckedUpdateWithoutUserInput>
  }

  export type CashBoxMovementUpdateManyWithWhereWithoutUserInput = {
    where: CashBoxMovementScalarWhereInput
    data: XOR<CashBoxMovementUpdateManyMutationInput, CashBoxMovementUncheckedUpdateManyWithoutUserInput>
  }

  export type CashBoxMovementScalarWhereInput = {
    AND?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
    OR?: CashBoxMovementScalarWhereInput[]
    NOT?: CashBoxMovementScalarWhereInput | CashBoxMovementScalarWhereInput[]
    id?: IntFilter<"CashBoxMovement"> | number
    cashboxId?: IntFilter<"CashBoxMovement"> | number
    userDocument?: StringFilter<"CashBoxMovement"> | string
    cashboxMovementTypeCode?: StringFilter<"CashBoxMovement"> | string
    amount?: DecimalFilter<"CashBoxMovement"> | Decimal | DecimalJsLike | number | string
    concept?: StringNullableFilter<"CashBoxMovement"> | string | null
    createdAt?: DateTimeFilter<"CashBoxMovement"> | Date | string
    createdBy?: StringFilter<"CashBoxMovement"> | string
    updatedAt?: DateTimeNullableFilter<"CashBoxMovement"> | Date | string | null
    updatedBy?: StringNullableFilter<"CashBoxMovement"> | string | null
  }

  export type PaymentUpsertWithWhereUniqueWithoutReceiveInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutReceiveInput, PaymentUncheckedUpdateWithoutReceiveInput>
    create: XOR<PaymentCreateWithoutReceiveInput, PaymentUncheckedCreateWithoutReceiveInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutReceiveInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutReceiveInput, PaymentUncheckedUpdateWithoutReceiveInput>
  }

  export type PaymentUpdateManyWithWhereWithoutReceiveInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutReceiveInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    orderCode?: StringFilter<"Payment"> | string
    cashBoxId?: IntFilter<"Payment"> | number
    paymentMethodName?: StringFilter<"Payment"> | string
    totalAmount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    receivedAmount?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    changeAmount?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: StringNullableFilter<"Payment"> | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    userDocumentReceive?: StringFilter<"Payment"> | string
    customerDocumentPaid?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    createdBy?: StringFilter<"Payment"> | string
    updatedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    updatedBy?: StringNullableFilter<"Payment"> | string | null
  }

  export type InventoryMovementUpsertWithWhereUniqueWithoutUserInput = {
    where: InventoryMovementWhereUniqueInput
    update: XOR<InventoryMovementUpdateWithoutUserInput, InventoryMovementUncheckedUpdateWithoutUserInput>
    create: XOR<InventoryMovementCreateWithoutUserInput, InventoryMovementUncheckedCreateWithoutUserInput>
  }

  export type InventoryMovementUpdateWithWhereUniqueWithoutUserInput = {
    where: InventoryMovementWhereUniqueInput
    data: XOR<InventoryMovementUpdateWithoutUserInput, InventoryMovementUncheckedUpdateWithoutUserInput>
  }

  export type InventoryMovementUpdateManyWithWhereWithoutUserInput = {
    where: InventoryMovementScalarWhereInput
    data: XOR<InventoryMovementUpdateManyMutationInput, InventoryMovementUncheckedUpdateManyWithoutUserInput>
  }

  export type InventoryMovementScalarWhereInput = {
    AND?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
    OR?: InventoryMovementScalarWhereInput[]
    NOT?: InventoryMovementScalarWhereInput | InventoryMovementScalarWhereInput[]
    id?: IntFilter<"InventoryMovement"> | number
    inventoryId?: IntFilter<"InventoryMovement"> | number
    inventoryMovementTypeCode?: StringFilter<"InventoryMovement"> | string
    quantityMovement?: IntFilter<"InventoryMovement"> | number
    reasonDescription?: StringFilter<"InventoryMovement"> | string
    userDocument?: StringFilter<"InventoryMovement"> | string
    createdAt?: DateTimeFilter<"InventoryMovement"> | Date | string
    createdBy?: StringFilter<"InventoryMovement"> | string
    updatedAt?: DateTimeNullableFilter<"InventoryMovement"> | Date | string | null
    updatedBy?: StringNullableFilter<"InventoryMovement"> | string | null
    deletedAt?: DateTimeNullableFilter<"InventoryMovement"> | Date | string | null
    deletedBy?: StringNullableFilter<"InventoryMovement"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userDocument?: StringNullableFilter<"Session"> | string | null
    customerDocument?: StringNullableFilter<"Session"> | string | null
    token?: StringFilter<"Session"> | string
    deviceInfo?: StringNullableFilter<"Session"> | string | null
    ipAddress?: StringNullableFilter<"Session"> | string | null
    isActive?: BoolFilter<"Session"> | boolean
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    closedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    closedBy?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    createdBy?: StringFilter<"Session"> | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    updatedBy?: StringNullableFilter<"Session"> | string | null
    deletedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    deletedBy?: StringNullableFilter<"Session"> | string | null
  }

  export type LogUpsertWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogUpdateWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithWhereWithoutUserInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutUserInput>
  }

  export type LogScalarWhereInput = {
    AND?: LogScalarWhereInput | LogScalarWhereInput[]
    OR?: LogScalarWhereInput[]
    NOT?: LogScalarWhereInput | LogScalarWhereInput[]
    id?: IntFilter<"Log"> | number
    entityName?: StringFilter<"Log"> | string
    entityId?: StringNullableFilter<"Log"> | string | null
    action?: StringFilter<"Log"> | string
    message?: StringNullableFilter<"Log"> | string | null
    userDocument?: StringNullableFilter<"Log"> | string | null
    customerDocument?: StringNullableFilter<"Log"> | string | null
    deviceInfo?: StringNullableFilter<"Log"> | string | null
    ipAddress?: StringNullableFilter<"Log"> | string | null
    createdAt?: DateTimeFilter<"Log"> | Date | string
  }

  export type UserCreateWithoutUserProfileInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserProfileInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
  }

  export type ThemeCreateWithoutUsersUsingThisThemeInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user?: UserCreateNestedOneWithoutCreatedThemesInput
    customersUsingThisTheme?: CustomerProfileCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutUsersUsingThisThemeInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    userDocumentCreator?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    customersUsingThisTheme?: CustomerProfileUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutUsersUsingThisThemeInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutUsersUsingThisThemeInput, ThemeUncheckedCreateWithoutUsersUsingThisThemeInput>
  }

  export type UserUpsertWithoutUserProfileInput = {
    update: XOR<UserUpdateWithoutUserProfileInput, UserUncheckedUpdateWithoutUserProfileInput>
    create: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProfileInput, UserUncheckedUpdateWithoutUserProfileInput>
  }

  export type UserUpdateWithoutUserProfileInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProfileInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ThemeUpsertWithoutUsersUsingThisThemeInput = {
    update: XOR<ThemeUpdateWithoutUsersUsingThisThemeInput, ThemeUncheckedUpdateWithoutUsersUsingThisThemeInput>
    create: XOR<ThemeCreateWithoutUsersUsingThisThemeInput, ThemeUncheckedCreateWithoutUsersUsingThisThemeInput>
    where?: ThemeWhereInput
  }

  export type ThemeUpdateToOneWithWhereWithoutUsersUsingThisThemeInput = {
    where?: ThemeWhereInput
    data: XOR<ThemeUpdateWithoutUsersUsingThisThemeInput, ThemeUncheckedUpdateWithoutUsersUsingThisThemeInput>
  }

  export type ThemeUpdateWithoutUsersUsingThisThemeInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutCreatedThemesNestedInput
    customersUsingThisTheme?: CustomerProfileUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutUsersUsingThisThemeInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userDocumentCreator?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customersUsingThisTheme?: CustomerProfileUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type DocumentTypeCreateWithoutCustomersInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    users?: UserCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeUncheckedCreateWithoutCustomersInput = {
    name: string
    description?: string | null
    digitLength: number
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDocumentTypeInput
  }

  export type DocumentTypeCreateOrConnectWithoutCustomersInput = {
    where: DocumentTypeWhereUniqueInput
    create: XOR<DocumentTypeCreateWithoutCustomersInput, DocumentTypeUncheckedCreateWithoutCustomersInput>
  }

  export type AccountStatusCreateWithoutCustomersInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    users?: UserCreateNestedManyWithoutAccountStatusInput
  }

  export type AccountStatusUncheckedCreateWithoutCustomersInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    users?: UserUncheckedCreateNestedManyWithoutAccountStatusInput
  }

  export type AccountStatusCreateOrConnectWithoutCustomersInput = {
    where: AccountStatusWhereUniqueInput
    create: XOR<AccountStatusCreateWithoutCustomersInput, AccountStatusUncheckedCreateWithoutCustomersInput>
  }

  export type CustomerProfileCreateWithoutCustomerInput = {
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    theme?: ThemeCreateNestedOneWithoutCustomersUsingThisThemeInput
  }

  export type CustomerProfileUncheckedCreateWithoutCustomerInput = {
    id?: number
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    themeName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerProfileCreateOrConnectWithoutCustomerInput = {
    where: CustomerProfileWhereUniqueInput
    create: XOR<CustomerProfileCreateWithoutCustomerInput, CustomerProfileUncheckedCreateWithoutCustomerInput>
  }

  export type OrderCreateWithoutCustomerInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCustomerInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderCreateManyCustomerInputEnvelope = {
    data: OrderCreateManyCustomerInput | OrderCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutPaidInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    order: OrderCreateNestedOneWithoutPaymentInput
    cashBox: CashBoxCreateNestedOneWithoutPaymentsInput
    paymentMethod: PaymentMethodCreateNestedOneWithoutPaymentsInput
    receive: UserCreateNestedOneWithoutPaymentsReceivedInput
  }

  export type PaymentUncheckedCreateWithoutPaidInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateOrConnectWithoutPaidInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPaidInput, PaymentUncheckedCreateWithoutPaidInput>
  }

  export type PaymentCreateManyPaidInputEnvelope = {
    data: PaymentCreateManyPaidInput | PaymentCreateManyPaidInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutCustomerInput = {
    id?: string
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user?: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateWithoutCustomerInput = {
    id?: string
    userDocument?: string | null
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type SessionCreateOrConnectWithoutCustomerInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutCustomerInput, SessionUncheckedCreateWithoutCustomerInput>
  }

  export type SessionCreateManyCustomerInputEnvelope = {
    data: SessionCreateManyCustomerInput | SessionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type LogCreateWithoutCustomerInput = {
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutLogsInput
  }

  export type LogUncheckedCreateWithoutCustomerInput = {
    id?: number
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    userDocument?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type LogCreateOrConnectWithoutCustomerInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutCustomerInput, LogUncheckedCreateWithoutCustomerInput>
  }

  export type LogCreateManyCustomerInputEnvelope = {
    data: LogCreateManyCustomerInput | LogCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type DocumentTypeUpsertWithoutCustomersInput = {
    update: XOR<DocumentTypeUpdateWithoutCustomersInput, DocumentTypeUncheckedUpdateWithoutCustomersInput>
    create: XOR<DocumentTypeCreateWithoutCustomersInput, DocumentTypeUncheckedCreateWithoutCustomersInput>
    where?: DocumentTypeWhereInput
  }

  export type DocumentTypeUpdateToOneWithWhereWithoutCustomersInput = {
    where?: DocumentTypeWhereInput
    data: XOR<DocumentTypeUpdateWithoutCustomersInput, DocumentTypeUncheckedUpdateWithoutCustomersInput>
  }

  export type DocumentTypeUpdateWithoutCustomersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutDocumentTypeNestedInput
  }

  export type DocumentTypeUncheckedUpdateWithoutCustomersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    digitLength?: IntFieldUpdateOperationsInput | number
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDocumentTypeNestedInput
  }

  export type AccountStatusUpsertWithoutCustomersInput = {
    update: XOR<AccountStatusUpdateWithoutCustomersInput, AccountStatusUncheckedUpdateWithoutCustomersInput>
    create: XOR<AccountStatusCreateWithoutCustomersInput, AccountStatusUncheckedCreateWithoutCustomersInput>
    where?: AccountStatusWhereInput
  }

  export type AccountStatusUpdateToOneWithWhereWithoutCustomersInput = {
    where?: AccountStatusWhereInput
    data: XOR<AccountStatusUpdateWithoutCustomersInput, AccountStatusUncheckedUpdateWithoutCustomersInput>
  }

  export type AccountStatusUpdateWithoutCustomersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutAccountStatusNestedInput
  }

  export type AccountStatusUncheckedUpdateWithoutCustomersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutAccountStatusNestedInput
  }

  export type CustomerProfileUpsertWithoutCustomerInput = {
    update: XOR<CustomerProfileUpdateWithoutCustomerInput, CustomerProfileUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerProfileCreateWithoutCustomerInput, CustomerProfileUncheckedCreateWithoutCustomerInput>
    where?: CustomerProfileWhereInput
  }

  export type CustomerProfileUpdateToOneWithWhereWithoutCustomerInput = {
    where?: CustomerProfileWhereInput
    data: XOR<CustomerProfileUpdateWithoutCustomerInput, CustomerProfileUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerProfileUpdateWithoutCustomerInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: ThemeUpdateOneWithoutCustomersUsingThisThemeNestedInput
  }

  export type CustomerProfileUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUpsertWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
    create: XOR<OrderCreateWithoutCustomerInput, OrderUncheckedCreateWithoutCustomerInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCustomerInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCustomerInput, OrderUncheckedUpdateWithoutCustomerInput>
  }

  export type OrderUpdateManyWithWhereWithoutCustomerInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCustomerInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutPaidInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPaidInput, PaymentUncheckedUpdateWithoutPaidInput>
    create: XOR<PaymentCreateWithoutPaidInput, PaymentUncheckedCreateWithoutPaidInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPaidInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPaidInput, PaymentUncheckedUpdateWithoutPaidInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPaidInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPaidInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutCustomerInput, SessionUncheckedUpdateWithoutCustomerInput>
    create: XOR<SessionCreateWithoutCustomerInput, SessionUncheckedCreateWithoutCustomerInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutCustomerInput, SessionUncheckedUpdateWithoutCustomerInput>
  }

  export type SessionUpdateManyWithWhereWithoutCustomerInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type LogUpsertWithWhereUniqueWithoutCustomerInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutCustomerInput, LogUncheckedUpdateWithoutCustomerInput>
    create: XOR<LogCreateWithoutCustomerInput, LogUncheckedCreateWithoutCustomerInput>
  }

  export type LogUpdateWithWhereUniqueWithoutCustomerInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutCustomerInput, LogUncheckedUpdateWithoutCustomerInput>
  }

  export type LogUpdateManyWithWhereWithoutCustomerInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerCreateWithoutProfileInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutProfileInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutProfileInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
  }

  export type ThemeCreateWithoutCustomersUsingThisThemeInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    user?: UserCreateNestedOneWithoutCreatedThemesInput
    usersUsingThisTheme?: userProfileCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutCustomersUsingThisThemeInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    userDocumentCreator?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    usersUsingThisTheme?: userProfileUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutCustomersUsingThisThemeInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutCustomersUsingThisThemeInput, ThemeUncheckedCreateWithoutCustomersUsingThisThemeInput>
  }

  export type CustomerUpsertWithoutProfileInput = {
    update: XOR<CustomerUpdateWithoutProfileInput, CustomerUncheckedUpdateWithoutProfileInput>
    create: XOR<CustomerCreateWithoutProfileInput, CustomerUncheckedCreateWithoutProfileInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutProfileInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutProfileInput, CustomerUncheckedUpdateWithoutProfileInput>
  }

  export type CustomerUpdateWithoutProfileInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutProfileInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type ThemeUpsertWithoutCustomersUsingThisThemeInput = {
    update: XOR<ThemeUpdateWithoutCustomersUsingThisThemeInput, ThemeUncheckedUpdateWithoutCustomersUsingThisThemeInput>
    create: XOR<ThemeCreateWithoutCustomersUsingThisThemeInput, ThemeUncheckedCreateWithoutCustomersUsingThisThemeInput>
    where?: ThemeWhereInput
  }

  export type ThemeUpdateToOneWithWhereWithoutCustomersUsingThisThemeInput = {
    where?: ThemeWhereInput
    data: XOR<ThemeUpdateWithoutCustomersUsingThisThemeInput, ThemeUncheckedUpdateWithoutCustomersUsingThisThemeInput>
  }

  export type ThemeUpdateWithoutCustomersUsingThisThemeInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutCreatedThemesNestedInput
    usersUsingThisTheme?: userProfileUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutCustomersUsingThisThemeInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    userDocumentCreator?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    usersUsingThisTheme?: userProfileUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type CommandCreateWithoutCommandStatusInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orders?: OrderCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutCommandStatusInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutCommandStatusInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutCommandStatusInput, CommandUncheckedCreateWithoutCommandStatusInput>
  }

  export type CommandCreateManyCommandStatusInputEnvelope = {
    data: CommandCreateManyCommandStatusInput | CommandCreateManyCommandStatusInput[]
    skipDuplicates?: boolean
  }

  export type CommandUpsertWithWhereUniqueWithoutCommandStatusInput = {
    where: CommandWhereUniqueInput
    update: XOR<CommandUpdateWithoutCommandStatusInput, CommandUncheckedUpdateWithoutCommandStatusInput>
    create: XOR<CommandCreateWithoutCommandStatusInput, CommandUncheckedCreateWithoutCommandStatusInput>
  }

  export type CommandUpdateWithWhereUniqueWithoutCommandStatusInput = {
    where: CommandWhereUniqueInput
    data: XOR<CommandUpdateWithoutCommandStatusInput, CommandUncheckedUpdateWithoutCommandStatusInput>
  }

  export type CommandUpdateManyWithWhereWithoutCommandStatusInput = {
    where: CommandScalarWhereInput
    data: XOR<CommandUpdateManyMutationInput, CommandUncheckedUpdateManyWithoutCommandStatusInput>
  }

  export type TableCreateWithoutCommandsInput = {
    name: string
    capacity?: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    restaurantZone?: RestaurantZoneCreateNestedOneWithoutTablesInput
    tableStatus?: TableStatusCreateNestedOneWithoutTablesInput
    combineTableItems?: CombineTableItemCreateNestedManyWithoutTableInput
  }

  export type TableUncheckedCreateWithoutCommandsInput = {
    id?: number
    name: string
    capacity?: number
    restaurantZoneName?: string | null
    tableStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combineTableItems?: CombineTableItemUncheckedCreateNestedManyWithoutTableInput
  }

  export type TableCreateOrConnectWithoutCommandsInput = {
    where: TableWhereUniqueInput
    create: XOR<TableCreateWithoutCommandsInput, TableUncheckedCreateWithoutCommandsInput>
  }

  export type CombineTableCreateWithoutCommandsInput = {
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    combiner: UserCreateNestedOneWithoutCombinedTablesInput
    releaser?: UserCreateNestedOneWithoutReleasedTablesInput
    tables?: CombineTableItemCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableUncheckedCreateWithoutCommandsInput = {
    id?: number
    name: string
    userDocumentCombiner: string
    combinerAt?: Date | string
    isActive?: boolean
    userDocumentReleaser?: string | null
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    tables?: CombineTableItemUncheckedCreateNestedManyWithoutCombineTableInput
  }

  export type CombineTableCreateOrConnectWithoutCommandsInput = {
    where: CombineTableWhereUniqueInput
    create: XOR<CombineTableCreateWithoutCommandsInput, CombineTableUncheckedCreateWithoutCommandsInput>
  }

  export type UserCreateWithoutCommandOpenerInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommandOpenerInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommandOpenerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommandOpenerInput, UserUncheckedCreateWithoutCommandOpenerInput>
  }

  export type CommandStatusCreateWithoutCommandsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CommandStatusUncheckedCreateWithoutCommandsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CommandStatusCreateOrConnectWithoutCommandsInput = {
    where: CommandStatusWhereUniqueInput
    create: XOR<CommandStatusCreateWithoutCommandsInput, CommandStatusUncheckedCreateWithoutCommandsInput>
  }

  export type UserCreateWithoutCommandCloserInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommandCloserInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommandCloserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommandCloserInput, UserUncheckedCreateWithoutCommandCloserInput>
  }

  export type OrderCreateWithoutCommandInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutCommandInput = {
    code: string
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutCommandInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutCommandInput, OrderUncheckedCreateWithoutCommandInput>
  }

  export type OrderCreateManyCommandInputEnvelope = {
    data: OrderCreateManyCommandInput | OrderCreateManyCommandInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemCreateWithoutCommandInput = {
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    order?: OrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
    orderItemStatus?: OrderItemStatusCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutCommandInput = {
    id?: number
    orderCode?: string | null
    productId: number
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemCreateOrConnectWithoutCommandInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutCommandInput, OrderItemUncheckedCreateWithoutCommandInput>
  }

  export type OrderItemCreateManyCommandInputEnvelope = {
    data: OrderItemCreateManyCommandInput | OrderItemCreateManyCommandInput[]
    skipDuplicates?: boolean
  }

  export type TableUpsertWithoutCommandsInput = {
    update: XOR<TableUpdateWithoutCommandsInput, TableUncheckedUpdateWithoutCommandsInput>
    create: XOR<TableCreateWithoutCommandsInput, TableUncheckedCreateWithoutCommandsInput>
    where?: TableWhereInput
  }

  export type TableUpdateToOneWithWhereWithoutCommandsInput = {
    where?: TableWhereInput
    data: XOR<TableUpdateWithoutCommandsInput, TableUncheckedUpdateWithoutCommandsInput>
  }

  export type TableUpdateWithoutCommandsInput = {
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    restaurantZone?: RestaurantZoneUpdateOneWithoutTablesNestedInput
    tableStatus?: TableStatusUpdateOneRequiredWithoutTablesNestedInput
    combineTableItems?: CombineTableItemUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutCommandsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantZoneName?: NullableStringFieldUpdateOperationsInput | string | null
    tableStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTableItems?: CombineTableItemUncheckedUpdateManyWithoutTableNestedInput
  }

  export type CombineTableUpsertWithoutCommandsInput = {
    update: XOR<CombineTableUpdateWithoutCommandsInput, CombineTableUncheckedUpdateWithoutCommandsInput>
    create: XOR<CombineTableCreateWithoutCommandsInput, CombineTableUncheckedCreateWithoutCommandsInput>
    where?: CombineTableWhereInput
  }

  export type CombineTableUpdateToOneWithWhereWithoutCommandsInput = {
    where?: CombineTableWhereInput
    data: XOR<CombineTableUpdateWithoutCommandsInput, CombineTableUncheckedUpdateWithoutCommandsInput>
  }

  export type CombineTableUpdateWithoutCommandsInput = {
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combiner?: UserUpdateOneRequiredWithoutCombinedTablesNestedInput
    releaser?: UserUpdateOneWithoutReleasedTablesNestedInput
    tables?: CombineTableItemUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateWithoutCommandsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userDocumentCombiner?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userDocumentReleaser?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: CombineTableItemUncheckedUpdateManyWithoutCombineTableNestedInput
  }

  export type UserUpsertWithoutCommandOpenerInput = {
    update: XOR<UserUpdateWithoutCommandOpenerInput, UserUncheckedUpdateWithoutCommandOpenerInput>
    create: XOR<UserCreateWithoutCommandOpenerInput, UserUncheckedCreateWithoutCommandOpenerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommandOpenerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommandOpenerInput, UserUncheckedUpdateWithoutCommandOpenerInput>
  }

  export type UserUpdateWithoutCommandOpenerInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommandOpenerInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommandStatusUpsertWithoutCommandsInput = {
    update: XOR<CommandStatusUpdateWithoutCommandsInput, CommandStatusUncheckedUpdateWithoutCommandsInput>
    create: XOR<CommandStatusCreateWithoutCommandsInput, CommandStatusUncheckedCreateWithoutCommandsInput>
    where?: CommandStatusWhereInput
  }

  export type CommandStatusUpdateToOneWithWhereWithoutCommandsInput = {
    where?: CommandStatusWhereInput
    data: XOR<CommandStatusUpdateWithoutCommandsInput, CommandStatusUncheckedUpdateWithoutCommandsInput>
  }

  export type CommandStatusUpdateWithoutCommandsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandStatusUncheckedUpdateWithoutCommandsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutCommandCloserInput = {
    update: XOR<UserUpdateWithoutCommandCloserInput, UserUncheckedUpdateWithoutCommandCloserInput>
    create: XOR<UserCreateWithoutCommandCloserInput, UserUncheckedCreateWithoutCommandCloserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommandCloserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommandCloserInput, UserUncheckedUpdateWithoutCommandCloserInput>
  }

  export type UserUpdateWithoutCommandCloserInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommandCloserInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutCommandInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutCommandInput, OrderUncheckedUpdateWithoutCommandInput>
    create: XOR<OrderCreateWithoutCommandInput, OrderUncheckedCreateWithoutCommandInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutCommandInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutCommandInput, OrderUncheckedUpdateWithoutCommandInput>
  }

  export type OrderUpdateManyWithWhereWithoutCommandInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutCommandInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutCommandInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutCommandInput, OrderItemUncheckedUpdateWithoutCommandInput>
    create: XOR<OrderItemCreateWithoutCommandInput, OrderItemUncheckedCreateWithoutCommandInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutCommandInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutCommandInput, OrderItemUncheckedUpdateWithoutCommandInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutCommandInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutCommandInput>
  }

  export type OrderCreateWithoutOrderStatusInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderStatusInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderStatusInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderStatusInput, OrderUncheckedCreateWithoutOrderStatusInput>
  }

  export type OrderCreateManyOrderStatusInputEnvelope = {
    data: OrderCreateManyOrderStatusInput | OrderCreateManyOrderStatusInput[]
    skipDuplicates?: boolean
  }

  export type OrderUpsertWithWhereUniqueWithoutOrderStatusInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutOrderStatusInput, OrderUncheckedUpdateWithoutOrderStatusInput>
    create: XOR<OrderCreateWithoutOrderStatusInput, OrderUncheckedCreateWithoutOrderStatusInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutOrderStatusInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutOrderStatusInput, OrderUncheckedUpdateWithoutOrderStatusInput>
  }

  export type OrderUpdateManyWithWhereWithoutOrderStatusInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOrderStatusInput>
  }

  export type OrderItemCreateWithoutOrderItemStatusInput = {
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrderItemsInput
    order?: OrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderItemStatusInput = {
    id?: number
    commandId: number
    orderCode?: string | null
    productId: number
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemCreateOrConnectWithoutOrderItemStatusInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderItemStatusInput, OrderItemUncheckedCreateWithoutOrderItemStatusInput>
  }

  export type OrderItemCreateManyOrderItemStatusInputEnvelope = {
    data: OrderItemCreateManyOrderItemStatusInput | OrderItemCreateManyOrderItemStatusInput[]
    skipDuplicates?: boolean
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderItemStatusInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderItemStatusInput, OrderItemUncheckedUpdateWithoutOrderItemStatusInput>
    create: XOR<OrderItemCreateWithoutOrderItemStatusInput, OrderItemUncheckedCreateWithoutOrderItemStatusInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderItemStatusInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderItemStatusInput, OrderItemUncheckedUpdateWithoutOrderItemStatusInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderItemStatusInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderItemStatusInput>
  }

  export type CommandCreateWithoutOrdersInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutOrdersInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutOrdersInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutOrdersInput, CommandUncheckedCreateWithoutOrdersInput>
  }

  export type UserCreateWithoutOrderCreatorInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrderCreatorInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrderCreatorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrderCreatorInput, UserUncheckedCreateWithoutOrderCreatorInput>
  }

  export type CustomerCreateWithoutOrdersInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutOrdersInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutOrdersInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
  }

  export type OrderStatusCreateWithoutOrdersInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type OrderStatusUncheckedCreateWithoutOrdersInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type OrderStatusCreateOrConnectWithoutOrdersInput = {
    where: OrderStatusWhereUniqueInput
    create: XOR<OrderStatusCreateWithoutOrdersInput, OrderStatusUncheckedCreateWithoutOrdersInput>
  }

  export type UserCreateWithoutOrderCloserInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrderCloserInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrderCloserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrderCloserInput, UserUncheckedCreateWithoutOrderCloserInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemsInput
    orderItemStatus?: OrderItemStatusCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    commandId: number
    productId: number
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutOrderInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashBox: CashBoxCreateNestedOneWithoutPaymentsInput
    paymentMethod: PaymentMethodCreateNestedOneWithoutPaymentsInput
    receive: UserCreateNestedOneWithoutPaymentsReceivedInput
    paid?: CustomerCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutOrderInput = {
    id?: number
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateOrConnectWithoutOrderInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
  }

  export type CommandUpsertWithoutOrdersInput = {
    update: XOR<CommandUpdateWithoutOrdersInput, CommandUncheckedUpdateWithoutOrdersInput>
    create: XOR<CommandCreateWithoutOrdersInput, CommandUncheckedCreateWithoutOrdersInput>
    where?: CommandWhereInput
  }

  export type CommandUpdateToOneWithWhereWithoutOrdersInput = {
    where?: CommandWhereInput
    data: XOR<CommandUpdateWithoutOrdersInput, CommandUncheckedUpdateWithoutOrdersInput>
  }

  export type CommandUpdateWithoutOrdersInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type UserUpsertWithoutOrderCreatorInput = {
    update: XOR<UserUpdateWithoutOrderCreatorInput, UserUncheckedUpdateWithoutOrderCreatorInput>
    create: XOR<UserCreateWithoutOrderCreatorInput, UserUncheckedCreateWithoutOrderCreatorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrderCreatorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrderCreatorInput, UserUncheckedUpdateWithoutOrderCreatorInput>
  }

  export type UserUpdateWithoutOrderCreatorInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrderCreatorInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CustomerUpsertWithoutOrdersInput = {
    update: XOR<CustomerUpdateWithoutOrdersInput, CustomerUncheckedUpdateWithoutOrdersInput>
    create: XOR<CustomerCreateWithoutOrdersInput, CustomerUncheckedCreateWithoutOrdersInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutOrdersInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutOrdersInput, CustomerUncheckedUpdateWithoutOrdersInput>
  }

  export type CustomerUpdateWithoutOrdersInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutOrdersInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type OrderStatusUpsertWithoutOrdersInput = {
    update: XOR<OrderStatusUpdateWithoutOrdersInput, OrderStatusUncheckedUpdateWithoutOrdersInput>
    create: XOR<OrderStatusCreateWithoutOrdersInput, OrderStatusUncheckedCreateWithoutOrdersInput>
    where?: OrderStatusWhereInput
  }

  export type OrderStatusUpdateToOneWithWhereWithoutOrdersInput = {
    where?: OrderStatusWhereInput
    data: XOR<OrderStatusUpdateWithoutOrdersInput, OrderStatusUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderStatusUpdateWithoutOrdersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderStatusUncheckedUpdateWithoutOrdersInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutOrderCloserInput = {
    update: XOR<UserUpdateWithoutOrderCloserInput, UserUncheckedUpdateWithoutOrderCloserInput>
    create: XOR<UserCreateWithoutOrderCloserInput, UserUncheckedCreateWithoutOrderCloserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrderCloserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrderCloserInput, UserUncheckedUpdateWithoutOrderCloserInput>
  }

  export type UserUpdateWithoutOrderCloserInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrderCloserInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type PaymentUpsertWithoutOrderInput = {
    update: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
    create: XOR<PaymentCreateWithoutOrderInput, PaymentUncheckedCreateWithoutOrderInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutOrderInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutOrderInput, PaymentUncheckedUpdateWithoutOrderInput>
  }

  export type PaymentUpdateWithoutOrderInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashBox?: CashBoxUpdateOneRequiredWithoutPaymentsNestedInput
    paymentMethod?: PaymentMethodUpdateOneRequiredWithoutPaymentsNestedInput
    receive?: UserUpdateOneRequiredWithoutPaymentsReceivedNestedInput
    paid?: CustomerUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandCreateWithoutOrderItemsInput = {
    openedAt?: Date | string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    table?: TableCreateNestedOneWithoutCommandsInput
    combineTable?: CombineTableCreateNestedOneWithoutCommandsInput
    opener: UserCreateNestedOneWithoutCommandOpenerInput
    commandStatus: CommandStatusCreateNestedOneWithoutCommandsInput
    closer?: UserCreateNestedOneWithoutCommandCloserInput
    orders?: OrderCreateNestedManyWithoutCommandInput
  }

  export type CommandUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutCommandInput
  }

  export type CommandCreateOrConnectWithoutOrderItemsInput = {
    where: CommandWhereUniqueInput
    create: XOR<CommandCreateWithoutOrderItemsInput, CommandUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderCreateWithoutOrderItemsInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    payment?: PaymentCreateNestedOneWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderItemsInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    payment?: PaymentUncheckedCreateNestedOneWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type ProductCreateWithoutOrderItemsInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productType: ProductTypeCreateNestedOneWithoutProductsInput
    productCategory: ProductCategoryCreateNestedOneWithoutProductsInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    productStatus?: ProductStatusCreateNestedOneWithoutProductsInput
    inventory?: InventoryCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory?: InventoryUncheckedCreateNestedOneWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOrderItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
  }

  export type OrderItemStatusCreateWithoutOrderItemsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type OrderItemStatusUncheckedCreateWithoutOrderItemsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type OrderItemStatusCreateOrConnectWithoutOrderItemsInput = {
    where: OrderItemStatusWhereUniqueInput
    create: XOR<OrderItemStatusCreateWithoutOrderItemsInput, OrderItemStatusUncheckedCreateWithoutOrderItemsInput>
  }

  export type CommandUpsertWithoutOrderItemsInput = {
    update: XOR<CommandUpdateWithoutOrderItemsInput, CommandUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<CommandCreateWithoutOrderItemsInput, CommandUncheckedCreateWithoutOrderItemsInput>
    where?: CommandWhereInput
  }

  export type CommandUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: CommandWhereInput
    data: XOR<CommandUpdateWithoutOrderItemsInput, CommandUncheckedUpdateWithoutOrderItemsInput>
  }

  export type CommandUpdateWithoutOrderItemsInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type OrderUpsertWithoutOrderItemsInput = {
    update: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderUpdateWithoutOrderItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrderItemsInput = {
    update: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<ProductCreateWithoutOrderItemsInput, ProductUncheckedCreateWithoutOrderItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderItemsInput, ProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateWithoutOrderItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: ProductTypeUpdateOneRequiredWithoutProductsNestedInput
    productCategory?: ProductCategoryUpdateOneRequiredWithoutProductsNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    productStatus?: ProductStatusUpdateOneRequiredWithoutProductsNestedInput
    inventory?: InventoryUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateOneWithoutProductNestedInput
  }

  export type OrderItemStatusUpsertWithoutOrderItemsInput = {
    update: XOR<OrderItemStatusUpdateWithoutOrderItemsInput, OrderItemStatusUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<OrderItemStatusCreateWithoutOrderItemsInput, OrderItemStatusUncheckedCreateWithoutOrderItemsInput>
    where?: OrderItemStatusWhereInput
  }

  export type OrderItemStatusUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: OrderItemStatusWhereInput
    data: XOR<OrderItemStatusUpdateWithoutOrderItemsInput, OrderItemStatusUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderItemStatusUpdateWithoutOrderItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemStatusUncheckedUpdateWithoutOrderItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutOpenedCashBoxesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOpenedCashBoxesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOpenedCashBoxesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOpenedCashBoxesInput, UserUncheckedCreateWithoutOpenedCashBoxesInput>
  }

  export type UserCreateWithoutClosedCashBoxesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClosedCashBoxesInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClosedCashBoxesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClosedCashBoxesInput, UserUncheckedCreateWithoutClosedCashBoxesInput>
  }

  export type CashBoxMovementCreateWithoutCashboxInput = {
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    user: UserCreateNestedOneWithoutCashBoxMovementsInput
    cashboxMovementType: CashBoxMovementTypeCreateNestedOneWithoutCashBoxMovementInput
  }

  export type CashBoxMovementUncheckedCreateWithoutCashboxInput = {
    id?: number
    userDocument: string
    cashboxMovementTypeCode: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementCreateOrConnectWithoutCashboxInput = {
    where: CashBoxMovementWhereUniqueInput
    create: XOR<CashBoxMovementCreateWithoutCashboxInput, CashBoxMovementUncheckedCreateWithoutCashboxInput>
  }

  export type CashBoxMovementCreateManyCashboxInputEnvelope = {
    data: CashBoxMovementCreateManyCashboxInput | CashBoxMovementCreateManyCashboxInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutCashBoxInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    order: OrderCreateNestedOneWithoutPaymentInput
    paymentMethod: PaymentMethodCreateNestedOneWithoutPaymentsInput
    receive: UserCreateNestedOneWithoutPaymentsReceivedInput
    paid?: CustomerCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutCashBoxInput = {
    id?: number
    orderCode: string
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateOrConnectWithoutCashBoxInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCashBoxInput, PaymentUncheckedCreateWithoutCashBoxInput>
  }

  export type PaymentCreateManyCashBoxInputEnvelope = {
    data: PaymentCreateManyCashBoxInput | PaymentCreateManyCashBoxInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOpenedCashBoxesInput = {
    update: XOR<UserUpdateWithoutOpenedCashBoxesInput, UserUncheckedUpdateWithoutOpenedCashBoxesInput>
    create: XOR<UserCreateWithoutOpenedCashBoxesInput, UserUncheckedCreateWithoutOpenedCashBoxesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOpenedCashBoxesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOpenedCashBoxesInput, UserUncheckedUpdateWithoutOpenedCashBoxesInput>
  }

  export type UserUpdateWithoutOpenedCashBoxesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOpenedCashBoxesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutClosedCashBoxesInput = {
    update: XOR<UserUpdateWithoutClosedCashBoxesInput, UserUncheckedUpdateWithoutClosedCashBoxesInput>
    create: XOR<UserCreateWithoutClosedCashBoxesInput, UserUncheckedCreateWithoutClosedCashBoxesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClosedCashBoxesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClosedCashBoxesInput, UserUncheckedUpdateWithoutClosedCashBoxesInput>
  }

  export type UserUpdateWithoutClosedCashBoxesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClosedCashBoxesInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CashBoxMovementUpsertWithWhereUniqueWithoutCashboxInput = {
    where: CashBoxMovementWhereUniqueInput
    update: XOR<CashBoxMovementUpdateWithoutCashboxInput, CashBoxMovementUncheckedUpdateWithoutCashboxInput>
    create: XOR<CashBoxMovementCreateWithoutCashboxInput, CashBoxMovementUncheckedCreateWithoutCashboxInput>
  }

  export type CashBoxMovementUpdateWithWhereUniqueWithoutCashboxInput = {
    where: CashBoxMovementWhereUniqueInput
    data: XOR<CashBoxMovementUpdateWithoutCashboxInput, CashBoxMovementUncheckedUpdateWithoutCashboxInput>
  }

  export type CashBoxMovementUpdateManyWithWhereWithoutCashboxInput = {
    where: CashBoxMovementScalarWhereInput
    data: XOR<CashBoxMovementUpdateManyMutationInput, CashBoxMovementUncheckedUpdateManyWithoutCashboxInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutCashBoxInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutCashBoxInput, PaymentUncheckedUpdateWithoutCashBoxInput>
    create: XOR<PaymentCreateWithoutCashBoxInput, PaymentUncheckedCreateWithoutCashBoxInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutCashBoxInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutCashBoxInput, PaymentUncheckedUpdateWithoutCashBoxInput>
  }

  export type PaymentUpdateManyWithWhereWithoutCashBoxInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutCashBoxInput>
  }

  export type CashBoxMovementCreateWithoutCashboxMovementTypeInput = {
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashbox: CashBoxCreateNestedOneWithoutCashboxMovementsInput
    user: UserCreateNestedOneWithoutCashBoxMovementsInput
  }

  export type CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput = {
    id?: number
    cashboxId: number
    userDocument: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementCreateOrConnectWithoutCashboxMovementTypeInput = {
    where: CashBoxMovementWhereUniqueInput
    create: XOR<CashBoxMovementCreateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput>
  }

  export type CashBoxMovementCreateManyCashboxMovementTypeInputEnvelope = {
    data: CashBoxMovementCreateManyCashboxMovementTypeInput | CashBoxMovementCreateManyCashboxMovementTypeInput[]
    skipDuplicates?: boolean
  }

  export type CashBoxMovementUpsertWithWhereUniqueWithoutCashboxMovementTypeInput = {
    where: CashBoxMovementWhereUniqueInput
    update: XOR<CashBoxMovementUpdateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedUpdateWithoutCashboxMovementTypeInput>
    create: XOR<CashBoxMovementCreateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedCreateWithoutCashboxMovementTypeInput>
  }

  export type CashBoxMovementUpdateWithWhereUniqueWithoutCashboxMovementTypeInput = {
    where: CashBoxMovementWhereUniqueInput
    data: XOR<CashBoxMovementUpdateWithoutCashboxMovementTypeInput, CashBoxMovementUncheckedUpdateWithoutCashboxMovementTypeInput>
  }

  export type CashBoxMovementUpdateManyWithWhereWithoutCashboxMovementTypeInput = {
    where: CashBoxMovementScalarWhereInput
    data: XOR<CashBoxMovementUpdateManyMutationInput, CashBoxMovementUncheckedUpdateManyWithoutCashboxMovementTypeInput>
  }

  export type CashBoxCreateWithoutCashboxMovementsInput = {
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    opened: UserCreateNestedOneWithoutOpenedCashBoxesInput
    closed?: UserCreateNestedOneWithoutClosedCashBoxesInput
    payments?: PaymentCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxUncheckedCreateWithoutCashboxMovementsInput = {
    id?: number
    userDocumentOpened: string
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    userDocumentClosed?: string | null
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutCashBoxInput
  }

  export type CashBoxCreateOrConnectWithoutCashboxMovementsInput = {
    where: CashBoxWhereUniqueInput
    create: XOR<CashBoxCreateWithoutCashboxMovementsInput, CashBoxUncheckedCreateWithoutCashboxMovementsInput>
  }

  export type UserCreateWithoutCashBoxMovementsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCashBoxMovementsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCashBoxMovementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCashBoxMovementsInput, UserUncheckedCreateWithoutCashBoxMovementsInput>
  }

  export type CashBoxMovementTypeCreateWithoutCashBoxMovementInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementTypeUncheckedCreateWithoutCashBoxMovementInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementTypeCreateOrConnectWithoutCashBoxMovementInput = {
    where: CashBoxMovementTypeWhereUniqueInput
    create: XOR<CashBoxMovementTypeCreateWithoutCashBoxMovementInput, CashBoxMovementTypeUncheckedCreateWithoutCashBoxMovementInput>
  }

  export type CashBoxUpsertWithoutCashboxMovementsInput = {
    update: XOR<CashBoxUpdateWithoutCashboxMovementsInput, CashBoxUncheckedUpdateWithoutCashboxMovementsInput>
    create: XOR<CashBoxCreateWithoutCashboxMovementsInput, CashBoxUncheckedCreateWithoutCashboxMovementsInput>
    where?: CashBoxWhereInput
  }

  export type CashBoxUpdateToOneWithWhereWithoutCashboxMovementsInput = {
    where?: CashBoxWhereInput
    data: XOR<CashBoxUpdateWithoutCashboxMovementsInput, CashBoxUncheckedUpdateWithoutCashboxMovementsInput>
  }

  export type CashBoxUpdateWithoutCashboxMovementsInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    opened?: UserUpdateOneRequiredWithoutOpenedCashBoxesNestedInput
    closed?: UserUpdateOneWithoutClosedCashBoxesNestedInput
    payments?: PaymentUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxUncheckedUpdateWithoutCashboxMovementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocumentOpened?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    payments?: PaymentUncheckedUpdateManyWithoutCashBoxNestedInput
  }

  export type UserUpsertWithoutCashBoxMovementsInput = {
    update: XOR<UserUpdateWithoutCashBoxMovementsInput, UserUncheckedUpdateWithoutCashBoxMovementsInput>
    create: XOR<UserCreateWithoutCashBoxMovementsInput, UserUncheckedCreateWithoutCashBoxMovementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCashBoxMovementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCashBoxMovementsInput, UserUncheckedUpdateWithoutCashBoxMovementsInput>
  }

  export type UserUpdateWithoutCashBoxMovementsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCashBoxMovementsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CashBoxMovementTypeUpsertWithoutCashBoxMovementInput = {
    update: XOR<CashBoxMovementTypeUpdateWithoutCashBoxMovementInput, CashBoxMovementTypeUncheckedUpdateWithoutCashBoxMovementInput>
    create: XOR<CashBoxMovementTypeCreateWithoutCashBoxMovementInput, CashBoxMovementTypeUncheckedCreateWithoutCashBoxMovementInput>
    where?: CashBoxMovementTypeWhereInput
  }

  export type CashBoxMovementTypeUpdateToOneWithWhereWithoutCashBoxMovementInput = {
    where?: CashBoxMovementTypeWhereInput
    data: XOR<CashBoxMovementTypeUpdateWithoutCashBoxMovementInput, CashBoxMovementTypeUncheckedUpdateWithoutCashBoxMovementInput>
  }

  export type CashBoxMovementTypeUpdateWithoutCashBoxMovementInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementTypeUncheckedUpdateWithoutCashBoxMovementInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateWithoutPaymentMethodInput = {
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    order: OrderCreateNestedOneWithoutPaymentInput
    cashBox: CashBoxCreateNestedOneWithoutPaymentsInput
    receive: UserCreateNestedOneWithoutPaymentsReceivedInput
    paid?: CustomerCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPaymentMethodInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateOrConnectWithoutPaymentMethodInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPaymentMethodInput, PaymentUncheckedCreateWithoutPaymentMethodInput>
  }

  export type PaymentCreateManyPaymentMethodInputEnvelope = {
    data: PaymentCreateManyPaymentMethodInput | PaymentCreateManyPaymentMethodInput[]
    skipDuplicates?: boolean
  }

  export type PaymentUpsertWithWhereUniqueWithoutPaymentMethodInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPaymentMethodInput, PaymentUncheckedUpdateWithoutPaymentMethodInput>
    create: XOR<PaymentCreateWithoutPaymentMethodInput, PaymentUncheckedCreateWithoutPaymentMethodInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPaymentMethodInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPaymentMethodInput, PaymentUncheckedUpdateWithoutPaymentMethodInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPaymentMethodInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPaymentMethodInput>
  }

  export type OrderCreateWithoutPaymentInput = {
    code: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    command: CommandCreateNestedOneWithoutOrdersInput
    creator: UserCreateNestedOneWithoutOrderCreatorInput
    customer: CustomerCreateNestedOneWithoutOrdersInput
    orderStatus: OrderStatusCreateNestedOneWithoutOrdersInput
    closer?: UserCreateNestedOneWithoutOrderCloserInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutPaymentInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutPaymentInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
  }

  export type CashBoxCreateWithoutPaymentsInput = {
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    opened: UserCreateNestedOneWithoutOpenedCashBoxesInput
    closed?: UserCreateNestedOneWithoutClosedCashBoxesInput
    cashboxMovements?: CashBoxMovementCreateNestedManyWithoutCashboxInput
  }

  export type CashBoxUncheckedCreateWithoutPaymentsInput = {
    id?: number
    userDocumentOpened: string
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    userDocumentClosed?: string | null
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    cashboxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutCashboxInput
  }

  export type CashBoxCreateOrConnectWithoutPaymentsInput = {
    where: CashBoxWhereUniqueInput
    create: XOR<CashBoxCreateWithoutPaymentsInput, CashBoxUncheckedCreateWithoutPaymentsInput>
  }

  export type PaymentMethodCreateWithoutPaymentsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type PaymentMethodUncheckedCreateWithoutPaymentsInput = {
    name: string
    description?: string | null
    color?: string | null
    isActive?: boolean
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type PaymentMethodCreateOrConnectWithoutPaymentsInput = {
    where: PaymentMethodWhereUniqueInput
    create: XOR<PaymentMethodCreateWithoutPaymentsInput, PaymentMethodUncheckedCreateWithoutPaymentsInput>
  }

  export type UserCreateWithoutPaymentsReceivedInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPaymentsReceivedInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentsReceivedInput, UserUncheckedCreateWithoutPaymentsReceivedInput>
  }

  export type CustomerCreateWithoutPaymentsInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPaymentsInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPaymentsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPaymentsInput, CustomerUncheckedCreateWithoutPaymentsInput>
  }

  export type OrderUpsertWithoutPaymentInput = {
    update: XOR<OrderUpdateWithoutPaymentInput, OrderUncheckedUpdateWithoutPaymentInput>
    create: XOR<OrderCreateWithoutPaymentInput, OrderUncheckedCreateWithoutPaymentInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutPaymentInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutPaymentInput, OrderUncheckedUpdateWithoutPaymentInput>
  }

  export type OrderUpdateWithoutPaymentInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutPaymentInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type CashBoxUpsertWithoutPaymentsInput = {
    update: XOR<CashBoxUpdateWithoutPaymentsInput, CashBoxUncheckedUpdateWithoutPaymentsInput>
    create: XOR<CashBoxCreateWithoutPaymentsInput, CashBoxUncheckedCreateWithoutPaymentsInput>
    where?: CashBoxWhereInput
  }

  export type CashBoxUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: CashBoxWhereInput
    data: XOR<CashBoxUpdateWithoutPaymentsInput, CashBoxUncheckedUpdateWithoutPaymentsInput>
  }

  export type CashBoxUpdateWithoutPaymentsInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    opened?: UserUpdateOneRequiredWithoutOpenedCashBoxesNestedInput
    closed?: UserUpdateOneWithoutClosedCashBoxesNestedInput
    cashboxMovements?: CashBoxMovementUpdateManyWithoutCashboxNestedInput
  }

  export type CashBoxUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocumentOpened?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashboxMovements?: CashBoxMovementUncheckedUpdateManyWithoutCashboxNestedInput
  }

  export type PaymentMethodUpsertWithoutPaymentsInput = {
    update: XOR<PaymentMethodUpdateWithoutPaymentsInput, PaymentMethodUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PaymentMethodCreateWithoutPaymentsInput, PaymentMethodUncheckedCreateWithoutPaymentsInput>
    where?: PaymentMethodWhereInput
  }

  export type PaymentMethodUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PaymentMethodWhereInput
    data: XOR<PaymentMethodUpdateWithoutPaymentsInput, PaymentMethodUncheckedUpdateWithoutPaymentsInput>
  }

  export type PaymentMethodUpdateWithoutPaymentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentMethodUncheckedUpdateWithoutPaymentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutPaymentsReceivedInput = {
    update: XOR<UserUpdateWithoutPaymentsReceivedInput, UserUncheckedUpdateWithoutPaymentsReceivedInput>
    create: XOR<UserCreateWithoutPaymentsReceivedInput, UserUncheckedCreateWithoutPaymentsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentsReceivedInput, UserUncheckedUpdateWithoutPaymentsReceivedInput>
  }

  export type UserUpdateWithoutPaymentsReceivedInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentsReceivedInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CustomerUpsertWithoutPaymentsInput = {
    update: XOR<CustomerUpdateWithoutPaymentsInput, CustomerUncheckedUpdateWithoutPaymentsInput>
    create: XOR<CustomerCreateWithoutPaymentsInput, CustomerUncheckedCreateWithoutPaymentsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutPaymentsInput, CustomerUncheckedUpdateWithoutPaymentsInput>
  }

  export type CustomerUpdateWithoutPaymentsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPaymentsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type InventoryMovementCreateWithoutInventoryMovementTypeInput = {
    quantityMovement: number
    reasonDescription: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventory: InventoryCreateNestedOneWithoutInventoryMovementsInput
    user: UserCreateNestedOneWithoutInventoryMovementsInput
  }

  export type InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput = {
    id?: number
    inventoryId: number
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementCreateOrConnectWithoutInventoryMovementTypeInput = {
    where: InventoryMovementWhereUniqueInput
    create: XOR<InventoryMovementCreateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput>
  }

  export type InventoryMovementCreateManyInventoryMovementTypeInputEnvelope = {
    data: InventoryMovementCreateManyInventoryMovementTypeInput | InventoryMovementCreateManyInventoryMovementTypeInput[]
    skipDuplicates?: boolean
  }

  export type InventoryMovementUpsertWithWhereUniqueWithoutInventoryMovementTypeInput = {
    where: InventoryMovementWhereUniqueInput
    update: XOR<InventoryMovementUpdateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedUpdateWithoutInventoryMovementTypeInput>
    create: XOR<InventoryMovementCreateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedCreateWithoutInventoryMovementTypeInput>
  }

  export type InventoryMovementUpdateWithWhereUniqueWithoutInventoryMovementTypeInput = {
    where: InventoryMovementWhereUniqueInput
    data: XOR<InventoryMovementUpdateWithoutInventoryMovementTypeInput, InventoryMovementUncheckedUpdateWithoutInventoryMovementTypeInput>
  }

  export type InventoryMovementUpdateManyWithWhereWithoutInventoryMovementTypeInput = {
    where: InventoryMovementScalarWhereInput
    data: XOR<InventoryMovementUpdateManyMutationInput, InventoryMovementUncheckedUpdateManyWithoutInventoryMovementTypeInput>
  }

  export type ProductCreateWithoutInventoryInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    productType: ProductTypeCreateNestedOneWithoutProductsInput
    productCategory: ProductCategoryCreateNestedOneWithoutProductsInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    productStatus?: ProductStatusCreateNestedOneWithoutProductsInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutInventoryInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutInventoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutInventoryInput, ProductUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryMovementCreateWithoutInventoryInput = {
    quantityMovement: number
    reasonDescription: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    inventoryMovementType: InventoryMovementTypeCreateNestedOneWithoutMovementsInput
    user: UserCreateNestedOneWithoutInventoryMovementsInput
  }

  export type InventoryMovementUncheckedCreateWithoutInventoryInput = {
    id?: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementCreateOrConnectWithoutInventoryInput = {
    where: InventoryMovementWhereUniqueInput
    create: XOR<InventoryMovementCreateWithoutInventoryInput, InventoryMovementUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryMovementCreateManyInventoryInputEnvelope = {
    data: InventoryMovementCreateManyInventoryInput | InventoryMovementCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutInventoryInput = {
    update: XOR<ProductUpdateWithoutInventoryInput, ProductUncheckedUpdateWithoutInventoryInput>
    create: XOR<ProductCreateWithoutInventoryInput, ProductUncheckedCreateWithoutInventoryInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutInventoryInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutInventoryInput, ProductUncheckedUpdateWithoutInventoryInput>
  }

  export type ProductUpdateWithoutInventoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: ProductTypeUpdateOneRequiredWithoutProductsNestedInput
    productCategory?: ProductCategoryUpdateOneRequiredWithoutProductsNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    productStatus?: ProductStatusUpdateOneRequiredWithoutProductsNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type InventoryMovementUpsertWithWhereUniqueWithoutInventoryInput = {
    where: InventoryMovementWhereUniqueInput
    update: XOR<InventoryMovementUpdateWithoutInventoryInput, InventoryMovementUncheckedUpdateWithoutInventoryInput>
    create: XOR<InventoryMovementCreateWithoutInventoryInput, InventoryMovementUncheckedCreateWithoutInventoryInput>
  }

  export type InventoryMovementUpdateWithWhereUniqueWithoutInventoryInput = {
    where: InventoryMovementWhereUniqueInput
    data: XOR<InventoryMovementUpdateWithoutInventoryInput, InventoryMovementUncheckedUpdateWithoutInventoryInput>
  }

  export type InventoryMovementUpdateManyWithWhereWithoutInventoryInput = {
    where: InventoryMovementScalarWhereInput
    data: XOR<InventoryMovementUpdateManyMutationInput, InventoryMovementUncheckedUpdateManyWithoutInventoryInput>
  }

  export type InventoryCreateWithoutInventoryMovementsInput = {
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    product: ProductCreateNestedOneWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutInventoryMovementsInput = {
    id?: number
    productId: number
    currentQuantity?: number
    minimumStock?: number
    storageLocation?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryCreateOrConnectWithoutInventoryMovementsInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutInventoryMovementsInput, InventoryUncheckedCreateWithoutInventoryMovementsInput>
  }

  export type InventoryMovementTypeCreateWithoutMovementsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type InventoryMovementTypeUncheckedCreateWithoutMovementsInput = {
    code: string
    name: string
    description?: string | null
    color?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type InventoryMovementTypeCreateOrConnectWithoutMovementsInput = {
    where: InventoryMovementTypeWhereUniqueInput
    create: XOR<InventoryMovementTypeCreateWithoutMovementsInput, InventoryMovementTypeUncheckedCreateWithoutMovementsInput>
  }

  export type UserCreateWithoutInventoryMovementsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInventoryMovementsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInventoryMovementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInventoryMovementsInput, UserUncheckedCreateWithoutInventoryMovementsInput>
  }

  export type InventoryUpsertWithoutInventoryMovementsInput = {
    update: XOR<InventoryUpdateWithoutInventoryMovementsInput, InventoryUncheckedUpdateWithoutInventoryMovementsInput>
    create: XOR<InventoryCreateWithoutInventoryMovementsInput, InventoryUncheckedCreateWithoutInventoryMovementsInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutInventoryMovementsInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutInventoryMovementsInput, InventoryUncheckedUpdateWithoutInventoryMovementsInput>
  }

  export type InventoryUpdateWithoutInventoryMovementsInput = {
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutInventoryMovementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    currentQuantity?: IntFieldUpdateOperationsInput | number
    minimumStock?: IntFieldUpdateOperationsInput | number
    storageLocation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementTypeUpsertWithoutMovementsInput = {
    update: XOR<InventoryMovementTypeUpdateWithoutMovementsInput, InventoryMovementTypeUncheckedUpdateWithoutMovementsInput>
    create: XOR<InventoryMovementTypeCreateWithoutMovementsInput, InventoryMovementTypeUncheckedCreateWithoutMovementsInput>
    where?: InventoryMovementTypeWhereInput
  }

  export type InventoryMovementTypeUpdateToOneWithWhereWithoutMovementsInput = {
    where?: InventoryMovementTypeWhereInput
    data: XOR<InventoryMovementTypeUpdateWithoutMovementsInput, InventoryMovementTypeUncheckedUpdateWithoutMovementsInput>
  }

  export type InventoryMovementTypeUpdateWithoutMovementsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementTypeUncheckedUpdateWithoutMovementsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutInventoryMovementsInput = {
    update: XOR<UserUpdateWithoutInventoryMovementsInput, UserUncheckedUpdateWithoutInventoryMovementsInput>
    create: XOR<UserCreateWithoutInventoryMovementsInput, UserUncheckedCreateWithoutInventoryMovementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInventoryMovementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInventoryMovementsInput, UserUncheckedUpdateWithoutInventoryMovementsInput>
  }

  export type UserUpdateWithoutInventoryMovementsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInventoryMovementsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    logs?: LogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    logs?: LogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type CustomerCreateWithoutSessionsInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    logs?: LogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutSessionsInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    logs?: LogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutSessionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSessionsInput, CustomerUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CustomerUpsertWithoutSessionsInput = {
    update: XOR<CustomerUpdateWithoutSessionsInput, CustomerUncheckedUpdateWithoutSessionsInput>
    create: XOR<CustomerCreateWithoutSessionsInput, CustomerUncheckedCreateWithoutSessionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutSessionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutSessionsInput, CustomerUncheckedUpdateWithoutSessionsInput>
  }

  export type CustomerUpdateWithoutSessionsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSessionsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserCreateWithoutLogsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutUsersInput
    role: RoleCreateNestedOneWithoutUsersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutUsersInput
    createdThemes?: ThemeCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileCreateNestedOneWithoutUserInput
    commandOpener?: CommandCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandCreateNestedManyWithoutCloserInput
    orderCreator?: OrderCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogsInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    createdThemes?: ThemeUncheckedCreateNestedManyWithoutUserInput
    combinedTables?: CombineTableUncheckedCreateNestedManyWithoutCombinerInput
    releasedTables?: CombineTableUncheckedCreateNestedManyWithoutReleaserInput
    userProfile?: userProfileUncheckedCreateNestedOneWithoutUserInput
    commandOpener?: CommandUncheckedCreateNestedManyWithoutOpenerInput
    commandCloser?: CommandUncheckedCreateNestedManyWithoutCloserInput
    orderCreator?: OrderUncheckedCreateNestedManyWithoutCreatorInput
    orderCloser?: OrderUncheckedCreateNestedManyWithoutCloserInput
    openedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutOpenedInput
    closedCashBoxes?: CashBoxUncheckedCreateNestedManyWithoutClosedInput
    cashBoxMovements?: CashBoxMovementUncheckedCreateNestedManyWithoutUserInput
    paymentsReceived?: PaymentUncheckedCreateNestedManyWithoutReceiveInput
    inventoryMovements?: InventoryMovementUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
  }

  export type CustomerCreateWithoutLogsInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    documentType: DocumentTypeCreateNestedOneWithoutCustomersInput
    accountStatus?: AccountStatusCreateNestedOneWithoutCustomersInput
    profile?: CustomerProfileCreateNestedOneWithoutCustomerInput
    orders?: OrderCreateNestedManyWithoutCustomerInput
    payments?: PaymentCreateNestedManyWithoutPaidInput
    sessions?: SessionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutLogsInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
    profile?: CustomerProfileUncheckedCreateNestedOneWithoutCustomerInput
    orders?: OrderUncheckedCreateNestedManyWithoutCustomerInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPaidInput
    sessions?: SessionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutLogsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
  }

  export type UserUpsertWithoutLogsInput = {
    update: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
    create: XOR<UserCreateWithoutLogsInput, UserUncheckedCreateWithoutLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLogsInput, UserUncheckedUpdateWithoutLogsInput>
  }

  export type UserUpdateWithoutLogsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLogsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CustomerUpsertWithoutLogsInput = {
    update: XOR<CustomerUpdateWithoutLogsInput, CustomerUncheckedUpdateWithoutLogsInput>
    create: XOR<CustomerCreateWithoutLogsInput, CustomerUncheckedCreateWithoutLogsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutLogsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutLogsInput, CustomerUncheckedUpdateWithoutLogsInput>
  }

  export type CustomerUpdateWithoutLogsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutLogsInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type userProfileCreateManyThemeInput = {
    id?: number
    userDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    hireDate?: Date | string | null
    salary?: Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerProfileCreateManyThemeInput = {
    id?: number
    customerDocument: string
    fullName: string
    phoneNumber?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type userProfileUpdateWithoutThemeInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutUserProfileNestedInput
  }

  export type userProfileUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userProfileUncheckedUpdateManyWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerProfileUpdateWithoutThemeInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneRequiredWithoutProfileNestedInput
  }

  export type CustomerProfileUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerProfileUncheckedUpdateManyWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerDocument?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableCreateManyRestaurantZoneInput = {
    id?: number
    name: string
    capacity?: number
    tableStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type TableUpdateWithoutRestaurantZoneInput = {
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tableStatus?: TableStatusUpdateOneRequiredWithoutTablesNestedInput
    combineTableItems?: CombineTableItemUpdateManyWithoutTableNestedInput
    commands?: CommandUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutRestaurantZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    tableStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTableItems?: CombineTableItemUncheckedUpdateManyWithoutTableNestedInput
    commands?: CommandUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateManyWithoutRestaurantZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    tableStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TableCreateManyTableStatusInput = {
    id?: number
    name: string
    capacity?: number
    restaurantZoneName?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type TableUpdateWithoutTableStatusInput = {
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    restaurantZone?: RestaurantZoneUpdateOneWithoutTablesNestedInput
    combineTableItems?: CombineTableItemUpdateManyWithoutTableNestedInput
    commands?: CommandUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateWithoutTableStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantZoneName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTableItems?: CombineTableItemUncheckedUpdateManyWithoutTableNestedInput
    commands?: CommandUncheckedUpdateManyWithoutTableNestedInput
  }

  export type TableUncheckedUpdateManyWithoutTableStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    restaurantZoneName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemCreateManyTableInput = {
    id?: number
    combineTableId: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CommandCreateManyTableInput = {
    id?: number
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableItemUpdateWithoutTableInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTable?: CombineTableUpdateOneRequiredWithoutTablesNestedInput
  }

  export type CombineTableItemUncheckedUpdateWithoutTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    combineTableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemUncheckedUpdateManyWithoutTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    combineTableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandUpdateWithoutTableInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateManyWithoutTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemCreateManyCombineTableInput = {
    id?: number
    tableId: number
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CommandCreateManyCombineTableInput = {
    id?: number
    tableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableItemUpdateWithoutCombineTableInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneRequiredWithoutCombineTableItemsNestedInput
  }

  export type CombineTableItemUncheckedUpdateWithoutCombineTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableItemUncheckedUpdateManyWithoutCombineTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandUpdateWithoutCombineTableInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutCombineTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateManyWithoutCombineTableInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManyBrandInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductUpdateWithoutBrandInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: ProductTypeUpdateOneRequiredWithoutProductsNestedInput
    productCategory?: ProductCategoryUpdateOneRequiredWithoutProductsNestedInput
    productStatus?: ProductStatusUpdateOneRequiredWithoutProductsNestedInput
    inventory?: InventoryUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManyProductTypeInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productCategoryName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductUpdateWithoutProductTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productCategory?: ProductCategoryUpdateOneRequiredWithoutProductsNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    productStatus?: ProductStatusUpdateOneRequiredWithoutProductsNestedInput
    inventory?: InventoryUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutProductTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManyProductCategoryInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    brandName?: string | null
    productStatusCode?: string
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductUpdateWithoutProductCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: ProductTypeUpdateOneRequiredWithoutProductsNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    productStatus?: ProductStatusUpdateOneRequiredWithoutProductsNestedInput
    inventory?: InventoryUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutProductCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    productStatusCode?: StringFieldUpdateOperationsInput | string
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateManyProductStatusInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    offerPrice?: Decimal | DecimalJsLike | number | string | null
    productTypeName: string
    productCategoryName: string
    brandName?: string | null
    mainImageId?: number | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type ProductUpdateWithoutProductStatusInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    productType?: ProductTypeUpdateOneRequiredWithoutProductsNestedInput
    productCategory?: ProductCategoryUpdateOneRequiredWithoutProductsNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    inventory?: InventoryUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUncheckedUpdateOneWithoutProductNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutProductStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    offerPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    productTypeName?: StringFieldUpdateOperationsInput | string
    productCategoryName?: StringFieldUpdateOperationsInput | string
    brandName?: NullableStringFieldUpdateOperationsInput | string | null
    mainImageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyProductInput = {
    id?: number
    commandId: number
    orderCode?: string | null
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrderItemsNestedInput
    order?: OrderUpdateOneWithoutOrderItemsNestedInput
    orderItemStatus?: OrderItemStatusUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyDocumentTypeInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    roleName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerCreateManyDocumentTypeInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type UserUpdateWithoutDocumentTypeInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentTypeInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDocumentTypeInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    roleName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerUpdateWithoutDocumentTypeInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatus?: AccountStatusUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutDocumentTypeInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutDocumentTypeInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyAccountStatusInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    roleName: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CustomerCreateManyAccountStatusInput = {
    document: string
    username?: string | null
    email?: string | null
    password?: string | null
    documentTypeName: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type UserUpdateWithoutAccountStatusInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountStatusInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAccountStatusInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    roleName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomerUpdateWithoutAccountStatusInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutCustomersNestedInput
    profile?: CustomerProfileUpdateOneWithoutCustomerNestedInput
    orders?: OrderUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUpdateManyWithoutPaidNestedInput
    sessions?: SessionUpdateManyWithoutCustomerNestedInput
    logs?: LogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAccountStatusInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: CustomerProfileUncheckedUpdateOneWithoutCustomerNestedInput
    orders?: OrderUncheckedUpdateManyWithoutCustomerNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPaidNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutCustomerNestedInput
    logs?: LogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutAccountStatusInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCreateManyPermissioncategoryInput = {
    code: string
    name: string
    description?: string | null
    createdAt?: Date | string
    createdBy: string
  }

  export type PermissionUpdateWithoutPermissioncategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    rolePermissions?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutPermissioncategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    rolePermissions?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateManyWithoutPermissioncategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: number
    roleName: string
    createdAt?: Date | string
    createdBy: string
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyRoleInput = {
    id?: number
    permissionCode: string
    createdAt?: Date | string
    createdBy: string
  }

  export type UserCreateManyRoleInput = {
    document: string
    username: string
    email: string
    password: string
    pin?: string | null
    documentTypeName: string
    accountStatusCode?: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutRoleInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    documentType?: DocumentTypeUpdateOneRequiredWithoutUsersNestedInput
    accountStatus?: AccountStatusUpdateOneRequiredWithoutUsersNestedInput
    createdThemes?: ThemeUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    logs?: LogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdThemes?: ThemeUncheckedUpdateManyWithoutUserNestedInput
    combinedTables?: CombineTableUncheckedUpdateManyWithoutCombinerNestedInput
    releasedTables?: CombineTableUncheckedUpdateManyWithoutReleaserNestedInput
    userProfile?: userProfileUncheckedUpdateOneWithoutUserNestedInput
    commandOpener?: CommandUncheckedUpdateManyWithoutOpenerNestedInput
    commandCloser?: CommandUncheckedUpdateManyWithoutCloserNestedInput
    orderCreator?: OrderUncheckedUpdateManyWithoutCreatorNestedInput
    orderCloser?: OrderUncheckedUpdateManyWithoutCloserNestedInput
    openedCashBoxes?: CashBoxUncheckedUpdateManyWithoutOpenedNestedInput
    closedCashBoxes?: CashBoxUncheckedUpdateManyWithoutClosedNestedInput
    cashBoxMovements?: CashBoxMovementUncheckedUpdateManyWithoutUserNestedInput
    paymentsReceived?: PaymentUncheckedUpdateManyWithoutReceiveNestedInput
    inventoryMovements?: InventoryMovementUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    logs?: LogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    document?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    pin?: NullableStringFieldUpdateOperationsInput | string | null
    documentTypeName?: StringFieldUpdateOperationsInput | string
    accountStatusCode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThemeCreateManyUserInput = {
    name: string
    primaryColor: string
    secondaryColor: string
    accentColor: string
    neutralColor: string
    isSystem?: boolean
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableCreateManyCombinerInput = {
    id?: number
    name: string
    combinerAt?: Date | string
    isActive?: boolean
    userDocumentReleaser?: string | null
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CombineTableCreateManyReleaserInput = {
    id?: number
    name: string
    userDocumentCombiner: string
    combinerAt?: Date | string
    isActive?: boolean
    releasedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CommandCreateManyOpenerInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CommandCreateManyCloserInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    commandStatusCode: string
    notes?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderCreateManyCreatorInput = {
    code: string
    commandId: number
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderCreateManyCloserInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CashBoxCreateManyOpenedInput = {
    id?: number
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    userDocumentClosed?: string | null
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxCreateManyClosedInput = {
    id?: number
    userDocumentOpened: string
    openedAt?: Date | string
    initialAmount: Decimal | DecimalJsLike | number | string
    closedAt?: Date | string | null
    finalAmount?: Decimal | DecimalJsLike | number | string | null
    totalSales?: Decimal | DecimalJsLike | number | string | null
    notes?: string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementCreateManyUserInput = {
    id?: number
    cashboxId: number
    cashboxMovementTypeCode: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateManyReceiveInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type InventoryMovementCreateManyUserInput = {
    id?: number
    inventoryId: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    customerDocument?: string | null
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type LogCreateManyUserInput = {
    id?: number
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    customerDocument?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type ThemeUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    usersUsingThisTheme?: userProfileUpdateManyWithoutThemeNestedInput
    customersUsingThisTheme?: CustomerProfileUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    usersUsingThisTheme?: userProfileUncheckedUpdateManyWithoutThemeNestedInput
    customersUsingThisTheme?: CustomerProfileUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    primaryColor?: StringFieldUpdateOperationsInput | string
    secondaryColor?: StringFieldUpdateOperationsInput | string
    accentColor?: StringFieldUpdateOperationsInput | string
    neutralColor?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableUpdateWithoutCombinerInput = {
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    releaser?: UserUpdateOneWithoutReleasedTablesNestedInput
    tables?: CombineTableItemUpdateManyWithoutCombineTableNestedInput
    commands?: CommandUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateWithoutCombinerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userDocumentReleaser?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: CombineTableItemUncheckedUpdateManyWithoutCombineTableNestedInput
    commands?: CommandUncheckedUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateManyWithoutCombinerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    userDocumentReleaser?: NullableStringFieldUpdateOperationsInput | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CombineTableUpdateWithoutReleaserInput = {
    name?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    combiner?: UserUpdateOneRequiredWithoutCombinedTablesNestedInput
    tables?: CombineTableItemUpdateManyWithoutCombineTableNestedInput
    commands?: CommandUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateWithoutReleaserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userDocumentCombiner?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    tables?: CombineTableItemUncheckedUpdateManyWithoutCombineTableNestedInput
    commands?: CommandUncheckedUpdateManyWithoutCombineTableNestedInput
  }

  export type CombineTableUncheckedUpdateManyWithoutReleaserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userDocumentCombiner?: StringFieldUpdateOperationsInput | string
    combinerAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandUpdateWithoutOpenerInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutOpenerInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateManyWithoutOpenerInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommandUpdateWithoutCloserInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    commandStatus?: CommandStatusUpdateOneRequiredWithoutCommandsNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutCloserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateManyWithoutCloserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commandStatusCode?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUpdateWithoutCreatorInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCreatorInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCreatorInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderUpdateWithoutCloserInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCloserInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCloserInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxUpdateWithoutOpenedInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closed?: UserUpdateOneWithoutClosedCashBoxesNestedInput
    cashboxMovements?: CashBoxMovementUpdateManyWithoutCashboxNestedInput
    payments?: PaymentUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxUncheckedUpdateWithoutOpenedInput = {
    id?: IntFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashboxMovements?: CashBoxMovementUncheckedUpdateManyWithoutCashboxNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxUncheckedUpdateManyWithoutOpenedInput = {
    id?: IntFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentClosed?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxUpdateWithoutClosedInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    opened?: UserUpdateOneRequiredWithoutOpenedCashBoxesNestedInput
    cashboxMovements?: CashBoxMovementUpdateManyWithoutCashboxNestedInput
    payments?: PaymentUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxUncheckedUpdateWithoutClosedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocumentOpened?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashboxMovements?: CashBoxMovementUncheckedUpdateManyWithoutCashboxNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCashBoxNestedInput
  }

  export type CashBoxUncheckedUpdateManyWithoutClosedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocumentOpened?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initialAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    finalAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalSales?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementUpdateWithoutUserInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashbox?: CashBoxUpdateOneRequiredWithoutCashboxMovementsNestedInput
    cashboxMovementType?: CashBoxMovementTypeUpdateOneRequiredWithoutCashBoxMovementNestedInput
  }

  export type CashBoxMovementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashboxId?: IntFieldUpdateOperationsInput | number
    cashboxMovementTypeCode?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashboxId?: IntFieldUpdateOperationsInput | number
    cashboxMovementTypeCode?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUpdateWithoutReceiveInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
    cashBox?: CashBoxUpdateOneRequiredWithoutPaymentsNestedInput
    paymentMethod?: PaymentMethodUpdateOneRequiredWithoutPaymentsNestedInput
    paid?: CustomerUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutReceiveInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutReceiveInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementUpdateWithoutUserInput = {
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutInventoryMovementsNestedInput
    inventoryMovementType?: InventoryMovementTypeUpdateOneRequiredWithoutMovementsNestedInput
  }

  export type InventoryMovementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    inventoryMovementTypeCode?: StringFieldUpdateOperationsInput | string
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    inventoryMovementTypeCode?: StringFieldUpdateOperationsInput | string
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    customer?: CustomerUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUpdateWithoutUserInput = {
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    customerDocument?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateManyCustomerInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type PaymentCreateManyPaidInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type SessionCreateManyCustomerInput = {
    id?: string
    userDocument?: string | null
    token: string
    deviceInfo?: string | null
    ipAddress?: string | null
    isActive?: boolean
    expiresAt: Date | string
    closedAt?: Date | string | null
    closedBy?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type LogCreateManyCustomerInput = {
    id?: number
    entityName: string
    entityId?: string | null
    action: string
    message?: string | null
    userDocument?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    createdAt?: Date | string
  }

  export type OrderUpdateWithoutCustomerInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCustomerInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCustomerInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUpdateWithoutPaidInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
    cashBox?: CashBoxUpdateOneRequiredWithoutPaymentsNestedInput
    paymentMethod?: PaymentMethodUpdateOneRequiredWithoutPaymentsNestedInput
    receive?: UserUpdateOneRequiredWithoutPaymentsReceivedNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPaidInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutPaidInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    token?: StringFieldUpdateOperationsInput | string
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUpdateWithoutCustomerInput = {
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLogsNestedInput
  }

  export type LogUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityName?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    userDocument?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommandCreateManyCommandStatusInput = {
    id?: number
    tableId?: number | null
    combineTableId?: number | null
    userDocumentOpener: string
    openedAt?: Date | string
    notes?: string | null
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type CommandUpdateWithoutCommandStatusInput = {
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    table?: TableUpdateOneWithoutCommandsNestedInput
    combineTable?: CombineTableUpdateOneWithoutCommandsNestedInput
    opener?: UserUpdateOneRequiredWithoutCommandOpenerNestedInput
    closer?: UserUpdateOneWithoutCommandCloserNestedInput
    orders?: OrderUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateWithoutCommandStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutCommandNestedInput
    orderItems?: OrderItemUncheckedUpdateManyWithoutCommandNestedInput
  }

  export type CommandUncheckedUpdateManyWithoutCommandStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableId?: NullableIntFieldUpdateOperationsInput | number | null
    combineTableId?: NullableIntFieldUpdateOperationsInput | number | null
    userDocumentOpener?: StringFieldUpdateOperationsInput | string
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderCreateManyCommandInput = {
    code: string
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    orderStatusCode: string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemCreateManyCommandInput = {
    id?: number
    orderCode?: string | null
    productId: number
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderUpdateWithoutCommandInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    orderStatus?: OrderStatusUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutCommandInput = {
    code?: StringFieldUpdateOperationsInput | string
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutCommandInput = {
    code?: StringFieldUpdateOperationsInput | string
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    orderStatusCode?: StringFieldUpdateOperationsInput | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUpdateWithoutCommandInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    orderItemStatus?: OrderItemStatusUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutCommandInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutCommandInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderCreateManyOrderStatusInput = {
    code: string
    commandId: number
    userDocumentCreator: string
    createdAt?: Date | string
    customerDocument: string
    subtotal: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxAmount?: Decimal | DecimalJsLike | number | string
    totalAmount?: Decimal | DecimalJsLike | number | string
    userDocumentCloser?: string | null
    closedAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderUpdateWithoutOrderStatusInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrdersNestedInput
    creator?: UserUpdateOneRequiredWithoutOrderCreatorNestedInput
    customer?: CustomerUpdateOneRequiredWithoutOrdersNestedInput
    closer?: UserUpdateOneWithoutOrderCloserNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    payment?: PaymentUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderStatusInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    payment?: PaymentUncheckedUpdateOneWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutOrderStatusInput = {
    code?: StringFieldUpdateOperationsInput | string
    commandId?: IntFieldUpdateOperationsInput | number
    userDocumentCreator?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerDocument?: StringFieldUpdateOperationsInput | string
    subtotal?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    userDocumentCloser?: NullableStringFieldUpdateOperationsInput | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyOrderItemStatusInput = {
    id?: number
    commandId: number
    orderCode?: string | null
    productId: number
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemUpdateWithoutOrderItemStatusInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrderItemsNestedInput
    order?: OrderUpdateOneWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderItemStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderItemStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    orderCode?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    commandId: number
    productId: number
    orderItemStatusCode?: string
    quantity?: number
    specialInstructions?: string | null
    unitPrice: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    totalPrice: Decimal | DecimalJsLike | number | string
    notes?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type OrderItemUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    command?: CommandUpdateOneRequiredWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemsNestedInput
    orderItemStatus?: OrderItemStatusUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    commandId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    orderItemStatusCode?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    specialInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementCreateManyCashboxInput = {
    id?: number
    userDocument: string
    cashboxMovementTypeCode: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentCreateManyCashBoxInput = {
    id?: number
    orderCode: string
    paymentMethodName: string
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementUpdateWithoutCashboxInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutCashBoxMovementsNestedInput
    cashboxMovementType?: CashBoxMovementTypeUpdateOneRequiredWithoutCashBoxMovementNestedInput
  }

  export type CashBoxMovementUncheckedUpdateWithoutCashboxInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    cashboxMovementTypeCode?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementUncheckedUpdateManyWithoutCashboxInput = {
    id?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    cashboxMovementTypeCode?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUpdateWithoutCashBoxInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
    paymentMethod?: PaymentMethodUpdateOneRequiredWithoutPaymentsNestedInput
    receive?: UserUpdateOneRequiredWithoutPaymentsReceivedNestedInput
    paid?: CustomerUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCashBoxInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutCashBoxInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    paymentMethodName?: StringFieldUpdateOperationsInput | string
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementCreateManyCashboxMovementTypeInput = {
    id?: number
    cashboxId: number
    userDocument: string
    amount: Decimal | DecimalJsLike | number | string
    concept?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type CashBoxMovementUpdateWithoutCashboxMovementTypeInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cashbox?: CashBoxUpdateOneRequiredWithoutCashboxMovementsNestedInput
    user?: UserUpdateOneRequiredWithoutCashBoxMovementsNestedInput
  }

  export type CashBoxMovementUncheckedUpdateWithoutCashboxMovementTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashboxId?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CashBoxMovementUncheckedUpdateManyWithoutCashboxMovementTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    cashboxId?: IntFieldUpdateOperationsInput | number
    userDocument?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    concept?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateManyPaymentMethodInput = {
    id?: number
    orderCode: string
    cashBoxId: number
    totalAmount: Decimal | DecimalJsLike | number | string
    receivedAmount?: Decimal | DecimalJsLike | number | string | null
    changeAmount?: Decimal | DecimalJsLike | number | string | null
    transactionNumber?: string | null
    notes?: string | null
    userDocumentReceive: string
    customerDocumentPaid?: string | null
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
  }

  export type PaymentUpdateWithoutPaymentMethodInput = {
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    order?: OrderUpdateOneRequiredWithoutPaymentNestedInput
    cashBox?: CashBoxUpdateOneRequiredWithoutPaymentsNestedInput
    receive?: UserUpdateOneRequiredWithoutPaymentsReceivedNestedInput
    paid?: CustomerUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPaymentMethodInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUncheckedUpdateManyWithoutPaymentMethodInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderCode?: StringFieldUpdateOperationsInput | string
    cashBoxId?: IntFieldUpdateOperationsInput | number
    totalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    receivedAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    changeAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    transactionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userDocumentReceive?: StringFieldUpdateOperationsInput | string
    customerDocumentPaid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementCreateManyInventoryMovementTypeInput = {
    id?: number
    inventoryId: number
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementUpdateWithoutInventoryMovementTypeInput = {
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventory?: InventoryUpdateOneRequiredWithoutInventoryMovementsNestedInput
    user?: UserUpdateOneRequiredWithoutInventoryMovementsNestedInput
  }

  export type InventoryMovementUncheckedUpdateWithoutInventoryMovementTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    userDocument?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementUncheckedUpdateManyWithoutInventoryMovementTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    userDocument?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementCreateManyInventoryInput = {
    id?: number
    inventoryMovementTypeCode: string
    quantityMovement: number
    reasonDescription: string
    userDocument: string
    createdAt?: Date | string
    createdBy: string
    updatedAt?: Date | string | null
    updatedBy?: string | null
    deletedAt?: Date | string | null
    deletedBy?: string | null
  }

  export type InventoryMovementUpdateWithoutInventoryInput = {
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
    inventoryMovementType?: InventoryMovementTypeUpdateOneRequiredWithoutMovementsNestedInput
    user?: UserUpdateOneRequiredWithoutInventoryMovementsNestedInput
  }

  export type InventoryMovementUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryMovementTypeCode?: StringFieldUpdateOperationsInput | string
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    userDocument?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryMovementUncheckedUpdateManyWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryMovementTypeCode?: StringFieldUpdateOperationsInput | string
    quantityMovement?: IntFieldUpdateOperationsInput | number
    reasonDescription?: StringFieldUpdateOperationsInput | string
    userDocument?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}